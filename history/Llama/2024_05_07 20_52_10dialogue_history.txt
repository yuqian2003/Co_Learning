user: You are a Python programming expert. There is an error in the following code, please correct the code: def min_cost(cost, m, n):
    # Get the dimensions of the cost matrix
    rows = len(cost)
    cols = len(cost[0]) if rows > 0 else 0

    # Check if the destination is within the matrix boundaries
    if m >= rows or n >= cols:
        raise IndexError("Destination position is out of matrix bounds.")

    # Initialize the cost matrix to store the minimum costs
    dp = [[float('inf')] * cols for _ in range(rows)]

    # Set the cost of the starting position to 0
    dp[0][0] = cost[0][0]

    # Calculate the minimum costs for each position in the matrix
    for i in range(rows):
        for j in range(cols):
            # Calculate the cost from the top position
            if i > 0:
                dp[i][j] = min(dp[i][j], dp[i - 1][j] + cost[i][j])

            # Calculate the cost from the left position
            if j > 0:
                dp[i][j] = min(dp[i][j], dp[i][j - 1] + cost[i][j])

    # Return the minimum cost to reach the destination
    return dp[m][n]. Your corrected code should pass these tests: assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8. Please only directly give the correct code with out any explanation after your modification and forget the assert in your answer. Please using English to do this job! Please do not renamed the function!
assistant: Here is the corrected code:

```
def min_cost(cost, m, n):
    rows = len(cost)
    cols = len(cost[0]) if rows > 0 else 0

    if m >= rows or n >= cols:
        raise IndexError("Destination position is out of matrix bounds.")

    dp = [[float('inf')] * cols for _ in range(rows)]

    dp[0][0] = cost[0][0]

    for i in range(1, rows):
        dp[i][0] = dp[i - 1][0] + cost[i][0]

    for j in range(1, cols):
        dp[0][j] = dp[0][j - 1] + cost[0][j]

    for i in range(1, rows):
        for j in range(1, cols):
            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]

    return dp[m][n]
```
