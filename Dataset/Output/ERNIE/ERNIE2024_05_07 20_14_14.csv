text,code,task_id,test_setup_code,test_list,challenge_test_list,Error_code,history_json,final_code,reward,time,The number of errors corrected
"Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].","R = 3
C = 3
def min_cost(cost, m, n): 
	tc = [[0 for x in range(C)] for x in range(R)] 
	tc[0][0] = cost[0][0] 
	for i in range(1, m+1): 
		tc[i][0] = tc[i-1][0] + cost[i][0] 
	for j in range(1, n+1): 
		tc[0][j] = tc[0][j-1] + cost[0][j] 
	for i in range(1, m+1): 
		for j in range(1, n+1): 
			tc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] 
	return tc[m][n]",1,"Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].","['assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8', 'assert min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12', 'assert min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16']",[],"def min_cost(cost, m, n):
    # Get the dimensions of the cost matrix
    rows = len(cost)
    cols = len(cost[0]) if rows > 0 else 0

    # Check if the destination is within the matrix boundaries
    if m >= rows or n >= cols:
        raise IndexError(""Destination position is out of matrix bounds."")

    # Initialize the cost matrix to store the minimum costs
    dp = [[float('inf')] * cols for _ in range(rows)]

    # Set the cost of the starting position to 0
    dp[0][0] = cost[0][0]

    # Calculate the minimum costs for each position in the matrix
    for i in range(rows):
        for j in range(cols):
            # Calculate the cost from the top position
            if i > 0:
                dp[i][j] = min(dp[i][j], dp[i - 1][j] + cost[i][j])

            # Calculate the cost from the left position
            if j > 0:
                dp[i][j] = min(dp[i][j], dp[i][j - 1] + cost[i][j])

    # Return the minimum cost to reach the destination
    return dp[m][n]","[{'role': 'user', 'content': 'You are a Python programming expert. There is an error in the following code, please correct the code: def min_cost(cost, m, n):\n    # Get the dimensions of the cost matrix\n    rows = len(cost)\n    cols = len(cost[0]) if rows > 0 else 0\n\n    # Check if the destination is within the matrix boundaries\n    if m >= rows or n >= cols:\n        raise IndexError(""Destination position is out of matrix bounds."")\n\n    # Initialize the cost matrix to store the minimum costs\n    dp = [[float(\'inf\')] * cols for _ in range(rows)]\n\n    # Set the cost of the starting position to 0\n    dp[0][0] = cost[0][0]\n\n    # Calculate the minimum costs for each position in the matrix\n    for i in range(rows):\n        for j in range(cols):\n            # Calculate the cost from the top position\n            if i > 0:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + cost[i][j])\n\n            # Calculate the cost from the left position\n            if j > 0:\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + cost[i][j])\n\n    # Return the minimum cost to reach the destination\n    return dp[m][n]. Your corrected code should pass these tests: assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8. Please only directly give the correct code with out any explanation after your modification and forget the assert in your answer. Please using English to do this job! Please do not renamed the function!'}, {'role': 'assistant', 'content': 'Here\'s the corrected code:\n\n\n```python\ndef min_cost(cost, m, n):\n    # Get the dimensions of the cost matrix\n    rows = len(cost)\n    cols = len(cost[0]) if rows > 0 else 0\n\n    # Check if the destination is within the matrix boundaries\n    if m >= rows or n >= cols:\n        raise IndexError(""Destination position is out of matrix bounds."")\n\n    # Initialize the cost matrix to store the minimum costs\n    dp = [[float(\'inf\')] * cols for _ in range(rows)]\n\n    # Set the cost of the starting position to 0\n    dp[0][0] = cost[0][0]\n\n    # Calculate the minimum costs for each position in the matrix\n    for i in range(rows):\n        for j in range(cols):\n            # Calculate the cost from the top position\n            if i > 0:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + cost[i][j])\n\n            # Calculate the cost from the left position\n            if j > 0:\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + cost[i][j])\n\n    # The original code had an error where it was returning dp[m][n] instead of dp[m - 1][n - 1]\n    # Since the indices start from 0, we need to subtract 1 from m and n to get the correct position\n    return dp[m - 1][n - 1]\n```\nNote that the only change made was in the return statement. The original code was returning `dp[m][n]`, but since the indices in the `dp` matrix start from 0, we need to subtract 1 from `m` and `n` to get the correct position. The corrected code returns `dp[m - 1][n - 1]`.'}]","def min_cost(cost, m, n):
    # Get the dimensions of the cost matrix
    rows = len(cost)
    cols = len(cost[0]) if rows > 0 else 0

    # Check if the destination is within the matrix boundaries
    if m >= rows or n >= cols:
        raise IndexError(""Destination position is out of matrix bounds."")

    # Initialize the cost matrix to store the minimum costs
    dp = [[float('inf')] * cols for _ in range(rows)]

    # Set the cost of the starting position to 0
    dp[0][0] = cost[0][0]

    # Calculate the minimum costs for each position in the matrix
    for i in range(rows):
        for j in range(cols):
            # Calculate the cost from the top position
            if i > 0:
                dp[i][j] = min(dp[i][j], dp[i - 1][j] + cost[i][j])

            # Calculate the cost from the left position
            if j > 0:
                dp[i][j] = min(dp[i][j], dp[i][j - 1] + cost[i][j])

    # The original code had an error where it was returning dp[m][n] instead of dp[m - 1][n - 1]
    # Since the indices start from 0, we need to subtract 1 from m and n to get the correct position
    return dp[m - 1][n - 1]",102.0,25.386901140213013,1
Write a function to find the similar elements from the given two tuple lists.,"def similar_elements(test_tup1, test_tup2):
  res = tuple(set(test_tup1) & set(test_tup2))
  return (res) ",2,Write a function to find the similar elements from the given two tuple lists.,"['assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)', 'assert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)', 'assert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)']",[],"def find_similar_elements(list1, list2):
    similar_elements = []
    
    for tup1 in list1:
        for tup2 in list2:
            if len(tup1) == len(tup2) and all(elem1 == elem2 for elem1, elem2 in zip(tup1, tup2)):
                similar_elements.append(tup1)
                break  # No need to continue searching in list2 once a match is found
    
    return similar_elements",,,,,
Write a python function to identify non-prime numbers.,"import math
def is_not_prime(n):
    result = False
    for i in range(2,int(math.sqrt(n)) + 1):
        if n % i == 0:
            result = True
    return result",3,Write a python function to identify non-prime numbers.,"['assert is_not_prime(2) == False', 'assert is_not_prime(10) == True', 'assert is_not_prime(35) == True']",[],"def is_not_prime(n):
    if n <= 1:
        return True
    if n <= 3:
        return False
    if n % 2 == 0 or n % 3 == 0:
        return True
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return True
        i += 6
    return False",,,,,
Write a function to find the largest integers from a given list of numbers using heap queue algorithm.,"import heapq as hq
def heap_queue_largest(nums,n):
  largest_nums = hq.nlargest(n, nums)
  return largest_nums",4,Write a function to find the largest integers from a given list of numbers using heap queue algorithm.,"['assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] ', 'assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] ', 'assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]']",[],,,,,,
Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.,"def count_ways(n): 
	A = [0] * (n + 1) 
	B = [0] * (n + 1) 
	A[0] = 1
	A[1] = 0
	B[0] = 0
	B[1] = 1
	for i in range(2, n+1): 
		A[i] = A[i - 2] + 2 * B[i - 1] 
		B[i] = A[i - 1] + B[i - 2] 
	return A[n] ",5,Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.,"['assert count_ways(2) == 3', 'assert count_ways(8) == 153', 'assert count_ways(12) == 2131']",[],,,,,,
Write a python function to check whether the two numbers differ at one bit position only or not.,"def is_Power_Of_Two (x): 
    return x and (not(x & (x - 1))) 
def differ_At_One_Bit_Pos(a,b): 
    return is_Power_Of_Two(a ^ b)",6,Write a python function to check whether the two numbers differ at one bit position only or not.,"['assert differ_At_One_Bit_Pos(13,9) == True', 'assert differ_At_One_Bit_Pos(15,8) == False', 'assert differ_At_One_Bit_Pos(2,4) == False']",[],,,,,,
Write a function to find all words which are at least 4 characters long in a string by using regex.,"import re
def find_char_long(text):
  return (re.findall(r""\b\w{4,}\b"", text))",7,Write a function to find all words which are at least 4 characters long in a string by using regex.,"[""assert find_char_long('Please move back to stream') == ['Please', 'move', 'back', 'stream']"", ""assert find_char_long('Jing Eco and Tech') == ['Jing', 'Tech']"", ""assert find_char_long('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone']""]",[],"import re

def find_long_words(text):
    # Find all words that are at least 4 characters long
    pattern = r'\b\w{4,}\b'
    long_words = re.findall(pattern, text)
    return long_words",,,,,
Write a function to find squares of individual elements in a list using lambda function.,"def square_nums(nums):
 square_nums = list(map(lambda x: x ** 2, nums))
 return square_nums",8,Write a function to find squares of individual elements in a list using lambda function.,"['assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]', 'assert square_nums([10,20,30])==([100,400,900])', 'assert square_nums([12,15])==([144,225])']",[],"def square_elements(lst):
    return list(map(lambda x: x ** 2, lst))",,,,,
Write a python function to find the minimum number of rotations required to get the same string.,"def find_Rotations(str): 
    tmp = str + str
    n = len(str) 
    for i in range(1,n + 1): 
        substring = tmp[i: i+n] 
        if (str == substring): 
            return i 
    return n ",9,Write a python function to find the minimum number of rotations required to get the same string.,"['assert find_Rotations(""aaaa"") == 1', 'assert find_Rotations(""ab"") == 2', 'assert find_Rotations(""abc"") == 3']",[],"def min_rotations_to_get_same_string(s):
    n = len(s)
    if n == 0:
        return 0
    
    # Check if the string is already the same
    if s == s[1:] + s[0]:
        return 1
    
    # Check for rotation patterns
    for i in range(1, n // 2 + 1):
        if s == s[i:] + s[:i]:
            return i
    
    # If no rotation pattern is found, the minimum rotations is the length of the string
    return n",,,,,
Write a function to get the n smallest items from a dataset.,"import heapq
def small_nnum(list1,n):
  smallest=heapq.nsmallest(n,list1)
  return smallest",10,Write a function to get the n smallest items from a dataset.,"['assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]', 'assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[10,20,20,40,50]', 'assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[10,20,20]']",[],"def get_smallest_items(dataset, n):
    return sorted(dataset)[:n]",,,,,
Write a python function to remove first and last occurrence of a given character from the string.,"def remove_Occ(s,ch): 
    for i in range(len(s)): 
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    for i in range(len(s) - 1,-1,-1):  
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    return s ",11,Write a python function to remove first and last occurrence of a given character from the string.,"['assert remove_Occ(""hello"",""l"") == ""heo""', 'assert remove_Occ(""abcda"",""a"") == ""bcd""', 'assert remove_Occ(""PHP"",""P"") == ""H""']","['assert remove_Occ(""hellolloll"",""l"") == ""helollol""', 'assert remove_Occ("""",""l"") == """"']","def remove_first_last_occurrence(string, character):
    if not string or character not in string:
        return string

    # Remove the first occurrence
    string = string.replace(character, '', 1)

    # Remove the last occurrence
    string = string.rstrip(character)

    return string",,,,,
Write a function to sort a given matrix in ascending order according to the sum of its rows.,"def sort_matrix(M):
    result = sorted(M, key=sum)
    return result",12,Write a function to sort a given matrix in ascending order according to the sum of its rows.,"['assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]', 'assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]', 'assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]']",[],,,,,,
Write a function to count the most common words in a dictionary.,"from collections import Counter
def count_common(words):
  word_counts = Counter(words)
  top_four = word_counts.most_common(4)
  return (top_four)
",13,Write a function to count the most common words in a dictionary.,"['assert count_common([\'red\',\'green\',\'black\',\'pink\',\'black\',\'white\',\'black\',\'eyes\',\'white\',\'black\',\'orange\',\'pink\',\'pink\',\'red\',\'red\',\'white\',\'orange\',\'white\',""black"",\'pink\',\'green\',\'green\',\'pink\',\'green\',\'pink\',\'white\',\'orange\',""orange"",\'red\']) == [(\'pink\', 6), (\'black\', 5), (\'white\', 5), (\'red\', 4)]', ""assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]"", ""assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]""]",[],"def count_common_words(dictionary):
    word_counts = {}
    for word in dictionary:
        if word in word_counts:
            word_counts[word] += 1
        else:
            word_counts[word] = 1
    
    sorted_counts = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)
    return sorted_counts",,,,,
Write a python function to find the volume of a triangular prism.,"def find_Volume(l,b,h) : 
    return ((l * b * h) / 2) ",14,Write a python function to find the volume of a triangular prism.,"['assert find_Volume(10,8,6) == 240', 'assert find_Volume(3,2,2) == 6', 'assert find_Volume(1,2,1) == 1']",[],"def find_volume_of_triangular_prism(base, height, side_length):
    """"""
    Calculate the volume of a triangular prism.
    
    Parameters:
    base (float): The base area of the triangular prism.
    height (float): The height of the triangular prism.
    side_length (float): The length of the sides of the triangular base.
    
    Returns:
    float: The volume of the triangular prism.
    """"""
    # Calculate the area of the triangular base
    base_area = (base * base) / (4 * side_length)
    
    # Calculate the volume of the triangular prism
    volume = base_area * height
    
    return volume",,,,,
Write a function to split a string at lowercase letters.,"import re
def split_lowerstring(text):
 return (re.findall('[a-z][^a-z]*', text))",15,Write a function to split a string at lowercase letters.,"['assert split_lowerstring(""AbCd"")==[\'bC\',\'d\']', 'assert split_lowerstring(""Python"")==[\'y\', \'t\', \'h\', \'o\', \'n\']', 'assert split_lowerstring(""Programming"")==[\'r\', \'o\', \'g\', \'r\', \'a\', \'m\', \'m\', \'i\', \'n\', \'g\']']",[],"def split_at_lowercase(string):
    result = []
    current_word = ''
    for char in string:
        if char.islower():
            if current_word:
                result.append(current_word)
                current_word = ''
        current_word += char
    if current_word:
        result.append(current_word)
    return result",,,,,
Write a function to find sequences of lowercase letters joined with an underscore.,"import re
def text_lowercase_underscore(text):
        patterns = '^[a-z]+_[a-z]+$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')",16,Write a function to find sequences of lowercase letters joined with an underscore.,"['assert text_lowercase_underscore(""aab_cbbbc"")==(\'Found a match!\')', 'assert text_lowercase_underscore(""aab_Abbbc"")==(\'Not matched!\')', 'assert text_lowercase_underscore(""Aaab_abbbc"")==(\'Not matched!\')']","['assert text_lowercase_underscore(""aab-cbbbc"")==(\'Not matched!\')']","def find_lowercase_sequences(data):
    sequence = """"
    sequences = []
    in_sequence = False

    for char in data:
        if char.islower():
            if not in_sequence:
                in_sequence = True
                sequence = char
            else:
                sequence += char
        elif char == '_':
            if in_sequence:
                sequences.append(sequence)
                sequence = """"
            in_sequence = False
        else:
            in_sequence = False
            sequence = """"

    if in_sequence:
        sequences.append(sequence)

    return sequences",,,,,
Write a function to find the perimeter of a square.,"def square_perimeter(a):
  perimeter=4*a
  return perimeter",17,Write a function to find the perimeter of a square.,"['assert square_perimeter(10)==40', 'assert square_perimeter(5)==20', 'assert square_perimeter(4)==16']",[],"def square_perimeter(side_length):
    return 4 * side_length",,,,,
Write a function to remove characters from the first string which are present in the second string.,"NO_OF_CHARS = 256
def str_to_list(string): 
	temp = [] 
	for x in string: 
		temp.append(x) 
	return temp 
def lst_to_string(List): 
	return ''.join(List) 
def get_char_count_array(string): 
	count = [0] * NO_OF_CHARS 
	for i in string: 
		count[ord(i)] += 1
	return count 
def remove_dirty_chars(string, second_string): 
	count = get_char_count_array(second_string) 
	ip_ind = 0
	res_ind = 0
	temp = '' 
	str_list = str_to_list(string) 
	while ip_ind != len(str_list): 
		temp = str_list[ip_ind] 
		if count[ord(temp)] == 0: 
			str_list[res_ind] = str_list[ip_ind] 
			res_ind += 1
		ip_ind+=1
	return lst_to_string(str_list[0:res_ind]) ",18,Write a function to remove characters from the first string which are present in the second string.,"['assert remove_dirty_chars(""probasscurve"", ""pros"") == \'bacuve\'', 'assert remove_dirty_chars(""digitalindia"", ""talent"") == \'digiidi\'', 'assert remove_dirty_chars(""exoticmiles"", ""toxic"") == \'emles\' ']",[],"def remove_chars(string1, string2):
    return ''.join(char for char in string1 if char not in string2)",,,,,
Write a function to find whether a given array of integers contains any duplicate element.,"def test_duplicate(arraynums):
    nums_set = set(arraynums)    
    return len(arraynums) != len(nums_set)     ",19,Write a function to find whether a given array of integers contains any duplicate element.,"['assert test_duplicate(([1,2,3,4,5]))==False', 'assert test_duplicate(([1,2,3,4, 4]))==True', 'assert test_duplicate([1,1,2,2,3,3,4,4,5])==True']",[],,,,,,
Write a function to check if the given number is woodball or not.,"def is_woodall(x): 
	if (x % 2 == 0): 
		return False
	if (x == 1): 
		return True
	x = x + 1 
	p = 0
	while (x % 2 == 0): 
		x = x/2
		p = p + 1
		if (p == x): 
			return True
	return False",20,Write a function to check if the given number is woodball or not.,"['assert is_woodall(383) == True', 'assert is_woodall(254) == False', 'assert is_woodall(200) == False']","['assert is_woodall(32212254719) == True', 'assert is_woodall(32212254718) == False', 'assert is_woodall(159) == True']","def is_woodball(number):
    # Define the range of numbers that are considered ""woodballs""
    woodball_range = range(100, 200)  # Assuming woodballs are numbers from 100 to 199

    # Check if the number is within the woodball range
    if number in woodball_range:
        return True
    else:
        return False",,,,,
Write a function to find m number of multiples of n.,"def multiples_of_num(m,n): 
    multiples_of_num= list(range(n,(m+1)*n, n)) 
    return list(multiples_of_num)",21,Write a function to find m number of multiples of n.,"['assert multiples_of_num(4,3)== [3,6,9,12]', 'assert multiples_of_num(2,5)== [5,10]', 'assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]']",[],"def find_multiples(n, m):
    multiples = []
    for i in range(m):
        multiple = (i + 1) * n
        multiples.append(multiple)
    return multiples",,,,,
Write a function to find the first duplicate element in a given array of integers.,"def find_first_duplicate(nums):
    num_set = set()
    no_duplicate = -1

    for i in range(len(nums)):

        if nums[i] in num_set:
            return nums[i]
        else:
            num_set.add(nums[i])

    return no_duplicate",22,Write a function to find the first duplicate element in a given array of integers.,"['assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4', 'assert find_first_duplicate([1, 2, 3, 4])==-1', 'assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1']",[],,,,,,
Write a python function to find the maximum sum of elements of list in a list of lists.,"def maximum_Sum(list1): 
    maxi = -100000
    for x in list1: 
        sum = 0 
        for y in x: 
            sum+= y      
        maxi = max(sum,maxi)     
    return maxi ",23,Write a python function to find the maximum sum of elements of list in a list of lists.,"['assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33', 'assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6', 'assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19']","['assert maximum_Sum([[0,-1,-1],[-1,-1,-2],[-3,-2,-1]]) == -2']","def max_sum_of_elements(lst_of_lists):
    max_sum = float('-inf')
    for sublist in lst_of_lists:
        current_sum = sum(sublist)
        if current_sum > max_sum:
            max_sum = current_sum
    return max_sum",,,,,
Write a function to convert the given binary number to its decimal equivalent.,"def binary_to_decimal(binary): 
    binary1 = binary 
    decimal, i, n = 0, 0, 0
    while(binary != 0): 
        dec = binary % 10
        decimal = decimal + dec * pow(2, i) 
        binary = binary//10
        i += 1
    return (decimal)",24,Write a function to convert the given binary number to its decimal equivalent.,"['assert binary_to_decimal(100) == 4', 'assert binary_to_decimal(1011) == 11', 'assert binary_to_decimal(1101101) == 109']",[],"def binary_to_decimal(binary):
    decimal = 0
    base = 1
    for digit in reversed(binary):
        if digit == '1':
            decimal += base
        base *= 2
    return decimal",,,,,
Write a python function to find the product of non-repeated elements in a given array.,"def find_Product(arr,n): 
    arr.sort() 
    prod = 1
    for i in range(0,n,1): 
        if (arr[i - 1] != arr[i]): 
            prod = prod * arr[i] 
    return prod; ",25,Write a python function to find the product of non-repeated elements in a given array.,"['assert find_Product([1,1,2,3],4) == 6', 'assert find_Product([1,2,3,1,1],5) == 6', 'assert find_Product([1,1,4,5,6],5) == 120']","['assert find_Product([1,1,4,5,6,5,7,1,1,3,4],11) == 2520']","def product_of_non_repeated_elements(arr):
    count_dict = {}
    for num in arr:
        if num in count_dict:
            count_dict[num] += 1
        else:
            count_dict[num] = 1

    product = 1
    for num, count in count_dict.items():
        if count == 1:
            product *= num

    return product",,,,,
Write a function to check if the given tuple list has all k elements.,"def check_k_elements(test_list, K):
  res = True
  for tup in test_list:
    for ele in tup:
      if ele != K:
        res = False
  return (res) ",26,Write a function to check if the given tuple list has all k elements.,"['assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True', 'assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True', 'assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False']","['assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 6, 4), (4, )], 4) == False']",,,,,,
Write a python function to remove all digits from a list of strings.,"import re  
def remove(list): 
    pattern = '[0-9]'
    list = [re.sub(pattern, '', i) for i in list] 
    return list",27,Write a python function to remove all digits from a list of strings.,"[""assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']"", ""assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']"", ""assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']""]",[],,,,,,
Write a python function to find binomial co-efficient.,"def binomial_Coeff(n,k): 
    if k > n : 
       return 0
    if k==0 or k ==n : 
        return 1 
    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ",28,Write a python function to find binomial co-efficient.,"['assert binomial_Coeff(5,2) == 10', 'assert binomial_Coeff(4,3) == 4', 'assert binomial_Coeff(3,2) == 3']","['assert binomial_Coeff(14,6) == 3003']","def binomial_coefficient(n, k):
    if k == 0 or k == n:
        return 1
    if k > n - k:
        k = n - k
    result = 1
    for i in range(1, k + 1):
        result *= (n - i + 1) // i
    return result",,,,,
Write a python function to find the element occurring odd number of times.,"def get_Odd_Occurrence(arr,arr_size):   
    for i in range(0,arr_size): 
        count = 0
        for j in range(0,arr_size): 
            if arr[i] == arr[j]: 
                count+=1     
        if (count % 2 != 0): 
            return arr[i]     
    return -1",29,Write a python function to find the element occurring odd number of times.,"['assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1', 'assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3', 'assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5']",[],,,,,,
Write a python function to count all the substrings starting and ending with same characters.,"def check_Equality(s): 
    return (ord(s[0]) == ord(s[len(s) - 1])); 
def count_Substring_With_Equal_Ends(s): 
    result = 0; 
    n = len(s); 
    for i in range(n): 
        for j in range(1,n-i+1):  
            if (check_Equality(s[i:i+j])): 
                result+=1; 
    return result; ",30,Write a python function to count all the substrings starting and ending with same characters.,"['assert count_Substring_With_Equal_Ends(""abc"") == 3', 'assert count_Substring_With_Equal_Ends(""abcda"") == 6', 'assert count_Substring_With_Equal_Ends(""ab"") == 2']",[],"def count_same_char_substrings(string):
    count = 0
    length = len(string)
    
    for i in range(length):
        for j in range(i + 1, length + 1):
            substring = string[i:j]
            if substring[0] == substring[-1]:
                count += 1
    
    return count",,,,,
Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.,"def func(nums, k):
    import collections
    d = collections.defaultdict(int)
    for row in nums:
        for i in row:
            d[i] += 1
    temp = []
    import heapq
    for key, v in d.items():
        if len(temp) < k:
            temp.append((v, key))
            if len(temp) == k:
                heapq.heapify(temp)
        else:
            if v > temp[0][0]:
                heapq.heappop(temp)
                heapq.heappush(temp, (v, key))
    result = []
    while temp:
        v, key = heapq.heappop(temp)
        result.append(key)
    return result",31,Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.,"['assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]', 'assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]', 'assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]']",[],,,,,,
Write a python function to find the largest prime factor of a given number.,"import math 
def max_Prime_Factors (n): 
    maxPrime = -1 
    while n%2 == 0: 
        maxPrime = 2
        n >>= 1    
    for i in range(3,int(math.sqrt(n))+1,2): 
        while n % i == 0: 
            maxPrime = i 
            n = n / i 
    if n > 2: 
        maxPrime = n  
    return int(maxPrime)",32,Write a python function to find the largest prime factor of a given number.,"['assert max_Prime_Factors(15) == 5', 'assert max_Prime_Factors(6) == 3', 'assert max_Prime_Factors(2) == 2']",[],,,,,,
Write a python function to convert a decimal number to binary number.,"def decimal_To_Binary(N): 
    B_Number = 0
    cnt = 0
    while (N != 0): 
        rem = N % 2
        c = pow(10,cnt)  
        B_Number += rem*c  
        N //= 2 
        cnt += 1
    return B_Number  ",33,Write a python function to convert a decimal number to binary number.,"['assert decimal_To_Binary(10) == 1010', 'assert decimal_To_Binary(1) == 1', 'assert decimal_To_Binary(20) == 10100']",[],"def decimal_to_binary(decimal_num):
    if decimal_num == 0:
        return '0'
    
    binary_num = ''
    while decimal_num > 0:
        binary_num = str(decimal_num % 2) + binary_num
        decimal_num //= 2
    
    return binary_num",,,,,
Write a python function to find the missing number in a sorted array.,"def find_missing(ar,N): 
    l = 0
    r = N - 1
    while (l <= r):  
        mid = (l + r) / 2
        mid= int (mid) 
        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): 
            return (mid + 1)  
        elif (ar[mid] != mid + 1): 
            r = mid - 1 
        else: 
            l = mid + 1
    return (-1) ",34,Write a python function to find the missing number in a sorted array.,"['assert find_missing([1,2,3,5],4) == 4', 'assert find_missing([1,3,4,5],4) == 2', 'assert find_missing([1,2,3,5,6,7],5) == 4']",[],,,,,,
Write a function to find the n-th rectangular number.,"def find_rect_num(n):
  return n*(n + 1) ",35,Write a function to find the n-th rectangular number.,"['assert find_rect_num(4) == 20', 'assert find_rect_num(5) == 30', 'assert find_rect_num(6) == 42']",[],"def find_rectangular_number(n):
    return n * (n + 1) // 2",,,,,
Write a python function to find the nth digit in the proper fraction of two given numbers.,"def find_Nth_Digit(p,q,N) :  
    while (N > 0) : 
        N -= 1;  
        p *= 10;  
        res = p // q;  
        p %= q;  
    return res;  ",36,Write a python function to find the nth digit in the proper fraction of two given numbers.,"['assert find_Nth_Digit(1,2,1) == 5', 'assert find_Nth_Digit(3,5,1) == 6', 'assert find_Nth_Digit(5,6,5) == 3']",[],,,,,,
Write a function to sort a given mixed list of integers and strings.,"def sort_mixed_list(mixed_list):
    int_part = sorted([i for i in mixed_list if type(i) is int])
    str_part = sorted([i for i in mixed_list if type(i) is str])
    return int_part + str_part",37,Write a function to sort a given mixed list of integers and strings.,"[""assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"", ""assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"", ""assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']""]",[],"def sort_mixed_list(mixed_list):
    # Create a copy of the mixed list to avoid modifying the original
    sorted_list = list(mixed_list)
    
    # Define a custom sorting key function
    def sorting_key(item):
        if isinstance(item, int):
            return (0, item)  # Integers have a key with a first element of 0
        else:
            return (1,) + tuple(item)  # Strings have a key with a first element of 1 and the rest of the string as a tuple
    
    # Sort the list using the custom sorting key
    sorted_list.sort(key=sorting_key)
    
    return sorted_list",,,,,
Write a function to find the division of first even and odd number of a given list.,"def div_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even/first_odd)",38,Write a function to find the division of first even and odd number of a given list.,"['assert div_even_odd([1,3,5,7,4,1,6,8])==4', 'assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2', 'assert div_even_odd([1,5,7,9,10])==10']",[],"def divide_first_even_odd(numbers):
    # Find the first even and odd numbers in the list
    for num in numbers:
        if num % 2 == 0:  # Check if the number is even
            even_num = num
            break
    else:
        return None  # Return None if no even number is found

    for num in numbers:
        if num % 2 != 0:  # Check if the number is odd
            odd_num = num
            break
    else:
        return None  # Return None if no odd number is found

    # Return the division of the first even and odd number
    return even_num / odd_num",,,,,
Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.,"import heapq
from collections import Counter
def rearange_string(S):
    ctr = Counter(S)
    heap = [(-value, key) for key, value in ctr.items()]
    heapq.heapify(heap)
    if (-heap[0][0]) * 2 > len(S) + 1: 
        return """"
    ans = []
    while len(heap) >= 2:
        nct1, char1 = heapq.heappop(heap)
        nct2, char2 = heapq.heappop(heap)
        ans.extend([char1, char2])
        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))
        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))
    return """".join(ans) + (heap[0][1] if heap else """")",39,Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.,"['assert rearange_string(""aab"")==(\'aba\')', 'assert rearange_string(""aabb"")==(\'abab\')', 'assert rearange_string(""abccdd"")==(\'cdabcd\')']",[],"def can_rearrange(string):
    char_count = {}
    for char in string:
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1

    for count in char_count.values():
        if count >= 2:
            return False

    return True",,,,,
Write a function to find frequency of the elements in a given list of lists using collections module.,"from collections import Counter
from itertools import chain
def freq_element(nums):
  result = Counter(chain.from_iterable(nums))
  return result",40,Write a function to find frequency of the elements in a given list of lists using collections module.,"['assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})', 'assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})', 'assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})']",[],"from collections import Counter

def find_frequency(lst_of_lists):
    flat_list = [item for sublist in lst_of_lists for item in sublist]
    frequency = Counter(flat_list)
    return frequency",,,,,
Write a function to filter even numbers using lambda function.,"def filter_evennumbers(nums):
 even_nums = list(filter(lambda x: x%2 == 0, nums))
 return even_nums",41,Write a function to filter even numbers using lambda function.,"['assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]', 'assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]', 'assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]']",[],"def filter_even_numbers(numbers):
    return list(filter(lambda x: x % 2 == 0, numbers))",,,,,
Write a python function to find the sum of repeated elements in a given array.,"def find_Sum(arr,n): 
    return sum([x for x in arr if arr.count(x) > 1])",42,Write a python function to find the sum of repeated elements in a given array.,"['assert find_Sum([1,2,3,1,1,4,5,6],8) == 3', 'assert find_Sum([1,2,3,1,1],5) == 3', 'assert find_Sum([1,1,2],3) == 2']","['assert find_Sum([1,1,2,3,4,5,6,3,5],9) == 18']",,,,,,
Write a function to find sequences of lowercase letters joined with an underscore using regex.,"import re
def text_match(text):
  patterns = '^[a-z]+_[a-z]+$'
  if re.search(patterns,  text):
    return ('Found a match!')
  else:
    return ('Not matched!')",43,Write a function to find sequences of lowercase letters joined with an underscore using regex.,"['assert text_match(""aab_cbbbc"") == \'Found a match!\'', 'assert text_match(""aab_Abbbc"") == \'Not matched!\'', 'assert text_match(""Aaab_abbbc"") == \'Not matched!\'']","['assert text_match(""aab-cbbbc"") == \'Not matched!\'']","import re

def find_lowercase_sequences(text):
    pattern = r'\b[a-z]+(_[a-z]+)*\b'
    sequences = re.findall(pattern, text)
    return sequences",,,,,
Write a function that matches a word at the beginning of a string.,"import re
def text_match_string(text):
        patterns = '^\w+'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return 'Not matched!'",44,Write a function that matches a word at the beginning of a string.,"['assert text_match_string("" python"")==(\'Not matched!\')', 'assert text_match_string(""python"")==(\'Found a match!\')', 'assert text_match_string(""  lang"")==(\'Not matched!\')']","['assert text_match_string(""foo"")==(\'Found a match!\')']",,,,,,
Write a function to find the gcd of the given array elements.,"def find_gcd(x, y): 
	while(y): 
		x, y = y, x % y 
	return x 
def get_gcd(l):
  num1 = l[0]
  num2 = l[1]
  gcd = find_gcd(num1, num2)
  for i in range(2, len(l)):
    gcd = find_gcd(gcd, l[i])
  return gcd",45,Write a function to find the gcd of the given array elements.,"['assert get_gcd([2, 4, 6, 8, 16]) == 2', 'assert get_gcd([1, 2, 3]) == 1', 'assert get_gcd([2, 4, 6, 8]) == 2 ']",[],,,,,,
Write a python function to determine whether all the numbers are different from each other are not.,"def test_distinct(data):
  if len(data) == len(set(data)):
    return True
  else:
    return False;",46,Write a python function to determine whether all the numbers are different from each other are not.,"['assert test_distinct([1,5,7,9]) == True', 'assert test_distinct([2,4,5,5,7,9]) == False', 'assert test_distinct([1,2,3]) == True']",[],,,,,,
Write a python function to find the last digit when factorial of a divides factorial of b.,"def compute_Last_Digit(A,B): 
    variable = 1
    if (A == B): 
        return 1
    elif ((B - A) >= 5):  
        return 0
    else:   
        for i in range(A + 1,B + 1): 
            variable = (variable * (i % 10)) % 10
        return variable % 10",47,Write a python function to find the last digit when factorial of a divides factorial of b.,"['assert compute_Last_Digit(2,4) == 2', 'assert compute_Last_Digit(6,8) == 6', 'assert compute_Last_Digit(1,2) == 2']","['assert compute_Last_Digit(3,7) == 0', 'assert compute_Last_Digit(20,23) == 6', 'assert compute_Last_Digit(1021,1024) == 4']","def last_digit_when_divided(a, b):
    # Since we're only interested in the last digit, we can reduce the problem to considering
    # only the factors 2, 4, 6, 8 in the factorials of a and b.
    # We'll keep track of the number of times each factor appears in the factorials.
    factors_a = [0] * 4  # [2, 4, 6, 8]
    factors_b = [0] * 4  # [2, 4, 6, 8]

    # Count the factors in the factorial of a
    for i in range(2, a + 1):
        if i % 2 == 0:  # Only consider even factors
            factor_index = (i // 2) % 4
            factors_a[factor_index] += 1

    # Count the factors in the factorial of b
    for i in range(2, b + 1):
        if i % 2 == 0:  # Only consider even factors
            factor_index = (i // 2) % 4
            factors_b[factor_index] += 1

    # Now, we need to ""divide"" the factors of b by the factors of a
    # Since we're only interested in the last digit, we can simulate this division by subtracting
    # the factors of a from the factors of b (modulo 4, since we have a cycle of [2, 4, 6, 8])
    for i in range(4):
        factors_b[i] -= factors_a[i]
        factors_b[i] %= 4  # Wrap around if necessary

    # Finally, we multiply the remaining factors of b together to get the last digit
    last_digit = 1
    for factor_count in factors_b:
        if factor_count > 0:
            last_digit *= (2 * factor_count) % 10  # Multiply by the corresponding factor (2, 4, 6, or 8)
            last_digit %= 10  # Keep only the last digit

    return last_digit",,,,,
Write a python function to set all odd bits of a given number.,"def odd_bit_set_number(n):
    count = 0;res = 0;temp = n
    while temp > 0:
        if count % 2 == 0:
            res |= (1 << count)
        count += 1
        temp >>= 1
    return (n | res)",48,Write a python function to set all odd bits of a given number.,"['assert odd_bit_set_number(10) == 15', 'assert odd_bit_set_number(20) == 21', 'assert odd_bit_set_number(30) == 31']",[],"def set_odd_bits(number):
    mask = 0xAA  # Binary: 10101010, used to set odd bits
    return number | mask",,,,,
Write a function to extract every first or specified element from a given two-dimensional list.,"def specified_element(nums, N):
    result = [i[N] for i in nums]
    return result
    ",49,Write a function to extract every first or specified element from a given two-dimensional list.,"['assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]', 'assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]', 'assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]']",[],"def extract_element(two_d_list, index):
    """"""
    Extracts the element at the specified index from each sublist in the two-dimensional list.
    
    :param two_d_list: The two-dimensional list.
    :param index: The index of the element to extract.
    :return: A new list containing the extracted elements.
    """"""
    extracted_elements = []
    for sublist in two_d_list:
        if len(sublist) > index:
            extracted_elements.append(sublist[index])
        else:
            # You can choose to handle this case as needed, such as appending None or raising an error
            extracted_elements.append(None)
    return extracted_elements",,,,,
Write a function to find the list with minimum length using lambda function.,"def min_length_list(input_list):
    min_length = min(len(x) for x in input_list )  
    min_list = min(input_list, key = lambda i: len(i))
    return(min_length, min_list)",50,Write a function to find the list with minimum length using lambda function.,"['assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])', 'assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])', 'assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])']",[],"def find_min_length_list(lst_of_lists):
    return min(lst_of_lists, key=lambda x: len(x))",,,,,
Write a function to print check if the triangle is equilateral or not.,"def check_equilateral(x,y,z):
  if x == y == z:
	   return True
  else:
     return False",51,Write a function to print check if the triangle is equilateral or not.,"['assert check_equilateral(6,8,12)==False ', 'assert check_equilateral(6,6,12)==False', 'assert check_equilateral(6,6,6)==True']",[],,,,,,
Write a function to caluclate area of a parallelogram.,"def parallelogram_area(b,h):
  area=b*h
  return area",52,Write a function to caluclate area of a parallelogram.,"['assert parallelogram_area(10,20)==200', 'assert parallelogram_area(15,20)==300', 'assert parallelogram_area(8,9)==72']",[],"def parallelogram_area(base, height):
    return base * height",,,,,
Write a python function to check whether the first and last characters of a given string are equal or not.,"def check_Equality(str):
  if (str[0] == str[-1]):  
    return (""Equal"") 
  else:  
    return (""Not Equal"") ",53,Write a python function to check whether the first and last characters of a given string are equal or not.,"['assert check_Equality(""abcda"") == ""Equal""', 'assert check_Equality(""ab"") == ""Not Equal""', 'assert check_Equality(""mad"") == ""Not Equal""']",[],"def check_first_and_last_chars(string):
    if len(string) < 2:
        return False
    return string[0] == string[-1]",,,,,
Write a function to sort the given array by using counting sort.,"def counting_sort(my_list):
    max_value = 0
    for i in range(len(my_list)):
        if my_list[i] > max_value:
            max_value = my_list[i]
    buckets = [0] * (max_value + 1)
    for i in my_list:
        buckets[i] += 1
    i = 0
    for j in range(max_value + 1):
         for a in range(buckets[j]):
             my_list[i] = j
             i += 1
    return my_list",54,Write a function to sort the given array by using counting sort.,"['assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]', 'assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]', 'assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]']",[],,,,,,
Write a function to find t-nth term of geometric series.,"import math
def tn_gp(a,n,r):
  tn = a * (math.pow(r, n - 1))
  return tn",55,Write a function to find t-nth term of geometric series.,"['assert tn_gp(1,5,2)==16', 'assert tn_gp(1,5,4)==256', 'assert tn_gp(2,6,3)==486']",[],,,,,,
Write a python function to check if a given number is one less than twice its reverse.,"def rev(num):    
    rev_num = 0
    while (num > 0):  
        rev_num = (rev_num * 10 + num % 10) 
        num = num // 10  
    return rev_num  
def check(n):    
    return (2 * rev(n) == n + 1)  ",56,Write a python function to check if a given number is one less than twice its reverse.,"['assert check(70) == False', 'assert check(23) == False', 'assert check(73) == True']",[],"def is_one_less_than_twice_reverse(n):
    # Convert the number to a string
    num_str = str(n)
    
    # Reverse the string
    reversed_str = num_str[::-1]
    
    # Convert the reversed string back to a number
    reversed_num = int(reversed_str)
    
    # Check if the number is one less than twice its reverse
    return n == 2 * reversed_num - 1",,,,,
Write a python function to find the largest number that can be formed with the given digits.,"def find_Max_Num(arr,n) : 
    arr.sort(reverse = True) 
    num = arr[0] 
    for i in range(1,n) : 
        num = num * 10 + arr[i] 
    return num ",57,Write a python function to find the largest number that can be formed with the given digits.,"['assert find_Max_Num([1,2,3],3) == 321', 'assert find_Max_Num([4,5,6,1],4) == 6541', 'assert find_Max_Num([1,2,3,9],4) == 9321']",[],,,,,,
Write a python function to check whether the given two integers have opposite sign or not.,"def opposite_Signs(x,y): 
    return ((x ^ y) < 0); ",58,Write a python function to check whether the given two integers have opposite sign or not.,"['assert opposite_Signs(1,-2) == True', 'assert opposite_Signs(3,2) == False', 'assert opposite_Signs(-10,-10) == False']",[],"def have_opposite_signs(a, b):
    return (a >= 0 and b < 0) or (a < 0 and b >= 0)",,,,,
Write a function to find the nth octagonal number.,"def is_octagonal(n): 
	return 3 * n * n - 2 * n ",59,Write a function to find the nth octagonal number.,"['assert is_octagonal(5) == 65', 'assert is_octagonal(10) == 280', 'assert is_octagonal(15) == 645']",[],"def nth_octagonal_number(n):
    return n * (3 * n - 2) // 2",,,,,
Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.,"def max_len_sub( arr, n): 
	mls=[] 
	max = 0
	for i in range(n): 
		mls.append(1) 
	for i in range(n): 
		for j in range(i): 
			if (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): 
				mls[i] = mls[j] + 1
	for i in range(n): 
		if (max < mls[i]): 
			max = mls[i] 
	return max",60,Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.,"['assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5', 'assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4', 'assert max_len_sub([9, 11, 13, 15, 18], 5) == 1']",[],"def max_length_subsequence(arr):
    n = len(arr)
    if n <= 1:
        return n

    # Initialize an array to store the lengths of the longest subsequences ending at each index
    lengths = [1] * n

    # Initialize a variable to store the maximum length found so far
    max_length = 1

    # Iterate over the array starting from the second element
    for i in range(1, n):
        # Iterate over the previous elements to find the longest subsequence ending at the current element
        for j in range(i):
            if abs(arr[i] - arr[j]) <= 1:
                lengths[i] = max(lengths[i], lengths[j] + 1)

        # Update the maximum length if necessary
        max_length = max(max_length, lengths[i])

    return max_length",,,,,
Write a python function to count number of substrings with the sum of digits equal to their length.,"from collections import defaultdict
def count_Substrings(s,n):
    count,sum = 0,0
    mp = defaultdict(lambda : 0)
    mp[0] += 1
    for i in range(n):
        sum += ord(s[i]) - ord('0')
        count += mp[sum - (i + 1)]
        mp[sum - (i + 1)] += 1
    return count",61,Write a python function to count number of substrings with the sum of digits equal to their length.,"[""assert count_Substrings('112112',6) == 6"", ""assert count_Substrings('111',3) == 6"", ""assert count_Substrings('1101112',7) == 12""]",[],"def count_substrings_with_sum(s):
    count = 0
    n = len(s)
    
    for i in range(n):
        for j in range(i + 1, n + 1):
            substring = s[i:j]
            digit_sum = sum(int(digit) for digit in substring if digit.isdigit())
            if digit_sum == len(substring):
                count += 1
    
    return count",,,,,
Write a python function to find smallest number in a list.,"def smallest_num(xs):
  return min(xs)
",62,Write a python function to find smallest number in a list.,"['assert smallest_num([10, 20, 1, 45, 99]) == 1', 'assert smallest_num([1, 2, 3]) == 1', 'assert smallest_num([45, 46, 50, 60]) == 45']",[],"def find_smallest_number(numbers):
    if not numbers:
        return None  # Return None if the list is empty
    
    smallest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
    
    return smallest",,,,,
Write a function to find the maximum difference between available pairs in the given tuple list.,"def max_difference(test_list):
  temp = [abs(b - a) for a, b in test_list]
  res = max(temp)
  return (res) ",63,Write a function to find the maximum difference between available pairs in the given tuple list.,"['assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7', 'assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15', 'assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23']",[],"def max_difference(tuples):
    max_diff = 0
    
    for i in range(len(tuples)):
        for j in range(i + 1, len(tuples)):
            pair_diff = abs(tuples[i][0] - tuples[j][0])
            max_diff = max(max_diff, pair_diff)
    
    return max_diff",,,,,
Write a function to sort a list of tuples using lambda.,"def subject_marks(subjectmarks):
#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])
 subjectmarks.sort(key = lambda x: x[1])
 return subjectmarks",64,Write a function to sort a list of tuples using lambda.,"[""assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]"", ""assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])"", ""assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])""]",[],"def sort_tuples(tuples_list):
    return sorted(tuples_list, key=lambda x: x[1])",,,,,
Write a function of recursion list sum.,"def recursive_list_sum(data_list):
	total = 0
	for element in data_list:
		if type(element) == type([]):
			total = total + recursive_list_sum(element)
		else:
			total = total + element
	return total",65,Write a function of recursion list sum.,"['assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21', 'assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106', 'assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210']",[],"def recursive_list_sum(lst):
    total = 0
    for item in lst:
        if isinstance(item, int):
            total += item
        elif isinstance(item, list):
            total += recursive_list_sum(item)
    return total",,,,,
Write a python function to count positive numbers in a list.,"def pos_count(list):
  pos_count= 0
  for num in list: 
    if num >= 0: 
      pos_count += 1
  return pos_count ",66,Write a python function to count positive numbers in a list.,"['assert pos_count([1,-2,3,-4]) == 2', 'assert pos_count([3,4,5,-1]) == 3', 'assert pos_count([1,2,3,4]) == 4']",[],,,,,,
Write a function to find the number of ways to partition a set of bell numbers.,"def bell_number(n):   
    bell = [[0 for i in range(n+1)] for j in range(n+1)] 
    bell[0][0] = 1
    for i in range(1, n+1): 
        bell[i][0] = bell[i-1][i-1]  
        for j in range(1, i+1): 
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   
    return bell[n][0] ",67,Write a function to find the number of ways to partition a set of bell numbers.,"['assert bell_number(2)==2', 'assert bell_number(10)==115975', 'assert bell_number(56)==6775685320645824322581483068371419745979053216268760300']",[],"def bell_number_partitions(n):
    bell_numbers = [1]
    partitions = [1]
    
    for i in range(1, n + 1):
        bell_numbers.append(sum(bell_numbers[-i:]))
        partitions.append(0)
        
        for j in range(i):
            partitions[-1] += bell_number_partitions(j) * bell_numbers[i - j - 1]
    
    return partitions[n]",,,,,
Write a python function to check whether the given array is monotonic or not.,"def is_Monotonic(A): 
    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or
            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ",68,Write a python function to check whether the given array is monotonic or not.,"['assert is_Monotonic([6, 5, 4, 4]) == True', 'assert is_Monotonic([1, 2, 2, 3]) == True', 'assert is_Monotonic([1, 3, 2]) == False']",[],,,,,,
Write a function to check whether a list contains the given sublist or not.,"def is_sublist(l, s):
	sub_set = False
	if s == []:
		sub_set = True
	elif s == l:
		sub_set = True
	elif len(s) > len(l):
		sub_set = False
	else:
		for i in range(len(l)):
			if l[i] == s[0]:
				n = 1
				while (n < len(s)) and (l[i+n] == s[n]):
					n += 1				
				if n == len(s):
					sub_set = True
	return sub_set",69,Write a function to check whether a list contains the given sublist or not.,"['assert is_sublist([2,4,3,5,7],[3,7])==False', 'assert is_sublist([2,4,3,5,7],[4,3])==True', 'assert is_sublist([2,4,3,5,7],[1,6])==False']",[],"def contains_sublist(main_list, sub_list):
    if not main_list or not sub_list:
        return False
    
    main_iter = iter(main_list)
    sub_iter = iter(sub_list)
    sub_elem = next(sub_iter, None)
    
    while sub_elem is not None:
        main_elem = next(main_iter, None)
        
        if main_elem == sub_elem:
            sub_elem = next(sub_iter, None)
        else:
            main_iter = iter(main_list)  # Reset the main_iter to start of the list
            sub_elem = next(sub_iter, None)  # Move to the next element in the sub_list
    
    return sub_elem is None",,,,,
Write a function to find whether all the given tuples have equal length or not.,"def find_equal_tuple(Input, k):
  flag = 1
  for tuple in Input:
    if len(tuple) != k:
      flag = 0
      break
  return flag
def get_equal(Input, k):
  if find_equal_tuple(Input, k) == 1:
    return (""All tuples have same length"")
  else:
    return (""All tuples do not have same length"")",70,Write a function to find whether all the given tuples have equal length or not.,"[""assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'"", ""assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'"", ""assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'""]",[],,,,,,
Write a function to sort a list of elements using comb sort.,"def comb_sort(nums):
    shrink_fact = 1.3
    gaps = len(nums)
    swapped = True
    i = 0
    while gaps > 1 or swapped:
        gaps = int(float(gaps) / shrink_fact)
        swapped = False
        i = 0
        while gaps + i < len(nums):
            if nums[i] > nums[i+gaps]:
                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]
                swapped = True
            i += 1
    return nums",71,Write a function to sort a list of elements using comb sort.,"['assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]', 'assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]', 'assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]']",[],"def comb_sort(arr):
    n = len(arr)
    gap = n
    shrink_factor = 1.3
    swapped = True

    while gap > 1 or swapped:
        gap = int(gap / shrink_factor)
        if gap == 9 or gap == 10:
            gap = 11

        swapped = False

        for i in range(n - gap):
            if arr[i] > arr[i + gap]:
                arr[i], arr[i + gap] = arr[i + gap], arr[i]
                swapped = True

    return arr",,,,,
Write a python function to check whether the given number can be represented as difference of two squares or not.,"def dif_Square(n): 
    if (n % 4 != 2): 
        return True
    return False",72,Write a python function to check whether the given number can be represented as difference of two squares or not.,"['assert dif_Square(5) == True', 'assert dif_Square(10) == False', 'assert dif_Square(15) == True']",[],"def is_difference_of_squares(n):
    # Check if the number is non-negative
    if n < 0:
        return False
    
    # Check if the number is a perfect square
    sqrt_n = int(n ** 0.5)
    if sqrt_n * sqrt_n == n:
        return True
    
    # Check if the number can be represented as the difference of two squares
    for i in range(sqrt_n, 0, -1):
        # Calculate the potential square roots
        a = sqrt_n + i
        b = sqrt_n - i
        
        # Check if the difference is equal to the given number
        if a * a - b * b == n:
            return True
    
    # If no solution is found, return False
    return False",,,,,
Write a function to split the given string with multiple delimiters by using regex.,"import re
def multiple_split(text):
  return (re.split('; |, |\*|\n',text))",73,Write a function to split the given string with multiple delimiters by using regex.,"[""assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']"", ""assert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']"", ""assert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']""]",[],"import re

def split_string_with_regex(string):
    # Define the regular expression pattern to match multiple delimiters
    pattern = r'[,\s""\'\[\]()=]+'
    
    # Split the string using the pattern
    result = re.split(pattern, string)
    
    # Remove empty strings from the result
    result = [s for s in result if s]
    
    return result",,,,,
Write a function to check whether it follows the sequence given in the patterns array.,"def is_samepatterns(colors, patterns):    
    if len(colors) != len(patterns):
        return False    
    sdict = {}
    pset = set()
    sset = set()    
    for i in range(len(patterns)):
        pset.add(patterns[i])
        sset.add(colors[i])
        if patterns[i] not in sdict.keys():
            sdict[patterns[i]] = []

        keys = sdict[patterns[i]]
        keys.append(colors[i])
        sdict[patterns[i]] = keys

    if len(pset) != len(sset):
        return False   

    for values in sdict.values():

        for i in range(len(values) - 1):
            if values[i] != values[i+1]:
                return False

    return True",74,Write a function to check whether it follows the sequence given in the patterns array.,"['assert is_samepatterns([""red"",""green"",""green""], [""a"", ""b"", ""b""])==True ', 'assert is_samepatterns([""red"",""green"",""greenn""], [""a"",""b"",""b""])==False ', 'assert is_samepatterns([""red"",""green"",""greenn""], [""a"",""b""])==False ']",[],"def check_sequence(sequence, patterns):
    pattern_index = 0
    sequence_index = 0
    while sequence_index < len(sequence):
        current_pattern = patterns[pattern_index]
        if isinstance(current_pattern, list):
            # Check for nested patterns
            if current_pattern[0] == sequence[sequence_index]:
                nested_sequence = sequence[sequence_index + 1:sequence_index + len(current_pattern)]
                nested_patterns = current_pattern[1:-1]
                if check_sequence(nested_sequence, nested_patterns):
                    sequence_index += len(current_pattern)
                    continue
            else:
                return False
        elif current_pattern == sequence[sequence_index]:
            sequence_index += 1
            pattern_index += 1
            if pattern_index == len(patterns):
                return True
        else:
            return False
    return False",,,,,
Write a function to find tuples which have all elements divisible by k from the given list of tuples.,"def find_tuples(test_list, K):
  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]
  return (str(res)) ",75,Write a function to find tuples which have all elements divisible by k from the given list of tuples.,"[""assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'"", ""assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'"", ""assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'""]",[],"def find_divisible_tuples(tuples_list, k):
    divisible_tuples = []
    for tuple_item in tuples_list:
        if all(element % k == 0 for element in tuple_item):
            divisible_tuples.append(tuple_item)
    return divisible_tuples",,,,,
Write a python function to count the number of squares in a rectangle.,"def count_Squares(m,n):
    if(n < m):
        temp = m
        m = n
        n = temp
    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))",76,Write a python function to count the number of squares in a rectangle.,"['assert count_Squares(4,3) == 20', 'assert count_Squares(2,2) == 5', 'assert count_Squares(1,1) == 1']",[],"def count_squares_in_rectangle(width, height):
    # The number of squares in a rectangle is the product of its width and height
    return width * height",,,,,
Write a python function to find the difference between sum of even and odd digits.,"def is_Diff(n): 
    return (n % 11 == 0) ",77,Write a python function to find the difference between sum of even and odd digits.,"['assert is_Diff (12345) == False', 'assert is_Diff(1212112) == True', 'assert is_Diff(1212) == False']",[],,,,,,
Write a python function to find number of integers with odd number of set bits.,"def count_With_Odd_SetBits(n): 
    if (n % 2 != 0): 
        return (n + 1) / 2
    count = bin(n).count('1') 
    ans = n / 2
    if (count % 2 != 0): 
        ans += 1
    return ans ",78,Write a python function to find number of integers with odd number of set bits.,"['assert count_With_Odd_SetBits(5) == 3', 'assert count_With_Odd_SetBits(10) == 5', 'assert count_With_Odd_SetBits(15) == 8']",[],"def count_odd_set_bits(n):
    count = 0
    for i in range(n + 1):
        if bin(i).count('1') % 2 != 0:
            count += 1
    return count",,,,,
Write a python function to check whether the length of the word is odd or not.,"def word_len(s): 
    s = s.split(' ')   
    for word in s:    
        if len(word)%2!=0: 
            return True  
        else:
          return False",79,Write a python function to check whether the length of the word is odd or not.,"['assert word_len(""Hadoop"") == False', 'assert word_len(""great"") == True', 'assert word_len(""structure"") == True']",[],,,,,,
Write a function to find the nth tetrahedral number.,"def tetrahedral_number(n): 
	return (n * (n + 1) * (n + 2)) / 6",80,Write a function to find the nth tetrahedral number.,"['assert tetrahedral_number(5) == 35.0', 'assert tetrahedral_number(6) == 56.0', 'assert tetrahedral_number(7) == 84.0']",[],"def tetrahedral_number(n):
    return n * (n + 1) * (n + 2) // 6",,,,,
Write a function to zip the two given tuples.,"def zip_tuples(test_tup1, test_tup2):
  res = []
  for i, j in enumerate(test_tup1):
    res.append((j, test_tup2[i % len(test_tup2)])) 
  return (res) ",81,Write a function to zip the two given tuples.,"['assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]', 'assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]', 'assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]']",[],"def zip_tuples(tup1, tup2):
    zipped = []
    for i in range(min(len(tup1), len(tup2))):
        zipped.append((tup1[i], tup2[i]))
    return zipped",,,,,
Write a function to find the volume of a sphere.,"import math
def volume_sphere(r):
  volume=(4/3)*math.pi*r*r*r
  return volume",82,Write a function to find the volume of a sphere.,"['assert volume_sphere(10)==4188.790204786391', 'assert volume_sphere(25)==65449.84694978735', 'assert volume_sphere(20)==33510.32163829113']",[],"import math

def volume_of_sphere(radius):
    return (4/3) * math.pi * (radius ** 3)",,,,,
Write a python function to find the character made by adding all the characters of the given string.,"def get_Char(strr):  
    summ = 0
    for i in range(len(strr)): 
        summ += (ord(strr[i]) - ord('a') + 1)  
    if (summ % 26 == 0): 
        return ord('z') 
    else: 
        summ = summ % 26
        return chr(ord('a') + summ - 1)",83,Write a python function to find the character made by adding all the characters of the given string.,"['assert get_Char(""abc"") == ""f""', 'assert get_Char(""gfg"") == ""t""', 'assert get_Char(""ab"") == ""c""']",[],"def add_characters(string):
    total_sum = 0
    for char in string:
        total_sum += ord(char)
    result_char = chr(total_sum % 256)
    return result_char",,,,,
Write a function to find the n-th number in newman conway sequence.,"def sequence(n): 
	if n == 1 or n == 2: 
		return 1
	else: 
		return sequence(sequence(n-1)) + sequence(n-sequence(n-1))",84,Write a function to find the n-th number in newman conway sequence.,"['assert sequence(10) == 6', 'assert sequence(2) == 1', 'assert sequence(3) == 2']",[],"def newman_conway(n):
    if n <= 0:
        return None  # Invalid input, return None or raise an exception
    
    sequence = [1, 1, 1]  # Initialize the sequence with the first three terms
    
    if n <= 3:
        return sequence[n - 1]  # If n is 1, 2, or 3, return the corresponding term
    
    prev_prev = sequence[-2]  # The term before the previous term
    prev = sequence[-1]  # The previous term
    
    for i in range(3, n):
        if prev == 1:
            next_term = prev_prev
        else:
            next_term = prev_prev + prev
        
        sequence.append(next_term)
        prev_prev, prev = prev, next_term
    
    return sequence[-1]  # Return the n-th term",,,,,
Write a function to find the surface area of a sphere.,"import math
def surfacearea_sphere(r):
  surfacearea=4*math.pi*r*r
  return surfacearea",85,Write a function to find the surface area of a sphere.,"['assert surfacearea_sphere(10)==1256.6370614359173', 'assert surfacearea_sphere(15)==2827.4333882308138', 'assert surfacearea_sphere(20)==5026.548245743669']",[],"import math

def surface_area_of_sphere(radius):
    return 4 * math.pi * radius ** 2",,,,,
Write a function to find nth centered hexagonal number.,"def centered_hexagonal_number(n):
  return 3 * n * (n - 1) + 1",86,Write a function to find nth centered hexagonal number.,"['assert centered_hexagonal_number(10) == 271', 'assert centered_hexagonal_number(2) == 7', 'assert centered_hexagonal_number(9) == 217']",[],"def centered_hexagonal_number(n):
    return n * (2 * n - 1)",,,,,
Write a function to merge three dictionaries into a single expression.,"import collections as ct
def merge_dictionaries_three(dict1,dict2, dict3):
    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))
    return merged_dict",87,Write a function to merge three dictionaries into a single expression.,"['assert merge_dictionaries_three({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }, { ""G"": ""Green"", ""W"": ""White"" },{ ""O"": ""Orange"", ""W"": ""White"", ""B"": ""Black"" })=={\'B\': \'Black\', \'R\': \'Red\', \'P\': \'Pink\', \'G\': \'Green\', \'W\': \'White\', \'O\': \'Orange\'}', 'assert merge_dictionaries_three({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }, { ""G"": ""Green"", ""W"": ""White"" },{""L"":""lavender"",""B"":""Blue""})=={\'W\': \'White\', \'P\': \'Pink\', \'B\': \'Black\', \'R\': \'Red\', \'G\': \'Green\', \'L\': \'lavender\'}', 'assert merge_dictionaries_three({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" },{""L"":""lavender"",""B"":""Blue""},{ ""G"": ""Green"", ""W"": ""White"" })=={\'B\': \'Black\', \'P\': \'Pink\', \'R\': \'Red\', \'G\': \'Green\', \'L\': \'lavender\', \'W\': \'White\'}']",[],,,,,,
Write a function to get the frequency of the elements in a list.,"import collections
def freq_count(list1):
  freq_count= collections.Counter(list1)
  return freq_count",88,Write a function to get the frequency of the elements in a list.,"['assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) ', 'assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) ', 'assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) ']",[],"def get_element_frequency(lst):
    frequency = {}
    for element in lst:
        if element in frequency:
            frequency[element] += 1
        else:
            frequency[element] = 1
    return frequency",,,,,
Write a function to find the closest smaller number than n.,"def closest_num(N):
  return (N - 1)",89,Write a function to find the closest smaller number than n.,"['assert closest_num(11) == 10', 'assert closest_num(7) == 6', 'assert closest_num(12) == 11']",[],"def closest_smaller_number(n):
    if n <= 1:
        return None  # No smaller number exists for n <= 1
    
    closest_smaller = None
    for i in range(n - 1, 0, -1):
        if str(i).isalpha():
            continue  # Skip if the number is represented as a letter (e.g., 'a' for 10)
        closest_smaller = i
        break
    
    return closest_smaller",,,,,
Write a python function to find the length of the longest word.,"def len_log(list1):
    max=len(list1[0])
    for i in list1:
        if len(i)>max:
            max=len(i)
    return max",90,Write a python function to find the length of the longest word.,"['assert len_log([""python"",""PHP"",""bigdata""]) == 7', 'assert len_log([""a"",""ab"",""abc""]) == 3', 'assert len_log([""small"",""big"",""tall""]) == 5']",[],"def find_longest_word_length(chars):
    # Convert the list of characters to a string
    words = ''.join(chars).split()
    
    # Find the length of the longest word
    longest_length = 0
    for word in words:
        if len(word) > longest_length:
            longest_length = len(word)
    
    return longest_length",,,,,
Write a function to check if a substring is present in a given list of string values.,"def find_substring(str1, sub_str):
   if any(sub_str in s for s in str1):
       return True
   return False",91,Write a function to check if a substring is present in a given list of string values.,"['assert find_substring([""red"", ""black"", ""white"", ""green"", ""orange""],""ack"")==True', 'assert find_substring([""red"", ""black"", ""white"", ""green"", ""orange""],""abc"")==False', 'assert find_substring([""red"", ""black"", ""white"", ""green"", ""orange""],""ange"")==True']",[],"def is_substring_present(substring, string_list):
    for string in string_list:
        if substring in string:
            return True
    return False",,,,,
Write a function to check whether the given number is undulating or not.,"def is_undulating(n): 
	if (len(n) <= 2): 
		return False
	for i in range(2, len(n)): 
		if (n[i - 2] != n[i]): 
			return False
	return True",92,Write a function to check whether the given number is undulating or not.,"['assert is_undulating(""1212121"") == True', 'assert is_undulating(""1991"") == False', 'assert is_undulating(""121"") == True']",[],,,,,,
Write a function to calculate the value of 'a' to the power 'b'.,"def power(a,b):
	if b==0:
		return 1
	elif a==0:
		return 0
	elif b==1:
		return a
	else:
		return a*power(a,b-1)",93,Write a function to calculate the value of 'a' to the power 'b'.,"['assert power(3,4) == 81', 'assert power(2,3) == 8', 'assert power(5,5) == 3125']",[],,,,,,
Write a function to extract the index minimum value record from the given tuples.,"from operator import itemgetter 
def index_minimum(test_list):
  res = min(test_list, key = itemgetter(1))[0]
  return (res) ",94,Write a function to extract the index minimum value record from the given tuples.,"[""assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'"", ""assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'"", ""assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'""]",[],"def find_index_of_minimum_value(tuples_list):
    # Initialize variables
    min_value = float('inf')  # Set minimum value to positive infinity
    min_index = -1  # Set minimum index to -1

    # Iterate over each tuple in the list
    for index, tuple_item in enumerate(tuples_list):
        # Extract the value from the tuple (assuming it's the second element)
        value = tuple_item[1]

        # Compare the value with the current minimum value
        if value < min_value:
            min_value = value
            min_index = index

    return min_index",,,,,
Write a python function to find the minimum length of sublist.,"def Find_Min_Length(lst):  
    minLength = min(len(x) for x in lst )
    return minLength ",95,Write a python function to find the minimum length of sublist.,"['assert Find_Min_Length([[1],[1,2]]) == 1', 'assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2', 'assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3']",[],,,,,,
Write a python function to find the number of divisors of a given integer.,"def divisor(n):
  for i in range(n):
    x = len([i for i in range(1,n+1) if not n % i])
  return x",96,Write a python function to find the number of divisors of a given integer.,"['assert divisor(15) == 4 ', 'assert divisor(12) == 6', 'assert divisor(9) == 3']",[],,,,,,
Write a function to find frequency count of list of lists.,"def frequency_lists(list1):
    list1 = [item for sublist in list1 for item in sublist]
    dic_data = {}
    for num in list1:
        if num in dic_data.keys():
            dic_data[num] += 1
        else:
            key = num
            value = 1
            dic_data[key] = value
    return dic_data
",97,Write a function to find frequency count of list of lists.,"['assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}', 'assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}', 'assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}']",[],"def count_frequency(nested_list):
    frequency = {}
    for sublist in nested_list:
        for element in sublist:
            if element in frequency:
                frequency[element] += 1
            else:
                frequency[element] = 1
    return frequency",,,,,
Write a function to multiply all the numbers in a list and divide with the length of the list.,"def multiply_num(numbers):  
    total = 1
    for x in numbers:
        total *= x  
    return total/len(numbers) ",98,Write a function to multiply all the numbers in a list and divide with the length of the list.,"['assert multiply_num((8, 2, 3, -1, 7))==-67.2', 'assert multiply_num((-10,-20,-30))==-2000.0', 'assert multiply_num((19,15,18))==1710.0']",[],"def multiply_and_divide(numbers):
    if not numbers:  # Check if the list is empty
        return 0
    
    product = 1
    for num in numbers:
        product *= num
    
    return product / len(numbers)",,,,,
Write a function to convert the given decimal number to its binary equivalent.,"def decimal_to_binary(n): 
    return bin(n).replace(""0b"","""") ",99,Write a function to convert the given decimal number to its binary equivalent.,"[""assert decimal_to_binary(8) == '1000'"", ""assert decimal_to_binary(18) == '10010'"", ""assert decimal_to_binary(7) == '111' ""]",[],"def decimal_to_binary(decimal_num):
    binary_num = """"
    while decimal_num > 0:
        binary_num = str(decimal_num % 2) + binary_num
        decimal_num = decimal_num // 2
    return binary_num",,,,,
Write a function to find the next smallest palindrome of a specified number.,"import sys
def next_smallest_palindrome(num):
    numstr = str(num)
    for i in range(num+1,sys.maxsize):
        if str(i) == str(i)[::-1]:
            return i",100,Write a function to find the next smallest palindrome of a specified number.,"['assert next_smallest_palindrome(99)==101', 'assert next_smallest_palindrome(1221)==1331', 'assert next_smallest_palindrome(120)==121']",[],"def next_smallest_palindrome(n):
    # Convert the number to a string
    num_str = str(n)
    
    # Find the length of the number
    length = len(num_str)
    
    # Find the left half of the number
    left_half = num_str[:length // 2]
    
    # Reverse the left half
    reversed_half = left_half[::-1]
    
    # Concatenate the reversed half with the original left half
    palindrome_candidate = reversed_half + num_str[length // 2:]
    
    # Check if the palindrome candidate is greater than the original number
    if palindrome_candidate > num_str:
        return int(palindrome_candidate)
    
    # If the palindrome candidate is not greater, increment the left half by 1
    incremented_half = str(int(left_half) + 1)
    
    # Pad the incremented half with leading zeros if necessary
    padding = '0' * (length // 2 - len(incremented_half))
    padded_half = padding + incremented_half
    
    # Create the next palindrome by concatenating the padded half with its reverse
    next_palindrome = padded_half + padded_half[::-1][-(length % 2):]
    
    return int(next_palindrome)",,,,,
Write a function to find the kth element in the given array.,"def kth_element(arr, n, k):
  for i in range(n):
    for j in range(0, n-i-1):
      if arr[j] > arr[j+1]:
        arr[j], arr[j+1] == arr[j+1], arr[j]
  return arr[k-1]",101,Write a function to find the kth element in the given array.,"['assert kth_element([12,3,5,7,19], 5, 2) == 3', 'assert kth_element([17,24,8,23], 4, 3) == 8', 'assert kth_element([16,21,25,36,4], 5, 4) == 36']",[],,,,,,
Write a function to convert snake case string to camel case string.,"def snake_to_camel(word):
        import re
        return ''.join(x.capitalize() or '_' for x in word.split('_'))",102,Write a function to convert snake case string to camel case string.,"[""assert snake_to_camel('python_program')=='PythonProgram'"", ""assert snake_to_camel('python_language')==('PythonLanguage')"", ""assert snake_to_camel('programming_language')==('ProgrammingLanguage')""]",[],,,,,,
"Write a function to find eulerian number a(n, m).","def eulerian_num(n, m): 
	if (m >= n or n == 0): 
		return 0 
	if (m == 0): 
		return 1 
	return ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))",103,"Write a function to find eulerian number a(n, m).","['assert eulerian_num(3, 1) == 4', 'assert eulerian_num(4, 1) == 11', 'assert eulerian_num(5, 3) == 26']",[],,,,,,
Write a function to sort each sublist of strings in a given list of lists using lambda function.,"def sort_sublists(input_list):
    result = [sorted(x, key = lambda x:x[0]) for x in input_list] 
    return result",104,Write a function to sort each sublist of strings in a given list of lists using lambda function.,"['assert sort_sublists(([""green"", ""orange""], [""black"", ""white""], [""white"", ""black"", ""orange""]))==[[\'green\', \'orange\'], [\'black\', \'white\'], [\'black\', \'orange\', \'white\']]', 'assert sort_sublists((["" red "",""green"" ],[""blue "","" black""],["" orange"",""brown""]))==[[\' red \', \'green\'], [\' black\', \'blue \'], [\' orange\', \'brown\']]', 'assert sort_sublists(([""zilver"",""gold""], [""magnesium"",""aluminium""], [""steel"", ""bronze""]))==[[\'gold\', \'zilver\'],[\'aluminium\', \'magnesium\'], [\'bronze\', \'steel\']]']",[],"def sort_sublists(lst):
    return [sorted(sublist, key=lambda x: x) for sublist in lst]",,,,,
Write a python function to count true booleans in the given list.,"def count(lst):   
    return sum(lst) ",105,Write a python function to count true booleans in the given list.,"['assert count([True,False,True]) == 2', 'assert count([False,False]) == 0', 'assert count([True,True,True]) == 3']",[],"def count_true_booleans(lst):
    return sum(1 for item in lst if item is True)",,,,,
Write a function to add the given list to the given tuples.,"def add_lists(test_list, test_tup):
  res = tuple(list(test_tup) + test_list)
  return (res) ",106,Write a function to add the given list to the given tuples.,"['assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)', 'assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)', 'assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)']",[],"def add_list_to_tuples(lst, tuples):
    result = []
    for tup in tuples:
        result.append(tup + tuple(lst))
    return tuple(result)",,,,,
Write a python function to count hexadecimal numbers for a given range.,"def count_Hexadecimal(L,R) :  
    count = 0;  
    for i in range(L,R + 1) : 
        if (i >= 10 and i <= 15) : 
            count += 1;  
        elif (i > 15) : 
            k = i;  
            while (k != 0) :  
                if (k % 16 >= 10) : 
                    count += 1;  
                k = k // 16;  
    return count;  ",107,Write a python function to count hexadecimal numbers for a given range.,"['assert count_Hexadecimal(10,15) == 6', 'assert count_Hexadecimal(2,4) == 0', 'assert count_Hexadecimal(15,16) == 1']",[],"def count_hexadecimal_numbers(start, end):
    count = 0
    for num in range(start, end + 1):
        if all(c in '0123456789abcdefABCDEF' for c in hex(num)[2:]):
            count += 1
    return count",,,,,
Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.,"import heapq
def merge_sorted_list(num1,num2,num3):
  num1=sorted(num1)
  num2=sorted(num2)
  num3=sorted(num3)
  result = heapq.merge(num1,num2,num3)
  return list(result)",108,Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.,"['assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]', 'assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]', 'assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]']",[],"import heapq

def merge_sorted_inputs(*inputs):
    # Create a heap queue from the first element of each input
    heap = [(val, idx, i) for idx, inp in enumerate(inputs) for i, val in enumerate(inp)]
    heapq.heapify(heap)

    # Initialize a dictionary to keep track of the last processed index for each input
    last_idx = {idx: 0 for idx in range(len(inputs))}

    while heap:
        val, input_idx, elem_idx = heapq.heappop(heap)

        # Yield the current value
        yield val

        # Move to the next element in the current input
        next_idx = last_idx[input_idx] + 1

        # If there are more elements in the current input, add them to the heap
        if next_idx < len(inputs[input_idx]):
            next_val = inputs[input_idx][next_idx]
            heapq.heappush(heap, (next_val, input_idx, next_idx))

        # Update the last processed index for the current input
        last_idx[input_idx] = next_idx

# Example usage:
sorted_inputs1 = [2, 5, 24, 4, 5, 29, 110]
sorted_inputs2 = [19, 20, 11, 56, 25, 233, 154]
sorted_inputs3 = [24, 26, 54, 48]

merged_sorted_iterator = merge_sorted_inputs(sorted_inputs1, sorted_inputs2, sorted_inputs3)

# Convert the iterator to a list for verification
merged_sorted_list = list(merged_sorted_iterator)

print(merged_sorted_list)",,,,,
Write a python function to find the count of rotations of a binary string with odd value.,"def odd_Equivalent(s,n): 
    count=0
    for i in range(0,n): 
        if (s[i] == '1'): 
            count = count + 1
    return count ",109,Write a python function to find the count of rotations of a binary string with odd value.,"['assert odd_Equivalent(""011001"",6) == 3', 'assert odd_Equivalent(""11011"",5) == 4', 'assert odd_Equivalent(""1010"",4) == 2']",[],"def count_rotations_with_odd_value(binary_string):
    rotations = 0
    n = len(binary_string)
    
    for i in range(n):
        count_ones = sum(int(digit) for digit in binary_string[i:])
        if count_ones % 2 != 0:
            rotations += 1
    
    return rotations",,,,,
Write a function to extract the ranges that are missing from the given list with the given start range and end range values.,"def extract_missing(test_list, strt_val, stop_val):
  res = []
  for sub in test_list:
    if sub[0] > strt_val:
      res.append((strt_val, sub[0]))
      strt_val = sub[1]
    if strt_val < stop_val:
      res.append((strt_val, stop_val))
  return (res) ",110,Write a function to extract the ranges that are missing from the given list with the given start range and end range values.,"['assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]', 'assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]', 'assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]']",[],"def extract_missing_ranges(ranges, start_range, end_range):
    missing_ranges = []
    current_end = start_range - 1
    
    for start, end in ranges:
        if start > current_end + 1:
            missing_ranges.append((current_end + 1, start - 1))
        current_end = max(current_end, end)
    
    if current_end < end_range:
        missing_ranges.append((current_end + 1, end_range))
    
    return missing_ranges",,,,,
Write a function to find common elements in given nested lists. * list item * list item * list item * list item,"def common_in_nested_lists(nestedlist):
    result = list(set.intersection(*map(set, nestedlist)))
    return result",111,Write a function to find common elements in given nested lists. * list item * list item * list item * list item,"['assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]', 'assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]', 'assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]']",[],,,,,,
Write a python function to find the perimeter of a cylinder.,"def perimeter(diameter,height) : 
    return 2*(diameter+height)  ",112,Write a python function to find the perimeter of a cylinder.,"['assert perimeter(2,4) == 12', 'assert perimeter(1,2) == 6', 'assert perimeter(3,1) == 8']",[],,,,,,
Write a function to check if a string represents an integer or not.,"def check_integer(text):
 text = text.strip()
 if len(text) < 1:
    return None
 else:
     if all(text[i] in ""0123456789"" for i in range(len(text))):
          return True
     elif (text[0] in ""+-"") and \
         all(text[i] in ""0123456789"" for i in range(1,len(text))):
         return True
     else:
        return False",113,Write a function to check if a string represents an integer or not.,"['assert check_integer(""python"")==False', 'assert check_integer(""1"")==True', 'assert check_integer(""12345"")==True']",[],,,,,,
Write a function to assign frequency to each tuple in the given tuple list.,"from collections import Counter 
def assign_freq(test_list):
  res = [(*key, val) for key, val in Counter(test_list).items()]
  return (str(res)) ",114,Write a function to assign frequency to each tuple in the given tuple list.,"[""assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'"", ""assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'"", ""assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'""]",[],"def assign_frequency(tuples_list):
    frequency_dict = {}
    for tuple_item in tuples_list:
        tuple_key = tuple(tuple_item)  # Convert list to tuple to ensure immutability
        if tuple_key in frequency_dict:
            frequency_dict[tuple_key] += 1
        else:
            frequency_dict[tuple_key] = 1
    return frequency_dict",,,,,
Write a function to check whether all dictionaries in a list are empty or not.,"def empty_dit(list1):
 empty_dit=all(not d for d in list1)
 return empty_dit",115,Write a function to check whether all dictionaries in a list are empty or not.,"['assert empty_dit([{},{},{}])==True', 'assert empty_dit([{1,2},{},{}])==False', 'assert empty_dit({})==True']",[],,,,,,
Write a function to convert a given tuple of positive integers into an integer.,"def tuple_to_int(nums):
    result = int(''.join(map(str,nums)))
    return result",116,Write a function to convert a given tuple of positive integers into an integer.,"['assert tuple_to_int((1,2,3))==123', 'assert tuple_to_int((4,5,6))==456', 'assert tuple_to_int((5,6,7))==567']",[],,,,,,
Write a function to convert all possible convertible elements in the list to float.,"def list_to_float(test_list):
  res = []
  for tup in test_list:
    temp = []
    for ele in tup:
      if ele.isalpha():
        temp.append(ele)
      else:
        temp.append(float(ele))
    res.append((temp[0],temp[1])) 
  return (str(res)) ",117,Write a function to convert all possible convertible elements in the list to float.,"['assert list_to_float( [(""3"", ""4""), (""1"", ""26.45""), (""7.32"", ""8""), (""4"", ""8"")] ) == \'[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\'', 'assert list_to_float( [(""4"", ""4""), (""2"", ""27""), (""4.12"", ""9""), (""7"", ""11"")] ) == \'[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\'', 'assert list_to_float( [(""6"", ""78""), (""5"", ""26.45""), (""1.33"", ""4""), (""82"", ""13"")] ) == \'[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]\'']",[],"def convert_to_float(lst):
    result = []
    for item in lst:
        if isinstance(item, str):
            try:
                result.append(float(item))
            except ValueError:
                result.append(item)
        elif isinstance(item, (int, float)):
            result.append(float(item))
        elif isinstance(item, list):
            result.append(convert_to_float(item))
        else:
            result.append(item)
    return result",,,,,
[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.,"def string_to_list(string): 
    lst = list(string.split("" "")) 
    return lst",118,[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.,"['assert string_to_list(""python programming"")==[\'python\',\'programming\']', 'assert string_to_list(""lists tuples strings"")==[\'lists\',\'tuples\',\'strings\']', 'assert string_to_list(""write a program"")==[\'write\',\'a\',\'program\']']",[],,,,,,
Write a python function to find the element that appears only once in a sorted array.,"def search(arr,n) :
    XOR = 0
    for i in range(n) :
        XOR = XOR ^ arr[i]
    return (XOR)",119,Write a python function to find the element that appears only once in a sorted array.,"['assert search([1,1,2,2,3],5) == 3', 'assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8', 'assert search([1,2,2,3,3,4,4],7) == 1']",[],,,,,,
Write a function to find the maximum product from the pairs of tuples within a given list.,"def max_product_tuple(list1):
    result_max = max([abs(x * y) for x, y in list1] )
    return result_max",120,Write a function to find the maximum product from the pairs of tuples within a given list.,"['assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36', 'assert max_product_tuple([(10,20), (15,2), (5,10)] )==200', 'assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484']",[],"def max_product_of_tuples(lst):
    max_product = 0
    for i in range(len(lst)):
        for j in range(i + 1, len(lst)):
            product = lst[i][0] * lst[j][1]
            if product > max_product:
                max_product = product
    return max_product",,,,,
Write a function to find the triplet with sum of the given array,"def check_triplet(A, n, sum, count):
    if count == 3 and sum == 0:
        return True
    if count == 3 or n == 0 or sum < 0:
        return False
    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\
           check_triplet(A, n - 1, sum, count)",121,Write a function to find the triplet with sum of the given array,"['assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True', 'assert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False', 'assert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True']",[],"def find_triplet_with_sum(arr, target_sum):
    # Sort the array in ascending order
    arr.sort()
    
    n = len(arr)
    
    # Iterate through the array from the beginning to n-2
    for i in range(n - 2):
        # Skip duplicates to avoid duplicates in the triplet
        if i > 0 and arr[i] == arr[i - 1]:
            continue
        
        # Initialize two pointers for the remaining two elements
        left = i + 1
        right = n - 1
        
        # Use two-pointer approach to find the remaining two elements
        while left < right:
            current_sum = arr[i] + arr[left] + arr[right]
            
            if current_sum == target_sum:
                # Found a triplet with the target sum
                return [arr[i], arr[left], arr[right]]
            
            elif current_sum < target_sum:
                # Current sum is too small, move the left pointer to increase the sum
                left += 1
                
                # Skip duplicates to avoid duplicates in the triplet
                while left < right and arr[left] == arr[left - 1]:
                    left += 1
            
            else:
                # Current sum is too large, move the right pointer to decrease the sum
                right -= 1
                
                # Skip duplicates to avoid duplicates in the triplet
                while left < right and arr[right] == arr[right + 1]:
                    right -= 1
    
    # No triplet found with the target sum
    return None",,,,,
Write a function to find n’th smart number.,"MAX = 3000 
def smartNumber(n): 
	primes = [0] * MAX 
	result = [] 
	for i in range(2, MAX): 
		if (primes[i] == 0): 
			primes[i] = 1 
			j = i * 2 
			while (j < MAX): 
				primes[j] -= 1 
				if ( (primes[j] + 3) == 0): 
					result.append(j) 
				j = j + i 
	result.sort() 
	return result[n - 1] ",122,Write a function to find n’th smart number.,"['assert smartNumber(1) == 30', 'assert smartNumber(50) == 273', 'assert smartNumber(1000) == 2664']",[],"def find_nth_smart_number(n):
    smart_numbers = [1, 2]
    num = 2
    
    while len(smart_numbers) < n:
        next_num = sum(divmod(num, 2))
        if next_num not in smart_numbers:
            smart_numbers.append(next_num)
        num += 1
    
    return smart_numbers[-1]",,,,,
Write a function to sum all amicable numbers from 1 to a specified number.,"def amicable_numbers_sum(limit):
    if not isinstance(limit, int):
        return ""Input is not an integer!""
    if limit < 1:
        return ""Input must be bigger than 0!""
    amicables = set()
    for num in range(2, limit+1):
        if num in amicables:
            continue
        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])
        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])
        if num == sum_fact2 and num != sum_fact:
            amicables.add(num)
            amicables.add(sum_fact2)
    return sum(amicables)",123,Write a function to sum all amicable numbers from 1 to a specified number.,"['assert amicable_numbers_sum(999)==504', 'assert amicable_numbers_sum(9999)==31626', 'assert amicable_numbers_sum(99)==0']",[],"def sum_amicable_numbers(n):
    def get_proper_divisors(num):
        divisors = set()
        for i in range(1, num):
            if num % i == 0:
                divisors.add(i)
        return sum(divisors)

    amicable_numbers = set()
    for i in range(1, n + 1):
        proper_divisors_sum = get_proper_divisors(i)
        if proper_divisors_sum != i and get_proper_divisors(proper_divisors_sum) == i:
            amicable_numbers.add(i)
            amicable_numbers.add(proper_divisors_sum)

    return sum(amicable_numbers)",,,,,
Write a function to get the angle of a complex number.,"import cmath
def angle_complex(a,b):
  cn=complex(a,b)
  angle=cmath.phase(a+b)
  return angle",124,Write a function to get the angle of a complex number.,"['assert angle_complex(0,1j)==1.5707963267948966 ', 'assert angle_complex(2,1j)==0.4636476090008061', 'assert angle_complex(0,2j)==1.5707963267948966']",[],"import cmath

def get_angle_of_complex_number(complex_num):
    angle = cmath.phase(complex_num)
    return angle",,,,,
Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.,"def find_length(string, n): 
	current_sum = 0
	max_sum = 0
	for i in range(n): 
		current_sum += (1 if string[i] == '0' else -1) 
		if current_sum < 0: 
			current_sum = 0
		max_sum = max(current_sum, max_sum) 
	return max_sum if max_sum else 0",125,Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.,"['assert find_length(""11000010001"", 11) == 6', 'assert find_length(""10111"", 5) == 1', 'assert find_length(""11011101100101"", 14) == 2 ']",[],"def max_diff_between_zeros_and_ones(binary_string):
    max_diff = 0
    count_zeros = 0
    count_ones = 0
    
    for char in binary_string:
        if char == '0':
            count_zeros += 1
            diff = count_zeros - count_ones
            max_diff = max(max_diff, diff)
        else:
            count_ones += 1
            diff = count_ones - count_zeros
            max_diff = max(max_diff, diff)
    
    return max_diff",,,,,
Write a python function to find the sum of common divisors of two given numbers.,"def sum(a,b): 
    sum = 0
    for i in range (1,min(a,b)): 
        if (a % i == 0 and b % i == 0): 
            sum += i 
    return sum",126,Write a python function to find the sum of common divisors of two given numbers.,"['assert sum(10,15) == 6', 'assert sum(100,150) == 93', 'assert sum(4,6) == 3']",[],"def sum_common_divisors(a, b):
    def get_divisors(n):
        divisors = []
        for i in range(1, n + 1):
            if n % i == 0:
                divisors.append(i)
        return divisors

    divisors_a = get_divisors(a)
    divisors_b = get_divisors(b)
    common_divisors = list(set(divisors_a) & set(divisors_b))
    return sum(common_divisors)",,,,,
Write a function to multiply two integers without using the * operator in python.,"def multiply_int(x, y):
    if y < 0:
        return -multiply_int(x, -y)
    elif y == 0:
        return 0
    elif y == 1:
        return x
    else:
        return x + multiply_int(x, y - 1)",127,Write a function to multiply two integers without using the * operator in python.,"['assert multiply_int(10,20)==200', 'assert multiply_int(5,10)==50', 'assert multiply_int(4,8)==32']",[],"def multiply_without_operator(a, b):
    if b == 0:
        return 0
    elif b > 0:
        result = a
        for _ in range(1, b):
            result += a
        return result
    else:
        return -multiply_without_operator(a, -b)",,,,,
Write a function to shortlist words that are longer than n from a given list of words.,"def long_words(n, str):
    word_len = []
    txt = str.split("" "")
    for x in txt:
        if len(x) > n:
            word_len.append(x)
    return word_len	",128,Write a function to shortlist words that are longer than n from a given list of words.,"['assert long_words(3,""python is a programming language"")==[\'python\',\'programming\',\'language\']', 'assert long_words(2,""writing a program"")==[\'writing\',\'program\']', 'assert long_words(5,""sorting list"")==[\'sorting\']']",[],,,,,,
Write a function to calculate magic square.,"def magic_square_test(my_matrix):
    iSize = len(my_matrix[0])
    sum_list = []
    sum_list.extend([sum (lines) for lines in my_matrix])   
    for col in range(iSize):
        sum_list.append(sum(row[col] for row in my_matrix))
    result1 = 0
    for i in range(0,iSize):
        result1 +=my_matrix[i][i]
    sum_list.append(result1)      
    result2 = 0
    for i in range(iSize-1,-1,-1):
        result2 +=my_matrix[i][i]
    sum_list.append(result2)
    if len(set(sum_list))>1:
        return False
    return True",129,Write a function to calculate magic square.,"['assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True', 'assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True', 'assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False']",[],"def calculate_magic_square(n):
    if n % 2 == 0:
        raise ValueError(""Magic square can only be calculated for odd numbers."")

    magic_square = [[0] * n for _ in range(n)]
    i, j = 0, n // 2

    for num in range(1, n * n + 1):
        magic_square[i][j] = num

        next_i, next_j = (i - 1) % n, (j + 1) % n
        if magic_square[next_i][next_j] != 0:
            next_i, next_j = (i + 1) % n, j

        i, j = next_i, next_j

    return magic_square",,,,,
Write a function to find the item with maximum frequency in a given list.,"from collections import defaultdict
def max_occurrences(nums):
    dict = defaultdict(int)
    for i in nums:
        dict[i] += 1
    result = max(dict.items(), key=lambda x: x[1]) 
    return result",130,Write a function to find the item with maximum frequency in a given list.,"['assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)', 'assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)', 'assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)']",[],"def find_max_frequency_item(lst):
    freq_dict = {}
    max_freq = 0
    max_freq_item = None

    for item in lst:
        if item in freq_dict:
            freq_dict[item] += 1
        else:
            freq_dict[item] = 1

        if freq_dict[item] > max_freq:
            max_freq = freq_dict[item]
            max_freq_item = item

    return max_freq_item",,,,,
Write a python function to reverse only the vowels of a given string.,"def reverse_vowels(str1):
	vowels = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			vowels += char
	result_string = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			result_string += vowels[-1]
			vowels = vowels[:-1]
		else:
			result_string += char
	return result_string",131,Write a python function to reverse only the vowels of a given string.,"['assert reverse_vowels(""Python"") == ""Python""', 'assert reverse_vowels(""USA"") == ""ASU""', 'assert reverse_vowels(""ab"") == ""ab""']",[],"def reverse_vowels(string):
    vowels = 'aeiouAEIOU'
    vowel_indices = [i for i, char in enumerate(string) if char in vowels]
    reversed_vowels = string[vowel_indices[::-1]]
    result = list(string)
    for i, char in enumerate(result):
        if char in vowels:
            result[i] = reversed_vowels.pop(0)
    return ''.join(result)",,,,,
Write a function to convert tuple to a string.,"def tup_string(tup1):
  str =  ''.join(tup1)
  return str",132,Write a function to convert tuple to a string.,"['assert tup_string((\'e\', \'x\', \'e\', \'r\', \'c\', \'i\', \'s\', \'e\', \'s\'))==(""exercises"")', 'assert tup_string((\'p\',\'y\',\'t\',\'h\',\'o\',\'n\'))==(""python"")', 'assert tup_string((\'p\',\'r\',\'o\',\'g\',\'r\',\'a\',\'m\'))==(""program"")']",[],,,,,,
Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.,"def sum_negativenum(nums):
  sum_negativenum = list(filter(lambda nums:nums<0,nums))
  return sum(sum_negativenum)",133,Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.,"['assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32', 'assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52', 'assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894']",[],"def sum_negative_numbers(numbers):
    return sum(filter(lambda x: x < 0, numbers))",,,,,
Write a python function to check whether the last element of given array is even or odd after performing an operation p times.,"def check_last (arr,n,p): 
    _sum = 0
    for i in range(n): 
        _sum = _sum + arr[i] 
    if p == 1: 
        if _sum % 2 == 0: 
            return ""ODD""
        else: 
            return ""EVEN""
    return ""EVEN""
      ",134,Write a python function to check whether the last element of given array is even or odd after performing an operation p times.,"['assert check_last([5,7,10],3,1) == ""ODD""', 'assert check_last([2,3],2,3) == ""EVEN""', 'assert check_last([1,2,3],3,1) == ""ODD""']",[],"def check_last_element(arr, p):
    # Perform the operation p times
    for _ in range(p):
        # Perform the operation: add the last element to the second-to-last element
        arr[-2] += arr[-1]
        # Remove the last element
        arr.pop()
    
    # Check if the last element is even or odd
    last_element = arr[-1]
    if last_element % 2 == 0:
        return ""EVEN""
    else:
        return ""ODD""",,,,,
Write a function to find the nth hexagonal number.,"def hexagonal_num(n): 
	return n*(2*n - 1) ",135,Write a function to find the nth hexagonal number.,"['assert hexagonal_num(10) == 190', 'assert hexagonal_num(5) == 45', 'assert hexagonal_num(7) == 91']",[],"def hexagonal_number(n):
    return n * (2 * n - 1)",,,,,
Write a function to calculate electricity bill.,"def cal_electbill(units):
 if(units < 50):
    amount = units * 2.60
    surcharge = 25
 elif(units <= 100):
    amount = 130 + ((units - 50) * 3.25)
    surcharge = 35
 elif(units <= 200):
    amount = 130 + 162.50 + ((units - 100) * 5.26)
    surcharge = 45
 else:
    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)
    surcharge = 75
 total = amount + surcharge
 return total",136,Write a function to calculate electricity bill.,"['assert cal_electbill(75)==246.25', 'assert cal_electbill(265)==1442.75', 'assert cal_electbill(100)==327.5']",[],"def calculate_electricity_bill(units):
    if units <= 50:
        return units * 0.5
    elif units <= 150:
        return 50 * 0.5 + (units - 50) * 0.75
    else:
        return 50 * 0.5 + 100 * 0.75 + (units - 150) * 1.0

# Example usage:
print(calculate_electricity_bill(75))  # Output: 246.25
print(calculate_electricity_bill(265))  # Output: 1442.75
print(calculate_electricity_bill(100))  # Output: 327.50",,,,,
Write a function to find the ration of zeroes in an array of integers.,"from array import array
def zero_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x == 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)",137,Write a function to find the ration of zeroes in an array of integers.,"['assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15', 'assert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00', 'assert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00']",[],"def zero_ratio(arr):
    count_zeros = sum(1 for num in arr if num == 0)
    total_count = len(arr)
    if total_count == 0:
        return 0.0  # Avoid division by zero
    return count_zeros / total_count",,,,,
Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.,"def is_Sum_Of_Powers_Of_Two(n): 
    if (n % 2 == 1): 
        return False
    else: 
        return True",138,Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.,"['assert is_Sum_Of_Powers_Of_Two(10) == True', 'assert is_Sum_Of_Powers_Of_Two(7) == False', 'assert is_Sum_Of_Powers_Of_Two(14) == True']",[],"def is_sum_of_powers_of_two(n):
    # Convert the number to binary and count the number of 1s
    binary_representation = bin(n)[2:]
    count_ones = binary_representation.count('1')

    # If the number of 1s is equal to the number of bits set in the binary representation,
    # then it can be represented as a sum of powers of 2
    return count_ones == len(set(binary_representation))

# Example usage
print(is_sum_of_powers_of_two(10))  # True
print(is_sum_of_powers_of_two(7))   # False
print(is_sum_of_powers_of_two(14))  # True",,,,,
Write a function to find the circumference of a circle.,"def circle_circumference(r):
  perimeter=2*3.1415*r
  return perimeter",139,Write a function to find the circumference of a circle.,"['assert circle_circumference(10)==62.830000000000005', 'assert circle_circumference(5)==31.415000000000003', 'assert circle_circumference(4)==25.132']",[],"import math

def circle_circumference(radius):
    circumference = 2 * math.pi * radius
    return circumference",,,,,
Write a function to extract elements that occur singly in the given tuple list.,"def extract_singly(test_list):
  res = []
  temp = set()
  for inner in test_list:
    for ele in inner:
      if not ele in temp:
        temp.add(ele)
        res.append(ele)
  return (res) ",140,Write a function to extract elements that occur singly in the given tuple list.,"['assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]', 'assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]', 'assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]']",[],"def extract_singly_occurring_elements(tuple_list):
    element_count = {}
    singly_occurring = []

    # Count the occurrences of each element
    for sub_tuple in tuple_list:
        for element in sub_tuple:
            if element in element_count:
                element_count[element] += 1
            else:
                element_count[element] = 1

    # Collect elements that occur singly
    for element, count in element_count.items():
        if count == 1:
            singly_occurring.append(element)

    return singly_occurring",,,,,
Write a function to sort a list of elements using pancake sort.,"def pancake_sort(nums):
    arr_len = len(nums)
    while arr_len > 1:
        mi = nums.index(max(nums[0:arr_len]))
        nums = nums[mi::-1] + nums[mi+1:len(nums)]
        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]
        arr_len -= 1
    return nums",141,Write a function to sort a list of elements using pancake sort.,"['assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]', 'assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]', 'assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]']",[],,,,,,
Write a function to count the same pair in three given lists.,"def count_samepair(list1,list2,list3):
    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))
    return result",142,Write a function to count the same pair in three given lists.,"['assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3', 'assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4', 'assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5']",[],,,,,,
Write a function to find number of lists present in the given tuple.,"def find_lists(Input): 
	if isinstance(Input, list): 
		return 1
	else: 
		return len(Input) ",143,Write a function to find number of lists present in the given tuple.,"['assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2', 'assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3', 'assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1']",[],,,,,,
Write a python function to find the sum of absolute differences in all pairs of the given array.,"def sum_Pairs(arr,n): 
    sum = 0
    for i in range(n - 1,-1,-1): 
        sum += i*arr[i] - (n-1-i) * arr[i] 
    return sum",144,Write a python function to find the sum of absolute differences in all pairs of the given array.,"['assert sum_Pairs([1,8,9,15,16],5) == 74', 'assert sum_Pairs([1,2,3,4],4) == 10', 'assert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188']",[],"def sum_absolute_differences(arr):
    n = len(arr)
    total_diff = 0
    
    for i in range(n):
        for j in range(i + 1, n):
            diff = abs(arr[i] - arr[j])
            total_diff += diff
    
    return total_diff",,,,,
Write a python function to find the maximum difference between any two elements in a given array.,"def max_Abs_Diff(arr,n): 
    minEle = arr[0] 
    maxEle = arr[0] 
    for i in range(1, n): 
        minEle = min(minEle,arr[i]) 
        maxEle = max(maxEle,arr[i]) 
    return (maxEle - minEle) ",145,Write a python function to find the maximum difference between any two elements in a given array.,"['assert max_Abs_Diff((2,1,5,3),4) == 4', 'assert max_Abs_Diff((9,3,2,5,1),5) == 8', 'assert max_Abs_Diff((3,2,1),3) == 2']",[],"def max_difference(arr):
    if len(arr) < 2:
        return 0  # Cannot compute a difference with fewer than 2 elements
    
    max_diff = float('-inf')
    max_val = float('-inf')
    min_val = float('inf')
    
    for num in arr:
        if num > max_val:
            max_val = num
        if num < min_val:
            min_val = num
        max_diff = max(max_diff, max_val - min_val)
    
    return max_diff",,,,,
Write a function to find the ascii value of total characters in a string.,"def ascii_value_string(str1):
  for i in range(len(str1)):
   return ord(str1[i])",146,Write a function to find the ascii value of total characters in a string.,"['assert ascii_value_string(""python"")==112', 'assert ascii_value_string(""Program"")==80', 'assert ascii_value_string(""Language"")==76']",[],"def calculate_ascii_sum(string):
    total_ascii = sum(ord(char) for char in string)
    return total_ascii",,,,,
Write a function to find the maximum total path sum in the given triangle.,"def max_path_sum(tri, m, n): 
	for i in range(m-1, -1, -1): 
		for j in range(i+1): 
			if (tri[i+1][j] > tri[i+1][j+1]): 
				tri[i][j] += tri[i+1][j] 
			else: 
				tri[i][j] += tri[i+1][j+1] 
	return tri[0][0]",147,Write a function to find the maximum total path sum in the given triangle.,"['assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14', 'assert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 ', 'assert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53']",[],"def maximum_path_sum(triangle):
    # Initialize the last row of the triangle as the base case
    max_sums = triangle[-1]
    
    # Iterate over the rows from the second last row to the top
    for i in range(len(triangle) - 2, -1, -1):
        # Calculate the maximum sum for each element in the current row
        for j in range(len(triangle[i])):
            # Add the current element with the maximum sum from the next row
            max_sums[j] = triangle[i][j] + max(max_sums[j], max_sums[j + 1])
    
    # The maximum sum of the triangle is the maximum value in the top row
    return max(max_sums)",,,,,
Write a function to divide a number into two parts such that the sum of digits is maximum.,"def sum_digits_single(x) : 
    ans = 0
    while x : 
        ans += x % 10
        x //= 10  
    return ans 
def closest(x) : 
    ans = 0
    while (ans * 10 + 9 <= x) : 
        ans = ans * 10 + 9  
    return ans   
def sum_digits_twoparts(N) : 
    A = closest(N)  
    return sum_digits_single(A) + sum_digits_single(N - A) ",148,Write a function to divide a number into two parts such that the sum of digits is maximum.,"['assert sum_digits_twoparts(35)==17', 'assert sum_digits_twoparts(7)==7', 'assert sum_digits_twoparts(100)==19']",[],"def max_digit_sum(number):
    # Convert the number to a string for easier manipulation
    num_str = str(number)
    
    # Find the index that splits the number into two parts with the maximum sum of digits
    max_sum = 0
    max_index = 0
    
    for i in range(1, len(num_str)):
        # Calculate the sum of digits in the first part
        first_part_sum = sum(int(digit) for digit in num_str[:i])
        
        # Calculate the sum of digits in the second part
        second_part_sum = sum(int(digit) for digit in num_str[i:])
        
        # Update the maximum sum and index if necessary
        if first_part_sum + second_part_sum > max_sum:
            max_sum = first_part_sum + second_part_sum
            max_index = i
    
    # Split the number into two parts based on the maximum index
    first_part = int(num_str[:max_index])
    second_part = int(num_str[max_index:])
    
    return first_part, second_part",,,,,
Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.,"def longest_subseq_with_diff_one(arr, n): 
	dp = [1 for i in range(n)] 
	for i in range(n): 
		for j in range(i): 
			if ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): 
				dp[i] = max(dp[i], dp[j]+1) 
	result = 1
	for i in range(n): 
		if (result < dp[i]): 
			result = dp[i] 
	return result",149,Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.,"['assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6', 'assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3', 'assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7']",[],"def longest_subsequence(arr):
    if not arr:
        return 0

    # Create a dictionary to store the lengths of subsequences ending with each element
    lengths = {arr[0]: 1}
    max_length = 1

    for num in arr[1:]:
        # Check if the current number is one less or one more than a previous number
        if num - 1 in lengths or num + 1 in lengths:
            # Update the length of the subsequence ending with the current number
            lengths[num] = lengths.get(num - 1, 0) + 1
            lengths[num] = max(lengths[num], lengths.get(num + 1, 0) + 1)
        else:
            # If the current number doesn't extend any existing subsequence, start a new one
            lengths[num] = 1

        # Update the maximum length if necessary
        max_length = max(max_length, lengths[num])

    return max_length",,,,,
Write a python function to find whether the given number is present in the infinite sequence or not.,"def does_Contain_B(a,b,c): 
    if (a == b): 
        return True
    if ((b - a) * c > 0 and (b - a) % c == 0): 
        return True
    return False",150,Write a python function to find whether the given number is present in the infinite sequence or not.,"['assert does_Contain_B(1,7,3) == True', 'assert does_Contain_B(1,-3,5) == False', 'assert does_Contain_B(3,2,5) == False']",[],,,,,,
Write a python function to check whether the given number is co-prime or not.,"def gcd(p,q):
    while q != 0:
        p, q = q,p%q
    return p
def is_coprime(x,y):
    return gcd(x,y) == 1",151,Write a python function to check whether the given number is co-prime or not.,"['assert is_coprime(17,13) == True', 'assert is_coprime(15,21) == False', 'assert is_coprime(25,45) == False']",[],,,,,,
Write a function to sort the given array by using merge sort.,"def merge(a,b):
    c = []
    while len(a) != 0 and len(b) != 0:
        if a[0] < b[0]:
            c.append(a[0])
            a.remove(a[0])
        else:
            c.append(b[0])
            b.remove(b[0])
    if len(a) == 0:
        c += b
    else:
        c += a
    return c
def merge_sort(x):
    if len(x) == 0 or len(x) == 1:
        return x
    else:
        middle = len(x)//2
        a = merge_sort(x[:middle])
        b = merge_sort(x[middle:])
        return merge(a,b)
",152,Write a function to sort the given array by using merge sort.,"['assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]', 'assert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]', 'assert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]']",[],,,,,,
Write a function to find the vertex of a parabola.,"def parabola_vertex(a, b, c): 
  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))
  return vertex",153,Write a function to find the vertex of a parabola.,"['assert parabola_vertex(5,3,2)==(-0.3, 1.55)', 'assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)', 'assert parabola_vertex(2,4,6)==(-1.0, 4.0)']",[],"def find_parabola_vertex(a, b, c):
    # Calculate the x-coordinate of the vertex
    x_vertex = -b / (2 * a)
    
    # Calculate the y-coordinate of the vertex
    y_vertex = c - (b**2) / (4 * a)
    
    # Return the vertex as a tuple
    return x_vertex, y_vertex",,,,,
Write a function to extract every specified element from a given two dimensional list.,"def specified_element(nums, N):
    result = [i[N] for i in nums]
    return result",154,Write a function to extract every specified element from a given two dimensional list.,"['assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]', 'assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]', 'assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]']",[],"def extract_elements(matrix, element_index):
    result = []
    for row in matrix:
        if isinstance(row, list):
            result.append(row[element_index])
    return result",,,,,
Write a python function to toggle all even bits of a given number.,"def even_bit_toggle_number(n) : 
    res = 0; count = 0; temp = n 
    while (temp > 0) :     
        if (count % 2 == 1) : 
            res = res | (1 << count)      
        count = count + 1
        temp >>= 1 
    return n ^ res ",155,Write a python function to toggle all even bits of a given number.,"['assert even_bit_toggle_number(10) == 0', 'assert even_bit_toggle_number(20) == 30', 'assert even_bit_toggle_number(30) == 20']",[],"def toggle_even_bits(number):
    toggled_number = 0
    bit_index = 0

    while number > 0:
        bit = number & 1  # Get the least significant bit
        if bit_index % 2 == 0:  # Check if the bit index is even
            toggled_bit = 1 - bit  # Toggle the bit
        else:
            toggled_bit = bit  # Keep the bit unchanged

        toggled_number = (toggled_number << 1) | toggled_bit  # Shift the result and add the toggled bit
        number >>= 1  # Shift the input number to the right
        bit_index += 1  # Increment the bit index

    return toggled_number",,,,,
Write a function to convert a tuple of string values to a tuple of integer values.,"def tuple_int_str(tuple_str):
    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)
    return result",156,Write a function to convert a tuple of string values to a tuple of integer values.,"[""assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))"", ""assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))"", ""assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))""]",[],"def convert_tuple_to_ints(tuple_of_strings):
    return tuple(int(s) for s in tuple_of_strings)",,,,,
Write a function to reflect the run-length encoding from a list.,"from itertools import groupby
def encode_list(list1):
    return [[len(list(group)), key] for key, group in groupby(list1)]",157,Write a function to reflect the run-length encoding from a list.,"['assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]', ""assert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]"", ""assert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]""]",[],,,,,,
Write a python function to find k number of operations required to make all elements equal.,"def min_Ops(arr,n,k): 
    max1 = max(arr) 
    res = 0
    for i in range(0,n):  
        if ((max1 - arr[i]) % k != 0): 
            return -1 
        else: 
            res += (max1 - arr[i]) / k 
    return int(res) ",158,Write a python function to find k number of operations required to make all elements equal.,"['assert min_Ops([2,2,2,2],4,3) == 0', 'assert min_Ops([4,2,6,8],4,3) == -1', 'assert min_Ops([21,33,9,45,63],5,6) == 24']",[],"def min_operations_to_equalize(nums, increment_amount, k):
    target = nums[0]
    operations = 0
    
    for num in nums[1:]:
        diff = abs(num - target)
        operations += (diff + increment_amount - 1) // increment_amount
        
        if operations >= k:
            return -1  # If the number of operations exceeds k, return -1
    
    return operations",,,,,
Write a function to print the season for the given month and day.,"def month_season(month,days):
 if month in ('January', 'February', 'March'):
	 season = 'winter'
 elif month in ('April', 'May', 'June'):
	 season = 'spring'
 elif month in ('July', 'August', 'September'):
	 season = 'summer'
 else:
	 season = 'autumn'
 if (month == 'March') and (days > 19):
	 season = 'spring'
 elif (month == 'June') and (days > 20):
	 season = 'summer'
 elif (month == 'September') and (days > 21):
	 season = 'autumn'
 elif (month == 'October') and (days > 21):
	 season = 'autumn'
 elif (month == 'November') and (days > 21):
	 season = 'autumn'
 elif (month == 'December') and (days > 20):
	 season = 'winter'
 return season",159,Write a function to print the season for the given month and day.,"[""assert month_season('January',4)==('winter')"", ""assert month_season('October',28)==('autumn')"", ""assert month_season('June',6)==('spring')""]",[],"def get_season(month, day):
    if (month == 12 or month == 1 or month == 2) and day <= 28:
        return ""winter""
    elif (month == 3 or month == 4 or month == 5) and day <= 31:
        return ""spring""
    elif (month == 6 or month == 7 or month == 8) and day <= 31:
        return ""summer""
    elif (month == 9 or month == 10 or month == 11) and day <= 30:
        return ""autumn""
    else:
        return ""Invalid date""",,,,,
Write a function to find x and y that satisfies ax + by = n.,"def solution (a, b, n): 
	i = 0
	while i * a <= n: 
		if (n - (i * a)) % b == 0: 
			return (""x = "",i ,"", y = "", 
			int((n - (i * a)) / b)) 
			return 0
		i = i + 1
	return (""No solution"") ",160,Write a function to find x and y that satisfies ax + by = n.,"[""assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)"", ""assert solution(4, 2, 7) == 'No solution'"", ""assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)""]",[],,,,,,
Write a function to remove all elements from a given list present in another list.,"def remove_elements(list1, list2):
    result = [x for x in list1 if x not in list2]
    return result",161,Write a function to remove all elements from a given list present in another list.,"['assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]', 'assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]', 'assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]']",[],"def remove_elements(list1, list2):
    return [element for element in list1 if element not in list2]",,,,,
Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).,"def sum_series(n):
  if n < 1:
    return 0
  else:
    return n + sum_series(n - 2)",162,Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).,"['assert sum_series(6)==12', 'assert sum_series(10)==30', 'assert sum_series(9)==25']",[],"def calculate_sum_series(n):
    total_sum = 0
    x = 0
    while n - x > 0:
        total_sum += n - x
        x += 2
    return total_sum",,,,,
Write a function to calculate the area of a regular polygon.,"from math import tan, pi
def area_polygon(s,l):
  area = s * (l ** 2) / (4 * tan(pi / s))
  return area",163,Write a function to calculate the area of a regular polygon.,"['assert area_polygon(4,20)==400.00000000000006', 'assert area_polygon(10,15)==1731.1969896610804', 'assert area_polygon(9,7)==302.90938549487214']",[],"import math

def area_of_regular_polygon(num_sides, side_length):
    """"""
    Calculates the area of a regular polygon.
    
    :param num_sides: Number of sides in the polygon.
    :param side_length: Length of each side in the polygon.
    :return: Area of the regular polygon.
    """"""
    # Calculate the apothem (perpendicular distance from the center to a side)
    apothem = (side_length / 2) * math.tan(math.pi / num_sides)
    
    # Calculate the area using the formula (num_sides * apothem * side_length) / 2
    area = (num_sides * apothem * side_length) / 2
    
    return area",,,,,
Write a python function to check whether the sum of divisors are same or not.,"import math 
def divSum(n): 
    sum = 1; 
    i = 2; 
    while(i * i <= n): 
        if (n % i == 0): 
            sum = (sum + i +math.floor(n / i)); 
        i += 1; 
    return sum; 
def areEquivalent(num1,num2): 
    return divSum(num1) == divSum(num2); ",164,Write a python function to check whether the sum of divisors are same or not.,"['assert areEquivalent(36,57) == False', 'assert areEquivalent(2,4) == False', 'assert areEquivalent(23,47) == True']",[],,,,,,
Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.,"def count_char_position(str1): 
    count_chars = 0
    for i in range(len(str1)):
        if ((i == ord(str1[i]) - ord('A')) or 
            (i == ord(str1[i]) - ord('a'))): 
            count_chars += 1
    return count_chars ",165,Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.,"['assert count_char_position(""xbcefg"") == 2', 'assert count_char_position(""ABcED"") == 3', 'assert count_char_position(""AbgdeF"") == 5']",[],"def count_characters_at_same_position(string):
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    count = 0
    for char in string:
        if char.lower() in alphabet:
            index = alphabet.index(char.lower())
            if char.isupper() and string[index].islower():
                count += 1
    return count",,,,,
Write a python function to count the pairs with xor as an even number.,"def find_even_Pair(A,N): 
    evenPair = 0
    for i in range(0,N): 
        for j in range(i+1,N): 
            if ((A[i] ^ A[j]) % 2 == 0): 
                evenPair+=1
    return evenPair; ",166,Write a python function to count the pairs with xor as an even number.,"['assert find_even_Pair([5,4,7,2,1],5) == 4', 'assert find_even_Pair([7,2,8,1,0,5,11],7) == 9', 'assert find_even_Pair([1,2,3],3) == 1']",[],"def count_even_xor_pairs(nums):
    count = 0
    xor_sum = 0
    
    for num in nums:
        xor_sum ^= num
    
    for num in nums:
        if (xor_sum ^ num) % 2 == 0:
            count += 1
    
    return count",,,,,
Write a python function to find smallest power of 2 greater than or equal to n.,"def next_Power_Of_2(n): 
    count = 0; 
    if (n and not(n & (n - 1))): 
        return n   
    while( n != 0): 
        n >>= 1
        count += 1
    return 1 << count; ",167,Write a python function to find smallest power of 2 greater than or equal to n.,"['assert next_Power_Of_2(0) == 1', 'assert next_Power_Of_2(5) == 8', 'assert next_Power_Of_2(17) == 32']",[],"def next_power_of_two(n):
    if n <= 0:
        return 1
    else:
        # Find the next highest power of 2 by bitwise operations
        n -= 1
        n |= n >> 1
        n |= n >> 2
        n |= n >> 4
        n |= n >> 8
        n |= n >> 16
        n += 1
        return n",,,,,
Write a python function to find the frequency of a number in a given array.,"def frequency(a,x): 
    count = 0  
    for i in a: 
        if i == x: count += 1
    return count ",168,Write a python function to find the frequency of a number in a given array.,"['assert frequency([1,2,3],4) == 0', 'assert frequency([1,2,2,3,3,3,4],3) == 3', 'assert frequency([0,1,2,3,1,2],1) == 2']",[],"def find_frequency(arr, num):
    count = 0
    for num_in_arr in arr:
        if num_in_arr == num:
            count += 1
    return count",,,,,
Write a function to calculate the nth pell number.,"def get_pell(n): 
	if (n <= 2): 
		return n 
	a = 1
	b = 2
	for i in range(3, n+1): 
		c = 2 * b + a 
		a = b 
		b = c 
	return b ",169,Write a function to calculate the nth pell number.,"['assert get_pell(4) == 12', 'assert get_pell(7) == 169', 'assert get_pell(8) == 408']",[],"def pell_number(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        a, b = 0, 1
        for _ in range(2, n + 1):
            a, b = b, a + 2 * b
        return b",,,,,
Write a function to find sum of the numbers in a list between the indices of a specified range.,"def sum_range_list(list1, m, n):                                                                                                                                                                                                
    sum_range = 0                                                                                                                                                                                                         
    for i in range(m, n+1, 1):                                                                                                                                                                                        
        sum_range += list1[i]                                                                                                                                                                                                  
    return sum_range   ",170,Write a function to find sum of the numbers in a list between the indices of a specified range.,"['assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29', 'assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16', 'assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38']",[],"def sum_range(numbers, start_index, end_index):
    """"""
    Calculates the sum of numbers in a list between the specified range of indices.
    
    :param numbers: The list of numbers.
    :param start_index: The starting index of the range (inclusive).
    :param end_index: The ending index of the range (exclusive).
    :return: The sum of numbers in the specified range.
    """"""
    # Ensure the indices are within the list bounds
    if start_index < 0 or end_index > len(numbers) or start_index >= end_index:
        raise ValueError(""Invalid indices for the range."")
    
    # Calculate the sum of numbers in the specified range
    return sum(numbers[start_index:end_index])",,,,,
Write a function to find the perimeter of a pentagon.,"import math
def perimeter_pentagon(a):
  perimeter=(5*a)
  return perimeter",171,Write a function to find the perimeter of a pentagon.,"['assert perimeter_pentagon(5)==25', 'assert perimeter_pentagon(10)==50', 'assert perimeter_pentagon(15)==75']",[],"def perimeter_of_pentagon(side_length):
    """"""
    Calculate the perimeter of a pentagon given the side length.
    
    :param side_length: The length of each side of the pentagon.
    :return: The perimeter of the pentagon.
    """"""
    return 5 * side_length",,,,,
Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item,"def count_occurance(s):
  count=0
  for i in range(len(s)):
    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):
      count = count + 1
  return count",172,Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item,"['assert count_occurance(""letstdlenstdporstd"") == 3', 'assert count_occurance(""truststdsolensporsd"") == 1', 'assert count_occurance(""makestdsostdworthit"") == 2']",[],,,,,,
Write a function to remove everything except alphanumeric characters from a string.,"import re
def remove_splchar(text): 
 pattern = re.compile('[\W_]+')
 return (pattern.sub('', text))",173,Write a function to remove everything except alphanumeric characters from a string.,"[""assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')"", ""assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')"", ""assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')""]",[],,,,,,
Write a function to group a sequence of key-value pairs into a dictionary of lists.,"def group_keyvalue(l):
    result = {}
    for k, v in l:
         result.setdefault(k, []).append(v)
    return result",174,Write a function to group a sequence of key-value pairs into a dictionary of lists.,"[""assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}"", ""assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}"", ""assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}""]",[],"def group_key_value_pairs(pairs):
    result = {}
    for key, value in pairs:
        if key in result:
            result[key].append(value)
        else:
            result[key] = [value]
    return result",,,,,
Write a function to verify validity of a string of parentheses.,"def is_valid_parenthese( str1):
        stack, pchar = [], {""("": "")"", ""{"": ""}"", ""["": ""]""}
        for parenthese in str1:
            if parenthese in pchar:
                stack.append(parenthese)
            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:
                return False
        return len(stack) == 0",175,Write a function to verify validity of a string of parentheses.,"['assert is_valid_parenthese(""(){}[]"")==True', 'assert is_valid_parenthese(""()[{)}"")==False', 'assert is_valid_parenthese(""()"")==True']",[],,,,,,
Write a function to find the perimeter of a triangle.,"def perimeter_triangle(a,b,c):
  perimeter=a+b+c
  return perimeter",176,Write a function to find the perimeter of a triangle.,"['assert perimeter_triangle(10,20,30)==60', 'assert perimeter_triangle(3,4,5)==12', 'assert perimeter_triangle(25,35,45)==105']",[],"def calculate_triangle_perimeter(a, b, c):
    """"""
    Calculates the perimeter of a triangle given its three sides.
    
    :param a: Length of the first side of the triangle
    :param b: Length of the second side of the triangle
    :param c: Length of the third side of the triangle
    :return: The perimeter of the triangle
    """"""
    perimeter = a + b + c
    return perimeter",,,,,
Write a python function to find two distinct numbers such that their lcm lies within the given range.,"def answer(L,R): 
    if (2 * L <= R): 
        return (L ,2*L)
    else: 
        return (-1) ",177,Write a python function to find two distinct numbers such that their lcm lies within the given range.,"['assert answer(3,8) == (3,6)', 'assert answer(2,6) == (2,4)', 'assert answer(1,3) == (1,2)']",[],,,,,,
Write a function to search some literals strings in a string.,"import re
def string_literals(patterns,text):
  for pattern in patterns:
     if re.search(pattern,  text):
       return ('Matched!')
     else:
       return ('Not Matched!')",178,Write a function to search some literals strings in a string.,"[""assert string_literals(['language'],'python language')==('Matched!')"", ""assert string_literals(['program'],'python language')==('Not Matched!')"", ""assert string_literals(['python'],'programming language')==('Not Matched!')""]",[],,,,,,
Write a function to find if the given number is a keith number or not.,"def is_num_keith(x): 
	terms = [] 
	temp = x 
	n = 0 
	while (temp > 0): 
		terms.append(temp % 10) 
		temp = int(temp / 10) 
		n+=1 
	terms.reverse() 
	next_term = 0 
	i = n 
	while (next_term < x): 
		next_term = 0 
		for j in range(1,n+1): 
			next_term += terms[i - j] 
		terms.append(next_term) 
		i+=1 
	return (next_term == x) ",179,Write a function to find if the given number is a keith number or not.,"['assert is_num_keith(14) == True', 'assert is_num_keith(12) == False', 'assert is_num_keith(197) == True']",[],,,,,,
Write a function to calculate distance between two points using latitude and longitude.,"from math import radians, sin, cos, acos
def distance_lat_long(slat,slon,elat,elon):
 dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))
 return dist",180,Write a function to calculate distance between two points using latitude and longitude.,"['assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429', 'assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514', 'assert distance_lat_long(10,20,30,40)==6783.751974994595']",[],"import math

def calculate_distance(lat1, lon1, lat2, lon2):
    # Convert latitude and longitude from degrees to radians
    lat1, lon1, lat2, lon2 = map(math.radians, [lat1, lon1, lat2, lon2])

    # Haversine formula
    dlon = lon2 - lon1
    dlat = lat2 - lat1
    a = math.sin(dlat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2) ** 2
    c = 2 * math.asin(math.sqrt(a))
    r = 6371  # Radius of the earth in kilometers
    distance = c * r

    return distance",,,,,
Write a function to find the longest common prefix in the given set of strings.,"def common_prefix_util(str1, str2): 
	result = """"; 
	n1 = len(str1) 
	n2 = len(str2) 
	i = 0
	j = 0
	while i <= n1 - 1 and j <= n2 - 1: 
		if (str1[i] != str2[j]): 
			break
		result += str1[i] 
		i += 1
		j += 1
	return (result) 
def common_prefix (arr, n): 
	prefix = arr[0] 
	for i in range (1, n): 
		prefix = common_prefix_util(prefix, arr[i]) 
	return (prefix) ",181,Write a function to find the longest common prefix in the given set of strings.,"['assert common_prefix([""tablets"", ""tables"", ""taxi"", ""tamarind""], 4) == \'ta\'', 'assert common_prefix([""apples"", ""ape"", ""april""], 3) == \'ap\'', 'assert common_prefix([""teens"", ""teenager"", ""teenmar""], 3) == \'teen\'']",[],"def longest_common_prefix(strs):
    if not strs:
        return """"

    shortest_str = min(strs, key=len)
    for i, char in enumerate(shortest_str):
        for other_str in strs:
            if other_str[i] != char:
                return shortest_str[:i]
    return shortest_str",,,,,
"Write a function to find uppercase, lowercase, special character and numeric values using regex.","import re
def find_character(string):
  uppercase_characters = re.findall(r""[A-Z]"", string) 
  lowercase_characters = re.findall(r""[a-z]"", string) 
  numerical_characters = re.findall(r""[0-9]"", string) 
  special_characters = re.findall(r""[, .!?]"", string) 
  return uppercase_characters, lowercase_characters, numerical_characters, special_characters",182,"Write a function to find uppercase, lowercase, special character and numeric values using regex.","['assert find_character(""ThisIsGeeksforGeeks"") == ([\'T\', \'I\', \'G\', \'G\'], [\'h\', \'i\', \'s\', \'s\', \'e\', \'e\', \'k\', \'s\', \'f\', \'o\', \'r\', \'e\', \'e\', \'k\', \'s\'], [], [])', 'assert find_character(""Hithere2"") == ([\'H\'], [\'i\', \'t\', \'h\', \'e\', \'r\', \'e\'], [\'2\'], [])', 'assert find_character(""HeyFolks32"") == ([\'H\', \'F\'], [\'e\', \'y\', \'o\', \'l\', \'k\', \'s\'], [\'3\', \'2\'], [])']",[],,,,,,
Write a function to count all the distinct pairs having a difference of k in any array.,"def count_pairs(arr, n, k):
  count=0;
  for i in range(0,n):
    for j in range(i+1, n):
      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:
        count += 1
  return count",183,Write a function to count all the distinct pairs having a difference of k in any array.,"['assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2', 'assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5', 'assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3']",[],"def count_distinct_pairs_with_difference(arr, k):
    pairs_count = 0
    num_dict = {}
    
    for num in arr:
        if num in num_dict:
            num_dict[num] += 1
        else:
            num_dict[num] = 1
    
    for num in num_dict:
        complement = num + k
        if complement in num_dict:
            pairs_count += num_dict[num] * num_dict[complement]
    
    return pairs_count",,,,,
Write a function to find all the values in a list that are greater than a specified number.,"def greater_specificnum(list,num):
 greater_specificnum=all(x >= num for x in list)
 return greater_specificnum",184,Write a function to find all the values in a list that are greater than a specified number.,"['assert greater_specificnum([220, 330, 500],200)==True', 'assert greater_specificnum([12, 17, 21],20)==False', 'assert greater_specificnum([1,2,3,4],10)==False']",[],"def find_greater_than(numbers, threshold):
    return [num for num in numbers if num > threshold]",,,,,
Write a function to find the focus of a parabola.,"def parabola_focus(a, b, c): 
  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))
  return focus",185,Write a function to find the focus of a parabola.,"['assert parabola_focus(5,3,2)==(-0.3, 1.6)', 'assert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)', 'assert parabola_focus(2,4,6)==(-1.0, 4.125)']",[],"def parabola_focus(a, b, c):
    # Calculate the vertex of the parabola
    vertex_x = -b / (2 * a)
    vertex_y = c - (b**2) / (4 * a)
    
    # Calculate the focal length
    focal_length = 1 / (4 * abs(a))
    
    # Calculate the focus coordinates
    if a > 0:
        focus_x = vertex_x
        focus_y = vertex_y + focal_length
    else:
        focus_x = vertex_x
        focus_y = vertex_y - focal_length
    
    return focus_x, focus_y",,,,,
Write a function to search some literals strings in a string by using regex.,"import re
def check_literals(text, patterns):
  for pattern in patterns:
    if re.search(pattern,  text):
        return ('Matched!')
    else:
        return ('Not Matched!')",186,Write a function to search some literals strings in a string by using regex.,"[""assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'"", ""assert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'"", ""assert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'""]",[],"import re

def search_literals(text):
    literals = ['fox', 'horse', 'lazy']
    pattern = r'\b(' + '|'.join(re.escape(literal) for literal in literals) + r')\b'
    matches = re.findall(pattern, text)
    return matches",,,,,
Write a function to find the longest common subsequence for the given two sequences.,"def longest_common_subsequence(X, Y, m, n): 
    if m == 0 or n == 0: 
       return 0 
    elif X[m-1] == Y[n-1]: 
       return 1 + longest_common_subsequence(X, Y, m-1, n-1) 
    else: 
       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))",187,Write a function to find the longest common subsequence for the given two sequences.,"['assert longest_common_subsequence(""AGGTAB"" , ""GXTXAYB"", 6, 7) == 4', 'assert longest_common_subsequence(""ABCDGH"" , ""AEDFHR"", 6, 6) == 3', 'assert longest_common_subsequence(""AXYT"" , ""AYZX"", 4, 4) == 2']",[],"def longest_common_subsequence(seq1, seq2):
    m = len(seq1)
    n = len(seq2)

    # Create a matrix to store the lengths of LCS of substrings
    # seq1[0..i-1] and seq2[0..j-1]
    lcs = [[0] * (n + 1) for _ in range(m + 1)]

    # Build the matrix in bottom-up manner
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if seq1[i - 1] == seq2[j - 1]:
                lcs[i][j] = lcs[i - 1][j - 1] + 1
            else:
                lcs[i][j] = max(lcs[i - 1][j], lcs[i][j - 1])

    # lcs[m][n] contains the length of LCS for seq1[0..n-1] and seq2[0..m-1]
    length_of_lcs = lcs[m][n]

    # Construct the LCS
    lcs_sequence = []
    i = m
    j = n
    while i > 0 and j > 0:
        # If current character in both strings are same, then current character is part of LCS
        if seq1[i - 1] == seq2[j - 1]:
            lcs_sequence.append(seq1[i - 1])
            i -= 1
            j -= 1
        # If not same, then find the larger of two and go in the direction of larger value
        elif lcs[i - 1][j] > lcs[i][j - 1]:
            i -= 1
        else:
            j -= 1

    # Reverse the LCS sequence to get the original sequence
    lcs_sequence.reverse()

    return lcs_sequence, length_of_lcs

# Example usage
seq1 = ['a', 's', 's', 'e', 'r', 't', ' ', 'l', 'o', 'n', 'g', 'e', 's', 't', '_', 'c', 'o', 'm', 'm', 'o', 'n', '_', 's', 'u', 'b', 's', 'e', 'q', 'u', 'e', 'n', 'c', 'e', '(', '""', 'A', 'G', 'G', 'T', 'A', 'B', '""', ' ', ',', ' ', '""', 'G', 'X', 'T', 'X', 'A', 'Y', 'B', '""', ',', ' ', '6', ',', ' ', '7', ')', ' ', '=', '=', ' ', '4']
seq2 = ['a', 's', 's', 'e', 'r', 't', ' ', 'l', 'o', 'n', 'g', 'e', 's', 't', '_', 'c', 'o', 'm', 'm', 'o', 'n', '_', 's', 'u', 'b', 's', 'e', 'q', 'u', 'e', 'n', 'c', 'e', '(', '""', 'A', 'B', 'C', 'D', 'G', 'H', '""', ' ', ',', ' ', '""', 'A', 'E', 'D', 'F', 'H', 'R', '""', ',', ' ', '6', ',', ' ', '6', ')', ' ', '=', '=', ' ', '3']
lcs_sequence, length_of_lcs = longest_common_subsequence(seq1, seq2)
print(""LCS Sequence:"", lcs_sequence)
print(""Length of LCS:"", length_of_lcs)",,,,,
Write a python function to check whether the given number can be represented by product of two squares or not.,"def prod_Square(n):
    for i in range(2,(n) + 1):
        if (i*i < (n+1)):
            for j in range(2,n + 1):
                if ((i*i*j*j) == n):
                    return True;
    return False;",188,Write a python function to check whether the given number can be represented by product of two squares or not.,"['assert prod_Square(25) == False', 'assert prod_Square(30) == False', 'assert prod_Square(16) == True']",[],"def is_product_of_two_squares(n):
    if n < 0:
        return False

    # Check if n is a perfect square
    sqrt_n = int(n**0.5)
    if sqrt_n * sqrt_n == n:
        return True

    # Check if n can be represented as a*b where a and b are squares
    for a in range(1, sqrt_n + 1):
        b_square = n // a
        sqrt_b = int(b_square**0.5)
        if sqrt_b * sqrt_b == b_square:
            return True

    return False",,,,,
Write a python function to find the first missing positive number.,"def first_Missing_Positive(arr,n): 
    ptr = 0
    for i in range(n):
        if arr[i] == 1:
            ptr = 1
            break
    if ptr == 0:
        return(1)
    for i in range(n):
        if arr[i] <= 0 or arr[i] > n:
            arr[i] = 1
    for i in range(n):
        arr[(arr[i] - 1) % n] += n
    for i in range(n):
        if arr[i] <= n:
            return(i + 1)
    return(n + 1)",189,Write a python function to find the first missing positive number.,"['assert first_Missing_Positive([1,2,3,-1,5],5) == 4', 'assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2', 'assert first_Missing_Positive([0,1,2,5,-8],5) == 3']",[],"def first_missing_positive(nums):
    # Remove non-positive numbers and duplicates
    nums = list(set(filter(lambda x: x > 0, nums)))
    
    # Mark the presence of positive numbers using their indices
    for num in nums:
        index = abs(num) - 1
        if 0 <= index < len(nums):
            nums[index] = -abs(nums[index])
    
    # Find the first missing positive number
    for i, num in enumerate(nums):
        if num > 0:
            return i + 1
    
    # If all positive numbers are present, return the length of the list + 1
    return len(nums) + 1",,,,,
Write a python function to count the number of integral co-ordinates that lie inside a square.,"def count_Intgral_Points(x1,y1,x2,y2): 
    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ",190,Write a python function to count the number of integral co-ordinates that lie inside a square.,"['assert count_Intgral_Points(1,1,4,4) == 4', 'assert count_Intgral_Points(1,2,1,2) == 1', 'assert count_Intgral_Points(4,2,6,4) == 1']",[],,,,,,
Write a function to check whether the given month name contains 30 days or not.,"def check_monthnumber(monthname3):
  if monthname3 ==""April"" or monthname3== ""June"" or monthname3== ""September"" or monthname3== ""November"":
    return True
  else:
    return False",191,Write a function to check whether the given month name contains 30 days or not.,"['assert check_monthnumber(""February"")==False', 'assert check_monthnumber(""June"")==True', 'assert check_monthnumber(""April"")==True']",[],"def check_month_days(month):
    months_with_30_days = ['April', 'June', 'September', 'November']
    return month.title() in months_with_30_days",,,,,
Write a python function to check whether a string has atleast one letter and one number.,"def check_String(str): 
    flag_l = False
    flag_n = False
    for i in str: 
        if i.isalpha(): 
            flag_l = True  
        if i.isdigit(): 
            flag_n = True
    return flag_l and flag_n ",192,Write a python function to check whether a string has atleast one letter and one number.,"[""assert check_String('thishasboth29') == True"", ""assert check_String('python') == False"", ""assert check_String ('string') == False""]",[],"def has_letter_and_number(string):
    has_letter = False
    has_number = False

    for char in string:
        if char.isalpha():
            has_letter = True
        elif char.isdigit():
            has_number = True

        if has_letter and has_number:
            return True

    return False",,,,,
Write a function to remove the duplicates from the given tuple.,"def remove_tuple(test_tup):
  res = tuple(set(test_tup))
  return (res) ",193,Write a function to remove the duplicates from the given tuple.,"['assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)', 'assert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)', 'assert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)']",[],,,,,,
Write a python function to convert octal number to decimal number.,"def octal_To_Decimal(n):  
    num = n; 
    dec_value = 0; 
    base = 1; 
    temp = num; 
    while (temp): 
        last_digit = temp % 10; 
        temp = int(temp / 10); 
        dec_value += last_digit*base; 
        base = base * 8; 
    return dec_value; ",194,Write a python function to convert octal number to decimal number.,"['assert octal_To_Decimal(25) == 21', 'assert octal_To_Decimal(30) == 24', 'assert octal_To_Decimal(40) == 32']",[],"def octal_to_decimal(octal_num):
    decimal_num = int(octal_num, 8)
    return decimal_num",,,,,
Write a python function to find the first position of an element in a sorted array.,"def first(arr,x,n): 
    low = 0
    high = n - 1
    res = -1  
    while (low <= high):
        mid = (low + high) // 2 
        if arr[mid] > x:
            high = mid - 1
        elif arr[mid] < x:
            low = mid + 1
        else:
            res = mid
            high = mid - 1
    return res",195,Write a python function to find the first position of an element in a sorted array.,"['assert first([1,2,3,4,5,6,6],6,6) == 5', 'assert first([1,2,2,2,3,2,2,4,2],2,9) == 1', 'assert first([1,2,3],1,3) == 0']",[],"def find_first_position(arr, target):
    left, right = 0, len(arr) - 1
    first_position = -1

    while left <= right:
        mid = (left + right) // 2

        if arr[mid] == target:
            first_position = mid
            right = mid - 1  # Continue searching to the left for the first occurrence
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    return first_position",,,,,
Write a function to remove all the tuples with length k.,"def remove_tuples(test_list, K):
  res = [ele for ele in test_list if len(ele) != K]
  return (res) ",196,Write a function to remove all the tuples with length k.,"['assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]', 'assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]', 'assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]']",[],,,,,,
Write a function to perform the exponentiation of the given two tuples.,"def find_exponentio(test_tup1, test_tup2):
  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res)
",197,Write a function to perform the exponentiation of the given two tuples.,"['assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)', 'assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)', 'assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)']",[],"def tuple_exponentiation(base_tuple, exp_tuple):
    # Convert tuples to integers
    base = int(''.join(map(str, base_tuple)))
    exp = int(''.join(map(str, exp_tuple)))

    # Perform exponentiation
    result = base ** exp

    # Convert the result back to a tuple of digits
    result_tuple = tuple(map(int, str(result)))

    return result_tuple",,,,,
Write a function to find the largest triangle that can be inscribed in an ellipse.,"import math
def largest_triangle(a,b): 
    if (a < 0 or b < 0): 
        return -1 
    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  
    return area ",198,Write a function to find the largest triangle that can be inscribed in an ellipse.,"['assert largest_triangle(4,2)==10.392304845413264', 'assert largest_triangle(5,7)==4.639421805988064', 'assert largest_triangle(9,1)==105.2220865598093']",[],"import math

def largest_inscribed_triangle(a, b):
    """"""
    Finds the largest triangle that can be inscribed in an ellipse with semi-axes a and b.
    
    :param a: The length of the semi-major axis of the ellipse.
    :param b: The length of the semi-minor axis of the ellipse.
    :return: The area of the largest inscribed triangle.
    """"""
    # Calculate the eccentricity of the ellipse
    e = math.sqrt(1 - (b**2 / a**2))
    
    # Calculate the angle of the largest inscribed triangle
    theta = math.acos(e / 3)
    
    # Calculate the area of the largest inscribed triangle
    area = (3 * math.sqrt(3) / 4) * (a * b) * (math.sin(theta) ** 2)
    
    return area",,,,,
Write a python function to find highest power of 2 less than or equal to given number.,"def highest_Power_of_2(n): 
    res = 0; 
    for i in range(n, 0, -1):  
        if ((i & (i - 1)) == 0): 
            res = i; 
            break;      
    return res; ",199,Write a python function to find highest power of 2 less than or equal to given number.,"['assert highest_Power_of_2(10) == 8', 'assert highest_Power_of_2(19) == 16', 'assert highest_Power_of_2(32) == 32']",[],"def highest_power_of_2(n):
    power = 0
    while 2 ** power <= n:
        power += 1
    return 2 ** (power - 1)",,,,,
Write a function to find all index positions of the maximum values in a given list.,"def position_max(list1):
    max_val = max(list1)
    max_result = [i for i, j in enumerate(list1) if j == max_val]
    return max_result",200,Write a function to find all index positions of the maximum values in a given list.,"['assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]', 'assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]', 'assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]']",[],"def find_max_index_positions(lst):
    max_value = max(lst)
    max_positions = [i for i, value in enumerate(lst) if value == max_value]
    return max_positions",,,,,
Write a python function to check whether the elements in a list are same or not.,"def chkList(lst): 
    return len(set(lst)) == 1",201,Write a python function to check whether the elements in a list are same or not.,"[""assert chkList(['one','one','one']) == True"", ""assert chkList(['one','Two','Three']) == False"", ""assert chkList(['bigdata','python','Django']) == False""]",[],"def are_elements_same(lst):
    if not lst:  # Check if the list is empty
        return True  # Empty list is considered to have all elements the same

    first_element = lst[0]  # Get the first element
    return all(elem == first_element for elem in lst)  # Check if all elements are equal to the first element",,,,,
Write a function to remove even characters in a string.,"def remove_even(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 != 0):
        str2 = str2 + str1[i - 1]
 return str2",202,Write a function to remove even characters in a string.,"['assert remove_even(""python"")==(""pto"")', 'assert remove_even(""program"")==(""porm"")', 'assert remove_even(""language"")==(""lnug"")']",[],,,,,,
Write a python function to find the hamming distance between given two integers.,"def hamming_Distance(n1,n2) : 
    x = n1 ^ n2  
    setBits = 0
    while (x > 0) : 
        setBits += x & 1
        x >>= 1
    return setBits  ",203,Write a python function to find the hamming distance between given two integers.,"['assert hamming_Distance(4,8) == 2', 'assert hamming_Distance(2,4) == 2', 'assert hamming_Distance(1,2) == 2']",[],,,,,,
Write a python function to count the occurrence of a given character in a string.,"def count(s,c) : 
    res = 0 
    for i in range(len(s)) : 
        if (s[i] == c): 
            res = res + 1
    return res ",204,Write a python function to count the occurrence of a given character in a string.,"['assert count(""abcc"",""c"") == 2', 'assert count(""ababca"",""a"") == 3', 'assert count(""mnmm0pm"",""m"") == 4']",[],"def count_character_occurrences(string, character):
    count = 0
    for char in string:
        if char == character:
            count += 1
    return count",,,,,
Write a function to find the inversions of tuple elements in the given tuple list.,"def inversion_elements(test_tup):
  res = tuple(list(map(lambda x: ~x, list(test_tup))))
  return (res) ",205,Write a function to find the inversions of tuple elements in the given tuple list.,"['assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)', 'assert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)', 'assert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)']",[],"def find_inversions(tuples_list):
    inversions = []
    
    for tuple_ in tuples_list:
        inversions_in_tuple = []
        for i in range(len(tuple_)):
            for j in range(i + 1, len(tuple_)):
                if tuple_[i] > tuple_[j]:
                    inversions_in_tuple.append((tuple_[i], tuple_[j]))
        inversions.append(inversions_in_tuple)
    
    return inversions",,,,,
Write a function to perform the adjacent element concatenation in the given tuples.,"def concatenate_elements(test_tup):
  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ",206,Write a function to perform the adjacent element concatenation in the given tuples.,"['assert concatenate_elements((""DSP "", ""IS "", ""BEST "", ""FOR "", ""ALL "", ""UTS"")) == (\'DSP IS \', \'IS BEST \', \'BEST FOR \', \'FOR ALL \', \'ALL UTS\')', 'assert concatenate_elements((""RES "", ""IS "", ""BEST "", ""FOR "", ""ALL "", ""QESR"")) == (\'RES IS \', \'IS BEST \', \'BEST FOR \', \'FOR ALL \', \'ALL QESR\')', 'assert concatenate_elements((""MSAM"", ""IS "", ""BEST "", ""FOR "", ""ALL "", ""SKD"")) == (\'MSAMIS \', \'IS BEST \', \'BEST FOR \', \'FOR ALL \', \'ALL SKD\')']",[],,,,,,
Write a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.,"def find_longest_repeating_subseq(str): 
	n = len(str) 
	dp = [[0 for k in range(n+1)] for l in range(n+1)] 
	for i in range(1, n+1): 
		for j in range(1, n+1): 
			if (str[i-1] == str[j-1] and i != j): 
				dp[i][j] = 1 + dp[i-1][j-1] 
			else: 
				dp[i][j] = max(dp[i][j-1], dp[i-1][j]) 
	return dp[n][n]",207,Write a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.,"['assert find_longest_repeating_subseq(""AABEBCDD"") == 3', 'assert find_longest_repeating_subseq(""aabb"") == 2', 'assert find_longest_repeating_subseq(""aab"") == 1']",[],"def count_longest_repeating_subsequences(sequence):
    def is_valid_subsequence(sub1, sub2):
        if len(sub1) != len(sub2):
            return False
        for i in range(len(sub1)):
            if sub1[i] == sub2[i]:
                return False
        return True

    def find_longest_repeating_subsequences(seq):
        n = len(seq)
        max_length = 0
        count = 0

        for i in range(n):
            for j in range(i + 1, n):
                sub1 = seq[i:j]
                for k in range(j + 1, n + 1):
                    sub2 = seq[j:k]
                    if len(sub1) == len(sub2) and is_valid_subsequence(sub1, sub2):
                        length = len(sub1)
                        if length > max_length:
                            max_length = length
                            count = 1
                        elif length == max_length:
                            count += 1

        return count

    return find_longest_repeating_subsequences(sequence)",,,,,
Write a function to check the given decimal with a precision of 2 by using regex.,"import re
def is_decimal(num):
  num_fetch = re.compile(r""""""^[0-9]+(\.[0-9]{1,2})?$"""""")
  result = num_fetch.search(num)
  return bool(result)",208,Write a function to check the given decimal with a precision of 2 by using regex.,"[""assert is_decimal('123.11') == True"", ""assert is_decimal('0.21') == True"", ""assert is_decimal('123.1214') == False""]",[],"import re

def check_decimal_precision(decimal):
    pattern = r'^-?\d+(\.\d{1,2})?$'
    return bool(re.match(pattern, decimal))
print(check_decimal_precision('123.11'))  # True
print(check_decimal_precision('0.21'))    # True
print(check_decimal_precision('123.1214'))  # False",,,,,
Write a function to delete the smallest element from the given heap and then insert a new item.,"import heapq as hq
def heap_replace(heap,a):
  hq.heapify(heap)
  hq.heapreplace(heap, a)
  return heap",209,Write a function to delete the smallest element from the given heap and then insert a new item.,"['assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]', 'assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]', 'assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]']",[],"import heapq

def delete_smallest_and_insert(heap, new_item):
    # Delete the smallest element from the heap
    smallest = heapq.heappop(heap)
    
    # Insert the new item into the heap
    heapq.heappush(heap, new_item)
    
    return heap",,,,,
"Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.","import re
def is_allowed_specific_char(string):
    get_char = re.compile(r'[^a-zA-Z0-9.]')
    string = get_char.search(string)
    return not bool(string)",210,"Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.","['assert is_allowed_specific_char(""ABCDEFabcdef123450"") == True', 'assert is_allowed_specific_char(""*&%@#!}{"") == False', 'assert is_allowed_specific_char(""HELLOhowareyou98765"") == True']",[],"import re

def check_string_characters(string):
    pattern = r'^[a-zA-Z0-9]+$'
    if re.match(pattern, string):
        return True
    else:
        return False",,,,,
Write a python function to count numbers whose oth and nth bits are set.,"def count_Num(n): 
    if (n == 1): 
        return 1
    count = pow(2,n - 2) 
    return count ",211,Write a python function to count numbers whose oth and nth bits are set.,"['assert count_Num(2) == 1', 'assert count_Num(3) == 2', 'assert count_Num(1) == 1']",[],,,,,,
Write a python function to find the sum of fourth power of n natural numbers.,"import math  
def fourth_Power_Sum(n): 
    sum = 0
    for i in range(1,n+1) : 
        sum = sum + (i*i*i*i) 
    return sum",212,Write a python function to find the sum of fourth power of n natural numbers.,"['assert fourth_Power_Sum(2) == 17', 'assert fourth_Power_Sum(4) == 354', 'assert fourth_Power_Sum(6) == 2275']",[],,,,,,
Write a function to perform the concatenation of two string tuples.,"def concatenate_strings(test_tup1, test_tup2):
  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ",213,Write a function to perform the concatenation of two string tuples.,"['assert concatenate_strings((""Manjeet"", ""Nikhil"", ""Akshat""), ("" Singh"", "" Meherwal"", "" Garg"")) == (\'Manjeet Singh\', \'Nikhil Meherwal\', \'Akshat Garg\')', 'assert concatenate_strings((""Shaik"", ""Ayesha"", ""Sanya""), ("" Dawood"", "" Begum"", "" Singh"")) == (\'Shaik Dawood\', \'Ayesha Begum\', \'Sanya Singh\')', 'assert concatenate_strings((""Harpreet"", ""Priyanka"", ""Muskan""), (""Kour"", "" Agarwal"", ""Sethi"")) == (\'HarpreetKour\', \'Priyanka Agarwal\', \'MuskanSethi\')']",[],,,,,,
Write a function to convert radians to degrees.,"import math
def degree_radian(radian):
 degree = radian*(180/math.pi)
 return degree",214,Write a function to convert radians to degrees.,"['assert degree_radian(90)==5156.620156177409', 'assert degree_radian(60)==3437.746770784939', 'assert degree_radian(120)==6875.493541569878']",[],"def radians_to_degrees(radians):
    return radians * (180 / math.pi)",,,,,
Write a function to decode a run-length encoded given list.,"def decode_list(alist):
    def aux(g):
        if isinstance(g, list):
            return [(g[1], range(g[0]))]
        else:
            return [(g, [0])]
    return [x for g in alist for x, R in aux(g) for i in R]",215,Write a function to decode a run-length encoded given list.,"['assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]', ""assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']"", ""assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']""]",[],,,,,,
Write a function to check if a nested list is a subset of another nested list.,"def check_subset_list(list1, list2): 
    l1, l2 = list1[0], list2[0] 
    exist = True
    for i in list2: 
        if i not in list1: 
            exist = False
    return exist ",216,Write a function to check if a nested list is a subset of another nested list.,"['assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False', 'assert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True', ""assert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False""]",[],"def is_nested_subset(subset, superset):
    if not isinstance(subset, list) or not isinstance(superset, list):
        return False

    def is_sublist(sublist, superlist):
        for item in sublist:
            if isinstance(item, list):
                if not any(is_sublist(item, sub) for sub in superlist):
                    return False
            elif item not in superlist:
                return False
        return True

    return is_sublist(subset, superset)",,,,,
Write a python function to find the first repeated character in a given string.,"def first_Repeated_Char(str): 
    h = {}
    for ch in str:
        if ch in h: 
            return ch;
        else: 
            h[ch] = 0
    return '\0'",217,Write a python function to find the first repeated character in a given string.,"['assert first_Repeated_Char(""Google"") == ""o""', 'assert first_Repeated_Char(""data"") == ""a""', 'assert first_Repeated_Char(""python"") == \'\\0\'']",[],"def find_first_repeated_character(string):
    char_dict = {}
    for char in string:
        if char in char_dict:
            return char
        char_dict[char] = True
    return None",,,,,
Write a python function to find the minimum operations required to make two numbers equal.,"import math   
def min_Operations(A,B):  
    if (A > B): 
        swap(A,B)  
    B = B // math.gcd(A,B);  
    return B - 1",218,Write a python function to find the minimum operations required to make two numbers equal.,"['assert min_Operations(2,4) == 1', 'assert min_Operations(4,10) == 4', 'assert min_Operations(1,4) == 3']",[],"def min_operations_to_equalize(num1, num2):
    # Ensure num1 is the larger number
    if num1 < num2:
        num1, num2 = num2, num1

    # Calculate the difference between the two numbers
    diff = num1 - num2

    # Calculate the sum of digits in the difference
    digit_sum = sum(int(digit) for digit in str(diff))

    # Calculate the minimum number of operations
    operations = (diff // 9) * 9 + digit_sum

    return operations",,,,,
Write a function to extract maximum and minimum k elements in the given tuple.,"
def extract_min_max(test_tup, K):
  res = []
  test_tup = list(test_tup)
  temp = sorted(test_tup)
  for idx, val in enumerate(temp):
    if idx < K or idx >= len(temp) - K:
      res.append(val)
  res = tuple(res)
  return (res) ",219,Write a function to extract maximum and minimum k elements in the given tuple.,"['assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)', 'assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)', 'assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)']",[],"def extract_max_min_k_elements(input_tuple, k):
    # Convert the tuple to a list for easier manipulation
    elements = list(input_tuple)
    
    # Sort the list in ascending order
    elements.sort()
    
    # Calculate the indices of the max and min elements to extract
    max_index = len(elements) - k
    min_index = 0
    
    # Extract the max and min elements
    max_elements = elements[max_index:]
    min_elements = elements[:k]
    
    # Return the extracted elements as a tuple
    return max_elements, min_elements",,,,,
"Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.","import re
def replace_max_specialchar(text,n):
 return (re.sub(""[ ,.]"", "":"", text, n))",220,"Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.","[""assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')"", ""assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')"", ""assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')""]",[],"def replace_max_occurrences(input_string, max_occurrences):
    replacements = 0
    output_string = """"
    for char in input_string:
        if char in [' ', ',', '.'] and replacements < max_occurrences:
            output_string += ':'
            replacements += 1
        else:
            output_string += char
    return output_string",,,,,
Write a python function to find the first even number in a given list of numbers.,"def first_even(nums):
    first_even = next((el for el in nums if el%2==0),-1)
    return first_even",221,Write a python function to find the first even number in a given list of numbers.,"['assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4', 'assert first_even([2, 3, 4]) == 2', 'assert first_even([5, 6, 7]) == 6']",[],,,,,,
Write a function to check if all the elements in tuple have same data type or not.,"def check_type(test_tuple):
  res = True
  for ele in test_tuple:
    if not isinstance(ele, type(test_tuple[0])):
      res = False
      break
  return (res) ",222,Write a function to check if all the elements in tuple have same data type or not.,"['assert check_type((5, 6, 7, 3, 5, 6) ) == True', 'assert check_type((1, 2, ""4"") ) == False', 'assert check_type((3, 2, 1, 4, 5) ) == True']",[],,,,,,
Write a function to check for majority element in the given sorted array.,"def is_majority(arr, n, x):
	i = binary_search(arr, 0, n-1, x)
	if i == -1:
		return False
	if ((i + n//2) <= (n -1)) and arr[i + n//2] == x:
		return True
	else:
		return False
def binary_search(arr, low, high, x):
	if high >= low:
		mid = (low + high)//2 
		if (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):
			return mid
		elif x > arr[mid]:
			return binary_search(arr, (mid + 1), high, x)
		else:
			return binary_search(arr, low, (mid -1), x)
	return -1",223,Write a function to check for majority element in the given sorted array.,"['assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True', 'assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False', 'assert is_majority([1, 1, 1, 2, 2], 5, 1) == True']",[],"def has_majority_element(arr):
    if not arr:
        return False

    count = 1
    majority_index = 0

    for i in range(1, len(arr)):
        if arr[i] == arr[majority_index]:
            count += 1
        else:
            count -= 1

        if count == 0:
            majority_index = i
            count = 1

    return count > 0",,,,,
Write a python function to count set bits of a given number.,"def count_Set_Bits(n): 
    count = 0
    while (n): 
        count += n & 1
        n >>= 1
    return count ",224,Write a python function to count set bits of a given number.,"['assert count_Set_Bits(2) == 1', 'assert count_Set_Bits(4) == 1', 'assert count_Set_Bits(6) == 2']",[],,,,,,
Write a python function to find the minimum element in a sorted and rotated array.,"def find_Min(arr,low,high): 
    while (low < high): 
        mid = low + (high - low) // 2;   
        if (arr[mid] == arr[high]): 
            high -= 1; 
        elif (arr[mid] > arr[high]): 
            low = mid + 1; 
        else: 
            high = mid; 
    return arr[high]; ",225,Write a python function to find the minimum element in a sorted and rotated array.,"['assert find_Min([1,2,3,4,5],0,4) == 1', 'assert find_Min([4,6,8],0,2) == 4', 'assert find_Min([2,3,5,7,9],0,4) == 2']",[],"def find_min_in_rotated_array(nums):
    left, right = 0, len(nums) - 1
    
    while left < right:
        mid = (left + right) // 2
        
        # If the middle element is greater than the right element,
        # the minimum element is in the right half of the array.
        if nums[mid] > nums[right]:
            left = mid + 1
        # If the middle element is less than the right element,
        # the minimum element is either the middle element itself or in the left half of the array.
        else:
            right = mid
    
    # left and right will be the same when the loop terminates,
    # pointing to the minimum element in the rotated array.
    return nums[left]",,,,,
Write a python function to remove the characters which have odd index values of a given string.,"def odd_values_string(str):
  result = """" 
  for i in range(len(str)):
    if i % 2 == 0:
      result = result + str[i]
  return result",226,Write a python function to remove the characters which have odd index values of a given string.,"[""assert odd_values_string('abcdef') == 'ace'"", ""assert odd_values_string('python') == 'pto'"", ""assert odd_values_string('data') == 'dt'""]",[],"def remove_odd_index_chars(string):
    return ''.join(string[i] for i in range(len(string)) if i % 2 == 0)",,,,,
Write a function to find minimum of three numbers.,"def min_of_three(a,b,c): 
      if (a <= b) and (a <= c): 
        smallest = a 
      elif (b <= a) and (b <= c): 
        smallest = b 
      else: 
        smallest = c 
      return smallest ",227,Write a function to find minimum of three numbers.,"['assert min_of_three(10,20,0)==0', 'assert min_of_three(19,15,18)==15', 'assert min_of_three(-10,-20,-30)==-30']",[],"def find_minimum_of_three(num1, num2, num3):
    return min(num1, num2, num3)",,,,,
Write a python function to check whether all the bits are unset in the given range or not.,"def all_Bits_Set_In_The_Given_Range(n,l,r):  
    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) 
    new_num = n & num
    if (new_num == 0): 
        return True
    return False",228,Write a python function to check whether all the bits are unset in the given range or not.,"['assert all_Bits_Set_In_The_Given_Range(4,1,2) == True', 'assert all_Bits_Set_In_The_Given_Range(17,2,4) == True', 'assert all_Bits_Set_In_The_Given_Range(39,4,6) == False']",[],,,,,,
Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.,"def re_arrange_array(arr, n):
  j=0
  for i in range(0, n):
    if (arr[i] < 0):
      temp = arr[i]
      arr[i] = arr[j]
      arr[j] = temp
      j = j + 1
  return arr",229,Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.,"['assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]', 'assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]', 'assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]']",[],"def rearrange_array(arr):
    # Separate negative and positive elements
    negative = [x for x in arr if x < 0]
    positive = [x for x in arr if x >= 0]
    
    # Concatenate the lists in the desired order
    return negative + positive",,,,,
Write a function to replace blank spaces with any character in a string.,"def replace_blank(str1,char):
 str2 = str1.replace(' ', char)
 return str2",230,Write a function to replace blank spaces with any character in a string.,"['assert replace_blank(""hello people"",\'@\')==(""hello@people"")', 'assert replace_blank(""python program language"",\'$\')==(""python$program$language"")', 'assert replace_blank(""blank space"",""-"")==(""blank-space"")']",[],"def replace_blank_spaces(string, replacement_char):
    return string.replace(' ', replacement_char)",,,,,
Write a function to find the maximum sum in the given right triangle of numbers.,"def max_sum(tri, n): 
	if n > 1: 
		tri[1][1] = tri[1][1]+tri[0][0] 
		tri[1][0] = tri[1][0]+tri[0][0] 
	for i in range(2, n): 
		tri[i][0] = tri[i][0] + tri[i-1][0] 
		tri[i][i] = tri[i][i] + tri[i-1][i-1] 
		for j in range(1, i): 
			if tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: 
				tri[i][j] = tri[i][j] + tri[i-1][j-1] 
			else: 
				tri[i][j] = tri[i][j]+tri[i-1][j] 
	return (max(tri[n-1]))",231,Write a function to find the maximum sum in the given right triangle of numbers.,"['assert max_sum([[1], [2,1], [3,3,2]], 3) == 6', 'assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 ', 'assert max_sum([[2], [3,2], [13,23,12]], 3) == 28']",[],,,,,,
Write a function to get the n largest items from a dataset.,"import heapq
def larg_nnum(list1,n):
 largest=heapq.nlargest(n,list1)
 return largest",232,Write a function to get the n largest items from a dataset.,"['assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]', 'assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]', 'assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]']",[],"def get_n_largest(dataset, n):
    return sorted(dataset, reverse=True)[:n]",,,,,
Write a function to find the lateral surface area of a cylinder.,"def lateralsuface_cylinder(r,h):
  lateralsurface= 2*3.1415*r*h
  return lateralsurface",233,Write a function to find the lateral surface area of a cylinder.,"['assert lateralsuface_cylinder(10,5)==314.15000000000003', 'assert lateralsuface_cylinder(4,5)==125.66000000000001', 'assert lateralsuface_cylinder(4,10)==251.32000000000002']",[],"import math

def lateral_surface_area_cylinder(radius, height):
    """"""
    Calculate the lateral surface area of a cylinder.
    
    :param radius: The radius of the cylinder.
    :param height: The height of the cylinder.
    :return: The lateral surface area of the cylinder.
    """"""
    return 2 * math.pi * radius * height",,,,,
Write a function to find the volume of a cube.,"def volume_cube(l):
  volume = l * l * l
  return volume",234,Write a function to find the volume of a cube.,"['assert volume_cube(3)==27', 'assert volume_cube(2)==8', 'assert volume_cube(5)==125']",[],"def volume_of_cube(side_length):
    return side_length ** 3",,,,,
Write a python function to set all even bits of a given number.,"def even_bit_set_number(n): 
    count = 0;res = 0;temp = n 
    while(temp > 0): 
        if (count % 2 == 1): 
            res |= (1 << count)
        count+=1
        temp >>= 1
    return (n | res) ",235,Write a python function to set all even bits of a given number.,"['assert even_bit_set_number(10) == 10', 'assert even_bit_set_number(20) == 30', 'assert even_bit_set_number(30) == 30']",[],"def set_even_bits(number):
    # Convert the number to binary string representation
    binary_str = bin(number)[2:]

    # Pad the binary string with leading zeros to ensure it has an even length
    length = len(binary_str)
    if length % 2 != 0:
        binary_str = '0' + binary_str

    # Iterate over the even indices (0-based) and set the corresponding bits to 1
    for i in range(0, len(binary_str), 2):
        binary_str = binary_str[:i] + '1' + binary_str[i+1:]

    # Convert the modified binary string back to an integer
    result = int(binary_str, 2)

    return result",,,,,
Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.,"def No_of_Triangle(N,K):
    if (N < K):
        return -1;
    else:
        Tri_up = 0;
        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;
        Tri_down = 0;
        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;
        return Tri_up + Tri_down;",236,Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.,"['assert No_of_Triangle(4,2) == 7', 'assert No_of_Triangle(4,3) == 3', 'assert No_of_Triangle(1,3) == -1']",[],,,,,,
Write a function to check the occurrences of records which occur similar times in the given tuples.,"from collections import Counter 
def check_occurences(test_list):
  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))
  return  (res) ",237,Write a function to check the occurrences of records which occur similar times in the given tuples.,"['assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}', 'assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}', 'assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}']",[],,,,,,
Write a python function to count number of non-empty substrings of a given string.,"def number_of_substrings(str): 
	str_len = len(str); 
	return int(str_len * (str_len + 1) / 2); ",238,Write a python function to count number of non-empty substrings of a given string.,"['assert number_of_substrings(""abc"") == 6', 'assert number_of_substrings(""abcd"") == 10', 'assert number_of_substrings(""abcde"") == 15']",[],"def count_non_empty_substrings(s):
    count = 0
    length = len(s)
    
    for i in range(length):
        for j in range(i + 1, length + 1):
            substring = s[i:j]
            if substring:
                count += 1
    
    return count",,,,,
Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.,"def get_total_number_of_sequences(m,n): 
	T=[[0 for i in range(n+1)] for i in range(m+1)] 
	for i in range(m+1): 
		for j in range(n+1): 
			if i==0 or j==0: 
				T[i][j]=0
			elif i<j: 
				T[i][j]=0
			elif j==1: 
				T[i][j]=i 
			else: 
				T[i][j]=T[i-1][j]+T[i//2][j-1] 
	return T[m][n]",239,Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.,"['assert get_total_number_of_sequences(10, 4) == 4', 'assert get_total_number_of_sequences(5, 2) == 6', 'assert get_total_number_of_sequences(16, 3) == 84']",[],"def count_sequences(n, m):
    # Create a 2D matrix to store the counts of sequences
    # with length from 1 to n and ending with a value from 1 to m
    matrix = [[0] * (m + 1) for _ in range(n + 1)]

    # Initialize the first row with 1s, as there is only one sequence of length 1
    # ending with any value from 1 to m
    for j in range(1, m + 1):
        matrix[1][j] = 1

    # Iterate over the matrix to fill in the counts
    for i in range(2, n + 1):
        for j in range(1, m + 1):
            # Count the number of sequences ending with j for length i
            # by summing the counts of sequences ending with values from j/2 to j-1
            # for length i-1 (if j is even, start from j/2+1)
            start = j // 2 + (j % 2)
            matrix[i][j] = sum(matrix[i - 1][k] for k in range(start, j))

    # The total number of sequences of length n is the sum of the last row
    return sum(matrix[n])

# Example usage
print(count_sequences(10, 4))  # Output: 4
print(count_sequences(5, 2))  # Output: 6
print(count_sequences(16, 3))  # Output: 84",,,,,
Write a function to replace the last element of the list with another list.,"def replace_list(list1,list2):
 list1[-1:] = list2
 replace_list=list1
 return replace_list
",240,Write a function to replace the last element of the list with another list.,"['assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]', 'assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]', 'assert replace_list([""red"",""blue"",""green""],[""yellow""])==[""red"",""blue"",""yellow""]']",[],"def replace_last_element(lst, new_lst):
    if not lst or not new_lst:
        return lst  # Return the original list if either is empty

    lst[-1] = new_lst
    return lst",,,,,
Write a function to generate a 3d array having each element as '*'.,"def array_3d(m,n,o):
 array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]
 return array_3d",241,Write a function to generate a 3d array having each element as '*'.,"[""assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]"", ""assert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]"", ""assert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]""]",[],,,,,,
Write a function to count total characters in a string.,"def count_charac(str1):
 total = 0
 for i in str1:
    total = total + 1
 return total",242,Write a function to count total characters in a string.,"['assert count_charac(""python programming"")==18', 'assert count_charac(""language"")==8', 'assert count_charac(""words"")==5']",[],,,,,,
Write a function to sort the given list based on the occurrence of first element of tuples.,"def sort_on_occurence(lst): 
	dct = {} 
	for i, j in lst: 
		dct.setdefault(i, []).append(j) 
	return ([(i, *dict.fromkeys(j), len(j)) 
				for i, j in dct.items()]) ",243,Write a function to sort the given list based on the occurrence of first element of tuples.,"[""assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]"", ""assert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]"", ""assert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]""]",[],"from collections import Counter

def sort_list_by_occurrence(lst):
    # Count the occurrence of the first element of each tuple
    occurrences = Counter(tup[0] for tup in lst)
    
    # Sort the list based on the occurrence count in descending order
    sorted_lst = sorted(lst, key=lambda tup: occurrences[tup[0]], reverse=True)
    
    return sorted_lst",,,,,
Write a python function to find the next perfect square greater than a given number.,"import math  
def next_Perfect_Square(N): 
    nextN = math.floor(math.sqrt(N)) + 1
    return nextN * nextN ",244,Write a python function to find the next perfect square greater than a given number.,"['assert next_Perfect_Square(35) == 36', 'assert next_Perfect_Square(6) == 9', 'assert next_Perfect_Square(9) == 16']",[],,,,,,
Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.,"def max_sum(arr, n): 
	MSIBS = arr[:] 
	for i in range(n): 
		for j in range(0, i): 
			if arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: 
				MSIBS[i] = MSIBS[j] + arr[i] 
	MSDBS = arr[:] 
	for i in range(1, n + 1): 
		for j in range(1, i): 
			if arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: 
				MSDBS[-i] = MSDBS[-j] + arr[-i] 
	max_sum = float(""-Inf"") 
	for i, j, k in zip(MSIBS, MSDBS, arr): 
		max_sum = max(max_sum, i + j - k) 
	return max_sum",245,Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.,"['assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194', 'assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210', 'assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138']",[],"def max_bi_tonic_sum(arr):
    n = len(arr)
    if n <= 2:
        return sum(arr)

    # Initialize the tables for the increasing and decreasing subsequences
    increasing = [0] * n
    decreasing = [0] * n

    # Fill the increasing table
    increasing[0] = arr[0]
    for i in range(1, n):
        increasing[i] = max(arr[i], increasing[i - 1] + arr[i])

    # Fill the decreasing table
    decreasing[n - 1] = arr[n - 1]
    for i in range(n - 2, -1, -1):
        decreasing[i] = max(arr[i], decreasing[i + 1] + arr[i])

    # Find the maximum sum of a bi-tonic subsequence
    max_sum = 0
    for i in range(n):
        max_sum = max(max_sum, increasing[i] + decreasing[i])

    return max_sum",,,,,
Write a function for computing square roots using the babylonian method.,"def babylonian_squareroot(number):
    if(number == 0):
        return 0;
    g = number/2.0;
    g2 = g + 1;
    while(g != g2):
        n = number/ g;
        g2 = g;
        g = (g + n)/2;
    return g;",246,Write a function for computing square roots using the babylonian method.,"['assert babylonian_squareroot(10)==3.162277660168379', 'assert babylonian_squareroot(2)==1.414213562373095', 'assert babylonian_squareroot(9)==3.0']",[],"def babylonian_sqrt(n, epsilon=1e-10):
    """"""
    Compute the square root of a number using the Babylonian method.
    
    Parameters:
    n (float): The number to compute the square root of.
    epsilon (float, optional): The precision threshold for convergence. Defaults to 1e-10.
    
    Returns:
    float: The approximate square root of n.
    """"""
    if n < 0:
        raise ValueError(""Cannot compute the square root of a negative number."")
    
    x = n
    while abs(x * x - n) > epsilon:
        x = (x + n / x) / 2
    
    return x",,,,,
Write a function to find the longest palindromic subsequence in the given string.,"def lps(str): 
	n = len(str) 
	L = [[0 for x in range(n)] for x in range(n)] 
	for i in range(n): 
		L[i][i] = 1
	for cl in range(2, n+1): 
		for i in range(n-cl+1): 
			j = i+cl-1
			if str[i] == str[j] and cl == 2: 
				L[i][j] = 2
			elif str[i] == str[j]: 
				L[i][j] = L[i+1][j-1] + 2
			else: 
				L[i][j] = max(L[i][j-1], L[i+1][j]); 
	return L[0][n-1]",247,Write a function to find the longest palindromic subsequence in the given string.,"['assert lps(""TENS FOR TENS"") == 5 ', 'assert lps(""CARDIO FOR CARDS"") == 7', 'assert lps(""PART OF THE JOURNEY IS PART"") == 9 ']",[],,,,,,
Write a function to calculate the harmonic sum of n-1.,"def harmonic_sum(n):
  if n < 2:
    return 1
  else:
    return 1 / n + (harmonic_sum(n - 1)) ",248,Write a function to calculate the harmonic sum of n-1.,"['assert harmonic_sum(7) == 2.5928571428571425', 'assert harmonic_sum(4) == 2.083333333333333', 'assert harmonic_sum(19) == 3.547739657143682']",[],"def harmonic_sum(n):
    sum = 0
    for i in range(1, n):
        sum += 1 / i
    return sum",,,,,
Write a function to find the intersection of two arrays using lambda function.,"def intersection_array(array_nums1,array_nums2):
 result = list(filter(lambda x: x in array_nums1, array_nums2)) 
 return result",249,Write a function to find the intersection of two arrays using lambda function.,"['assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]', 'assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]', 'assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]']",[],"def find_intersection(arr1, arr2):
    return list(filter(lambda x: x in arr2, arr1))",,,,,
Write a python function to count the occcurences of an element in a tuple.,"def count_X(tup, x): 
    count = 0
    for ele in tup: 
        if (ele == x): 
            count = count + 1
    return count ",250,Write a python function to count the occcurences of an element in a tuple.,"['assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0', 'assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3', 'assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4']",[],"def count_element_in_tuple(tup, element):
    count = 0
    for item in tup:
        if item == element:
            count += 1
    return count",,,,,
Write a function to insert an element before each element of a list.,"def insert_element(list,element):
 list = [v for elt in list for v in (element, elt)]
 return list",251,Write a function to insert an element before each element of a list.,"[""assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] "", ""assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] "", ""assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] ""]",[],,,,,,
Write a python function to convert complex numbers to polar coordinates.,"import cmath  
def convert(numbers):    
  num = cmath.polar(numbers)  
  return (num) ",252,Write a python function to convert complex numbers to polar coordinates.,"['assert convert(1) == (1.0, 0.0)', 'assert convert(4) == (4.0,0.0)', 'assert convert(5) == (5.0,0.0)']",[],"import cmath

def complex_to_polar(complex_num):
    magnitude = cmath.sqrt(complex_num.real**2 + complex_num.imag**2)
    angle = cmath.phase(complex_num)
    return magnitude, angle",,,,,
Write a python function to count integers from a given list.,"def count_integer(list1):
    ctr = 0
    for i in list1:
        if isinstance(i, int):
            ctr = ctr + 1
    return ctr",253,Write a python function to count integers from a given list.,"[""assert count_integer([1,2,'abc',1.2]) == 2"", 'assert count_integer([1,2,3]) == 3', 'assert count_integer([1,1.2,4,5.1]) == 2']",[],"def count_integers(lst):
    count = 0
    for item in lst:
        if isinstance(item, int):
            count += 1
    return count",,,,,
Write a function to find all words starting with 'a' or 'e' in a given string.,"import re
def words_ae(text):
 list = re.findall(""[ae]\w+"", text)
 return list",254,Write a function to find all words starting with 'a' or 'e' in a given string.,"['assert words_ae(""python programe"")==[\'ame\']', 'assert words_ae(""python programe language"")==[\'ame\',\'anguage\']', 'assert words_ae(""assert statement"")==[\'assert\', \'atement\']']",[],,,,,,
Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.,"from itertools import combinations_with_replacement 
def combinations_colors(l, n):
    return list(combinations_with_replacement(l,n))",255,Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.,"['assert combinations_colors( [""Red"",""Green"",""Blue""],1)==[(\'Red\',), (\'Green\',), (\'Blue\',)]', 'assert combinations_colors( [""Red"",""Green"",""Blue""],2)==[(\'Red\', \'Red\'), (\'Red\', \'Green\'), (\'Red\', \'Blue\'), (\'Green\', \'Green\'), (\'Green\', \'Blue\'), (\'Blue\', \'Blue\')]', 'assert combinations_colors( [""Red"",""Green"",""Blue""],3)==[(\'Red\', \'Red\', \'Red\'), (\'Red\', \'Red\', \'Green\'), (\'Red\', \'Red\', \'Blue\'), (\'Red\', \'Green\', \'Green\'), (\'Red\', \'Green\', \'Blue\'), (\'Red\', \'Blue\', \'Blue\'), (\'Green\', \'Green\', \'Green\'), (\'Green\', \'Green\', \'Blue\'), (\'Green\', \'Blue\', \'Blue\'), (\'Blue\', \'Blue\', \'Blue\')]']",[],"def generate_color_combinations(colors, num_colors):
    from itertools import product
    
    # Repeat each color num_colors times
    repeated_colors = [color for color in colors for _ in range(num_colors)]
    
    # Generate all combinations of colors using itertools.product
    combinations = list(product(repeated_colors, repeat=num_colors))
    
    # Convert tuples to lists and format the output
    formatted_combinations = [list(map(lambda x: ""'"" + x + ""'"", combo)) for combo in combinations]
    
    return formatted_combinations",,,,,
Write a python function to count the number of prime numbers less than a given non-negative number.,"def count_Primes_nums(n):
    ctr = 0
    for num in range(n):
        if num <= 1:
            continue
        for i in range(2,num):
            if (num % i) == 0:
                break
        else:
            ctr += 1
    return ctr",256,Write a python function to count the number of prime numbers less than a given non-negative number.,"['assert count_Primes_nums(5) == 2', 'assert count_Primes_nums(10) == 4', 'assert count_Primes_nums(100) == 25']",[],"def count_primes(n):
    if n < 2:
        return 0

    count = 0
    for num in range(2, n):
        is_prime = True
        for i in range(2, int(num ** 0.5) + 1):
            if num % i == 0:
                is_prime = False
                break
        if is_prime:
            count += 1

    return count",,,,,
Write a function to swap two numbers.,"def swap_numbers(a,b):
 temp = a
 a = b
 b = temp
 return (a,b)",257,Write a function to swap two numbers.,"['assert swap_numbers(10,20)==(20,10)', 'assert swap_numbers(15,17)==(17,15)', 'assert swap_numbers(100,200)==(200,100)']",[],"def swap_numbers(a, b):
    a, b = b, a
    return a, b",,,,,
Write a function to find number of odd elements in the given list using lambda function.,"def count_odd(array_nums):
   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))
   return count_odd",258,Write a function to find number of odd elements in the given list using lambda function.,"['assert count_odd([1, 2, 3, 5, 7, 8, 10])==4', 'assert count_odd([10,15,14,13,-18,12,-20])==2', 'assert count_odd([1, 2, 4, 8, 9])==2']",[],"def count_odd_elements(lst):
    return sum(1 for num in lst if num % 2 != 0)",,,,,
Write a function to maximize the given two tuples.,"def maximize_elements(test_tup1, test_tup2):
  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ",259,Write a function to maximize the given two tuples.,"['assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))', 'assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))', 'assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))']",[],"def maximize_tuples(tuples):
    max_tuple = ()
    for t in tuples:
        max_t = max(t)
        if max_t > max(max_tuple):
            max_tuple = (max_t,) + tuple(sorted(set(t) - {max_t}, reverse=True))
    return max_tuple",,,,,
Write a function to find the nth newman–shanks–williams prime number.,"def newman_prime(n): 
	if n == 0 or n == 1: 
		return 1
	return 2 * newman_prime(n - 1) + newman_prime(n - 2)",260,Write a function to find the nth newman–shanks–williams prime number.,"['assert newman_prime(3) == 7 ', 'assert newman_prime(4) == 17', 'assert newman_prime(5) == 41']",[],,,,,,
Write a function to perform mathematical division operation across the given tuples.,"def division_elements(test_tup1, test_tup2):
  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ",261,Write a function to perform mathematical division operation across the given tuples.,"['assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)', 'assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)', 'assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)']",[],"def divide_tuples(tup1, tup2):
    result = tuple(a / b for a, b in zip(tup1, tup2))
    return result",,,,,
Write a function to split a given list into two parts where the length of the first part of the list is given.,"def split_two_parts(list1, L):
    return list1[:L], list1[L:]",262,Write a function to split a given list into two parts where the length of the first part of the list is given.,"['assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])', ""assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])"", ""assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])""]",[],"def split_list(lst, first_part_length):
    if first_part_length < 0 or first_part_length > len(lst):
        raise ValueError(""Invalid first part length"")
    
    first_part = lst[:first_part_length]
    second_part = lst[first_part_length:]
    
    return first_part, second_part",,,,,
Write a function to merge two dictionaries.,"def merge_dict(d1,d2):
 d = d1.copy()
 d.update(d2)
 return d",263,Write a function to merge two dictionaries.,"[""assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}"", ""assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}"", ""assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}""]",[],"def merge_dicts(dict1, dict2):
    merged_dict = dict1.copy()
    merged_dict.update(dict2)
    return merged_dict",,,,,
Write a function to calculate a dog's age in dog's years.,"def dog_age(h_age):
 if h_age < 0:
 	exit()
 elif h_age <= 2:
	 d_age = h_age * 10.5
 else:
	 d_age = 21 + (h_age - 2)*4
 return d_age",264,Write a function to calculate a dog's age in dog's years.,"['assert dog_age(12)==61', 'assert dog_age(15)==73', 'assert dog_age(24)==109']",[],"def dog_age(human_age):
    if human_age <= 0:
        return ""Invalid age. Age must be a positive number.""
    elif human_age <= 2:
        return human_age * 10.5
    else:
        return 21 + (human_age - 2) * 4",,,,,
Write a function to split a list for every nth element.,"def list_split(S, step):
    return [S[i::step] for i in range(step)]",265,Write a function to split a list for every nth element.,"[""assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] "", 'assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] ', ""assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] ""]",[],"def split_list_every_nth(lst, n):
    return [lst[i:i+n] for i in range(0, len(lst), n)]",,,,,
Write a function to find the lateral surface area of a cube.,"def lateralsurface_cube(l):
  LSA = 4 * (l * l)
  return LSA",266,Write a function to find the lateral surface area of a cube.,"['assert lateralsurface_cube(5)==100', 'assert lateralsurface_cube(9)==324', 'assert lateralsurface_cube(10)==400']",[],"def lateral_surface_area_cube(side_length):
    return 4 * side_length ** 2",,,,,
Write a python function to find the sum of squares of first n odd natural numbers.,"def square_Sum(n):  
    return int(n*(4*n*n-1)/3) ",267,Write a python function to find the sum of squares of first n odd natural numbers.,"['assert square_Sum(2) == 10', 'assert square_Sum(3) == 35', 'assert square_Sum(4) == 84']",[],"def sum_of_squares_odd_numbers(n):
    sum_of_squares = 0
    odd_number = 1
    
    for _ in range(n):
        sum_of_squares += odd_number ** 2
        odd_number += 2
    
    return sum_of_squares",,,,,
Write a function to find the n'th star number.,"def find_star_num(n): 
	return (6 * n * (n - 1) + 1) ",268,Write a function to find the n'th star number.,"['assert find_star_num(3) == 37', 'assert find_star_num(4) == 73', 'assert find_star_num(5) == 121']",[],,,,,,
Write a function to find the ascii value of a character.,"def ascii_value(k):
  ch=k
  return ord(ch)",269,Write a function to find the ascii value of a character.,"[""assert ascii_value('A')==65"", ""assert ascii_value('R')==82"", ""assert ascii_value('S')==83""]",[],,,,,,
Write a python function to find the sum of even numbers at even positions.,"def sum_even_and_even_index(arr,n):  
    i = 0
    sum = 0
    for i in range(0,n,2): 
        if (arr[i] % 2 == 0) : 
            sum += arr[i]  
    return sum",270,Write a python function to find the sum of even numbers at even positions.,"['assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30', 'assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26', 'assert sum_even_and_even_index([5, 6, 12, 1],4) == 12']",[],"def sum_even_numbers_at_even_positions(numbers):
    even_sum = 0
    position = 0
    
    for num in numbers:
        if position % 2 == 0 and num % 2 == 0:
            even_sum += num
        position += 1
    
    return even_sum",,,,,
Write a python function to find the sum of fifth power of first n even natural numbers.,"def even_Power_Sum(n): 
    sum = 0; 
    for i in range(1,n+1): 
        j = 2*i; 
        sum = sum + (j*j*j*j*j); 
    return sum; ",271,Write a python function to find the sum of fifth power of first n even natural numbers.,"['assert even_Power_Sum(2) == 1056', 'assert even_Power_Sum(3) == 8832', 'assert even_Power_Sum(1) == 32']",[],"def even_power_sum(n):
    even_numbers = [i for i in range(2, 2*n+1, 2)]  # Generate a list of the first n even numbers
    power_sum = sum(num**5 for num in even_numbers)  # Calculate the sum of the fifth power of each number
    return power_sum",,,,,
Write a function to perfom the rear element extraction from list of tuples records.,"def rear_extract(test_list):
  res = [lis[-1] for lis in test_list]
  return (res) ",272,Write a function to perfom the rear element extraction from list of tuples records.,"[""assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]"", ""assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]"", ""assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]""]",[],"def extract_rear_elements(records):
    return [record[1] for record in records]",,,,,
Write a function to substract the contents of one tuple with corresponding index of other tuple.,"def substract_elements(test_tup1, test_tup2):
  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))
  return (res) ",273,Write a function to substract the contents of one tuple with corresponding index of other tuple.,"['assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)', 'assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)', 'assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)']",[],"def subtract_tuples(tuple1, tuple2):
    result = []
    for i in range(min(len(tuple1), len(tuple2))):
        result.append(tuple1[i] - tuple2[i])
    return tuple(result)",,,,,
Write a python function to find sum of even index binomial coefficients.,"import math  
def even_binomial_Coeff_Sum( n): 
    return (1 << (n - 1)) ",274,Write a python function to find sum of even index binomial coefficients.,"['assert even_binomial_Coeff_Sum(4) == 8', 'assert even_binomial_Coeff_Sum(6) == 32', 'assert even_binomial_Coeff_Sum(2) == 2']",[],"def sum_even_index_binomial_coefficients(n):
    if n < 0:
        return 0
    
    binomial_sum = 0
    for i in range(0, n + 1, 2):
        binomial_sum += binomial_coefficient(n, i)
    
    return binomial_sum

def binomial_coefficient(n, k):
    if k == 0 or k == n:
        return 1
    
    numerator = 1
    denominator = 1
    
    for i in range(1, k + 1):
        numerator *= (n - i + 1)
        denominator *= i
    
    return numerator // denominator",,,,,
Write a python function to find the position of the last removed element from the given array.,"import math as mt 
def get_Position(a,n,m): 
    for i in range(n): 
        a[i] = (a[i] // m + (a[i] % m != 0))  
    result,maxx = -1,-1
    for i in range(n - 1,-1,-1): 
        if (maxx < a[i]): 
            maxx = a[i] 
            result = i 
    return result + 1",275,Write a python function to find the position of the last removed element from the given array.,"['assert get_Position([2,5,4],3,2) == 2', 'assert get_Position([4,3],2,2) == 2', 'assert get_Position([1,2,3,4],4,1) == 4']",[],,,,,,
Write a function to find the volume of a cylinder.,"def volume_cylinder(r,h):
  volume=3.1415*r*r*h
  return volume",276,Write a function to find the volume of a cylinder.,"['assert volume_cylinder(10,5)==1570.7500000000002', 'assert volume_cylinder(4,5)==251.32000000000002', 'assert volume_cylinder(4,10)==502.64000000000004']",[],"import math

def volume_cylinder(radius, height):
    return math.pi * (radius ** 2) * height",,,,,
Write a function to filter a dictionary based on values.,"def dict_filter(dict,n):
 result = {key:value for (key, value) in dict.items() if value >=n}
 return result",277,Write a function to filter a dictionary based on values.,"[""assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}"", ""assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}"", ""assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}""]",[],"def filter_dict_by_value(dictionary, value_to_filter):
    return {key: value for key, value in dictionary.items() if value == value_to_filter}",,,,,
Write a function to find the element count that occurs before the record in the given tuple.,"def count_first_elements(test_tup):
  for count, ele in enumerate(test_tup):
    if isinstance(ele, tuple):
      break
  return (count) ",278,Write a function to find the element count that occurs before the record in the given tuple.,"['assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3', 'assert count_first_elements((2, 9, (5, 7), 11) ) == 2', 'assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4']",[],"def count_elements_before_record(tuple_data):
    count = 0
    for element in tuple_data:
        if isinstance(element, tuple):
            count += len(element)
        elif isinstance(element, int):
            count += 1
    return count",,,,,
Write a function to find the nth decagonal number.,"def is_num_decagonal(n): 
	return 4 * n * n - 3 * n ",279,Write a function to find the nth decagonal number.,"['assert is_num_decagonal(3) == 27', 'assert is_num_decagonal(7) == 175', 'assert is_num_decagonal(10) == 370']",[],"def nth_decagonal_number(n):
    return n * (8 * n - 6) // 2",,,,,
Write a function to search an element in the given array by using sequential search.,"def sequential_search(dlist, item):
    pos = 0
    found = False
    while pos < len(dlist) and not found:
        if dlist[pos] == item:
            found = True
        else:
            pos = pos + 1
    return found, pos",280,Write a function to search an element in the given array by using sequential search.,"['assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)', 'assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)', 'assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)']",[],"def sequential_search(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return True
    return False",,,,,
Write a python function to check if the elements of a given list are unique or not.,"def all_unique(test_list):
    if len(test_list) > len(set(test_list)):
        return False
    return True",281,Write a python function to check if the elements of a given list are unique or not.,"['assert all_unique([1,2,3]) == True', 'assert all_unique([1,2,1,2]) == False', 'assert all_unique([1,2,3,4,5]) == True']",[],,,,,,
Write a function to substaract two lists using map and lambda function.,"def sub_list(nums1,nums2):
  result = map(lambda x, y: x - y, nums1, nums2)
  return list(result)",282,Write a function to substaract two lists using map and lambda function.,"['assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]', 'assert sub_list([1,2],[3,4])==[-2,-2]', 'assert sub_list([90,120],[50,70])==[40,50]']",[],"def subtract_lists(list1, list2):
    return list(map(lambda x, y: x - y, list1, list2))",,,,,
Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.,"def validate(n): 
    for i in range(10): 
        temp = n;  
        count = 0; 
        while (temp): 
            if (temp % 10 == i): 
                count+=1;  
            if (count > i): 
                return False
            temp //= 10; 
    return True",283,Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.,"['assert validate(1234) == True', 'assert validate(51241) == False', 'assert validate(321) == True']",[],,,,,,
Write a function to check whether all items of a list are equal to a given string.,"def check_element(list,element):
  check_element=all(v== element for v in list)
  return check_element",284,Write a function to check whether all items of a list are equal to a given string.,"['assert check_element([""green"", ""orange"", ""black"", ""white""],\'blue\')==False', 'assert check_element([1,2,3,4],7)==False', 'assert check_element([""green"", ""green"", ""green"", ""green""],\'green\')==True']",[],"def all_items_equal_to_string(lst, target_string):
    return all(item == target_string for item in lst)",,,,,
Write a function that matches a string that has an a followed by two to three 'b'.,"import re
def text_match_two_three(text):
        patterns = 'ab{2,3}'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')",285,Write a function that matches a string that has an a followed by two to three 'b'.,"['assert text_match_two_three(""ac"")==(\'Not matched!\')', 'assert text_match_two_three(""dc"")==(\'Not matched!\')', 'assert text_match_two_three(""abbbba"")==(\'Found a match!\')']",[],"import re

def match_string_with_abbs(string):
    pattern = r'ab{2,3}'
    match = re.search(pattern, string)
    return bool(match)",,,,,
Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.,"def max_sub_array_sum_repeated(a, n, k): 
	max_so_far = -2147483648
	max_ending_here = 0
	for i in range(n*k): 
		max_ending_here = max_ending_here + a[i%n] 
		if (max_so_far < max_ending_here): 
			max_so_far = max_ending_here 
		if (max_ending_here < 0): 
			max_ending_here = 0
	return max_so_far",286,Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.,"['assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30', 'assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59', 'assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1']",[],"def max_subarray_sum_repeated(arr, k):
    def kadane(arr):
        max_sum = float('-inf')
        current_sum = 0
        
        for num in arr:
            current_sum = max(num, current_sum + num)
            max_sum = max(max_sum, current_sum)
        
        return max_sum
    
    # Calculate the sum of the original array
    total_sum = sum(arr)
    
    # If the total sum is negative, then the maximum sum will be the largest single element
    # because adding more elements will only decrease the sum
    if total_sum < 0:
        return max(arr)
    
    # Find the maximum subarray sum in the original array
    max_sum = kadane(arr)
    
    # If the maximum subarray sum is positive, we need to consider the case where
    # the maximum sum spans across multiple repetitions of the array
    # We can do this by subtracting the smallest subarray sum from the total sum
    # and adding the maximum subarray sum k times
    if max_sum > 0:
        # Find the minimum subarray sum in the original array
        min_sum = total_sum - kadane([-num for num in arr])
        
        # Calculate the sum of the modified array (k repetitions)
        repeated_sum = total_sum * k
        
        # Return the maximum of the maximum subarray sum and the sum of the modified array
        # after subtracting the minimum subarray sum
        return max(max_sum, repeated_sum - min_sum * (k - 1))
    
    # If the maximum subarray sum is non-positive, the maximum sum will be the sum
    # of the modified array (k repetitions)
    return total_sum * k

# Example usage:
arr = [10, -2, 30, -1, -1, 20]
k = 3
result = max_subarray_sum_repeated(arr, k)
print(result)",,,,,
Write a python function to find the sum of squares of first n even natural numbers.,"def square_Sum(n):  
    return int(2*n*(n+1)*(2*n+1)/3)",287,Write a python function to find the sum of squares of first n even natural numbers.,"['assert square_Sum(2) == 20', 'assert square_Sum(3) == 56', 'assert square_Sum(4) == 120']",[],"def sum_of_squares_even(n):
    total_sum = 0
    for i in range(2, 2*n+1, 2):  # Loop through even numbers from 2 to 2*n
        total_sum += i ** 2  # Add the square of each even number to the total sum
    return total_sum",,,,,
Write a function to count array elements having modular inverse under given prime number p equal to itself.,"def modular_inverse(arr, N, P):
	current_element = 0
	for i in range(0, N):
		if ((arr[i] * arr[i]) % P == 1):
			current_element = current_element + 1
	return current_element",288,Write a function to count array elements having modular inverse under given prime number p equal to itself.,"['assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2', 'assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3', 'assert modular_inverse([2, 3, 4, 5], 4, 6) == 1']",[],,,,,,
Write a python function to calculate the number of odd days in a given year.,"def odd_Days(N): 
    hund1 = N // 100
    hund4 = N // 400
    leap = N >> 2
    ordd = N - leap 
    if (hund1): 
        ordd += hund1 
        leap -= hund1 
    if (hund4): 
        ordd -= hund4 
        leap += hund4 
    days = ordd + leap * 2
    odd = days % 7
    return odd ",289,Write a python function to calculate the number of odd days in a given year.,"['assert odd_Days(100) == 5', 'assert odd_Days(50) ==6', 'assert odd_Days(75) == 2']",[],"def count_odd_days(year):
    # Define the leap year condition
    def is_leap(year):
        return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)

    # Initialize the count of odd days
    odd_days_count = 0

    # Iterate through each month of the year
    for month in range(1, 13):
        # Determine the number of days in the current month
        if month in [4, 6, 9, 11]:
            days_in_month = 30
        elif month == 2:
            if is_leap(year):
                days_in_month = 29
            else:
                days_in_month = 28
        else:
            days_in_month = 31

        # Add the odd days of the current month to the count
        odd_days_count += days_in_month // 2 * 2  # Even days
        if days_in_month % 2 == 1:
            odd_days_count += 1  # Additional odd day if the month has an odd number of days

    return odd_days_count",,,,,
Write a function to find the list of lists with maximum length.,"def max_length(list1):
    max_length = max(len(x) for x in  list1 )  
    max_list = max((x) for x in   list1)
    return(max_length, max_list)",290,Write a function to find the list of lists with maximum length.,"['assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])', 'assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])', 'assert max_length([[5], [15,20,25]])==(3, [15,20,25])']",[],"def find_max_length_list(lst):
    max_length = 0
    max_length_lists = []
    
    for sublist in lst:
        if len(sublist) > max_length:
            max_length = len(sublist)
            max_length_lists = [sublist]
        elif len(sublist) == max_length:
            max_length_lists.append(sublist)
    
    return max_length_lists",,,,,
Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.,"def count_no_of_ways(n, k): 
	dp = [0] * (n + 1) 
	total = k 
	mod = 1000000007
	dp[1] = k 
	dp[2] = k * k	 
	for i in range(3,n+1): 
		dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod 
	return dp[n]",291,Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.,"['assert count_no_of_ways(2, 4) == 16', 'assert count_no_of_ways(3, 2) == 6', 'assert count_no_of_ways(4, 4) == 228']",[],,,,,,
Write a python function to find quotient of two numbers.,"def find(n,m):  
    q = n//m 
    return (q)",292,Write a python function to find quotient of two numbers.,"['assert find(10,3) == 3', 'assert find(4,2) == 2', 'assert find(20,5) == 4']",[],"def find_quotient(num1, num2):
    if num2 == 0:
        raise ValueError(""Division by zero is not allowed."")
    else:
        return num1 // num2",,,,,
Write a function to find the third side of a right angled triangle.,"import math
def otherside_rightangle(w,h):
  s=math.sqrt((w*w)+(h*h))
  return s",293,Write a function to find the third side of a right angled triangle.,"['assert otherside_rightangle(7,8)==10.63014581273465', 'assert otherside_rightangle(3,4)==5', 'assert otherside_rightangle(7,15)==16.55294535724685']",[],"import math

def find_third_side(a, b):
    # Check if a and b are the two sides of a right-angled triangle
    if a <= 0 or b <= 0:
        raise ValueError(""Both sides of the triangle must be positive."")

    # Calculate the third side using the Pythagorean theorem
    c = math.sqrt(a**2 + b**2)

    return c",,,,,
Write a function to find the maximum value in a given heterogeneous list.,"def max_val(listval):
     max_val = max(i for i in listval if isinstance(i, int)) 
     return(max_val)",294,Write a function to find the maximum value in a given heterogeneous list.,"[""assert max_val(['Python', 3, 2, 4, 5, 'version'])==5"", ""assert max_val(['Python', 15, 20, 25])==25"", ""assert max_val(['Python', 30, 20, 40, 50, 'version'])==50""]",[],"def find_max_value(lst):
    max_value = None

    for item in lst:
        if isinstance(item, (int, float)):
            if max_value is None or item > max_value:
                max_value = item

    return max_value",,,,,
Write a function to return the sum of all divisors of a number.,"def sum_div(number):
    divisors = [1]
    for i in range(2, number):
        if (number % i)==0:
            divisors.append(i)
    return sum(divisors)",295,Write a function to return the sum of all divisors of a number.,"['assert sum_div(8)==7', 'assert sum_div(12)==16', 'assert sum_div(7)==1']",[],,,,,,
Write a python function to count inversions in an array.,"def get_Inv_Count(arr,n): 
    inv_count = 0
    for i in range(n): 
        for j in range(i + 1,n): 
            if (arr[i] > arr[j]): 
                inv_count += 1
    return inv_count ",296,Write a python function to count inversions in an array.,"['assert get_Inv_Count([1,20,6,4,5],5) == 5', 'assert get_Inv_Count([1,2,1],3) == 1', 'assert get_Inv_Count([1,2,5,6,1],5) == 3']",[],"def count_inversions(arr):
    def merge_and_count(left, right):
        merged = []
        i = j = count = 0

        while i < len(left) and j < len(right):
            if left[i] <= right[j]:
                merged.append(left[i])
                i += 1
            else:
                merged.append(right[j])
                j += 1
                count += len(left) - i

        merged.extend(left[i:])
        merged.extend(right[j:])

        return merged, count

    def merge_sort_and_count(arr):
        if len(arr) <= 1:
            return arr, 0

        mid = len(arr) // 2
        left, left_count = merge_sort_and_count(arr[:mid])
        right, right_count = merge_sort_and_count(arr[mid:])
        merged, merge_count = merge_and_count(left, right)

        return merged, left_count + right_count + merge_count

    sorted_arr, inversion_count = merge_sort_and_count(arr)
    return inversion_count",,,,,
Write a function to flatten a given nested list structure.,"def flatten_list(list1):
    result_list = []
    if not list1: return result_list
    stack = [list(list1)]
    while stack:
        c_num = stack.pop()
        next = c_num.pop()
        if c_num: stack.append(c_num)
        if isinstance(next, list):
            if next: stack.append(list(next))
        else: result_list.append(next)
    result_list.reverse()
    return result_list ",297,Write a function to flatten a given nested list structure.,"['assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]', 'assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]', 'assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]']",[],"def flatten_list(nested_list):
    flattened = []
    for item in nested_list:
        if isinstance(item, list):
            flattened.extend(flatten_list(item))  # Recursively flatten nested lists
        else:
            flattened.append(item)  # Add non-list items directly to the flattened list
    return flattened",,,,,
Write a function to find the nested list elements which are present in another list.,"def intersection_nested_lists(l1, l2):
    result = [[n for n in lst if n in l1] for lst in l2]
    return result",298,Write a function to find the nested list elements which are present in another list.,"['assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]', 'assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]', ""assert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]""]",[],"def find_nested_list_elements(nested_list, target_list):
    result = []
    
    for sublist in nested_list:
        if isinstance(sublist, list):
            for element in sublist:
                if element in target_list:
                    result.append(element)
        elif element in target_list:
            result.append(sublist)
    
    return result",,,,,
Write a function to calculate the maximum aggregate from the list of tuples.,"from collections import defaultdict
def max_aggregate(stdata):
    temp = defaultdict(int)
    for name, marks in stdata:
        temp[name] += marks
    return max(temp.items(), key=lambda x: x[1])",299,Write a function to calculate the maximum aggregate from the list of tuples.,"[""assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)"", ""assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)"", ""assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)""]",[],"def max_aggregate(tuples_list):
    max_aggregate_value = 0
    current_aggregate = 0
    name_to_value = {}

    for tuple_ in tuples_list:
        name, value = tuple_
        current_aggregate += value
        name_to_value[name] = value

        if name in name_to_value and current_aggregate > max_aggregate_value:
            max_aggregate_value = current_aggregate

        if name in name_to_value:
            current_aggregate -= name_to_value[name]

    return max_aggregate_value",,,,,
Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.,"def count_binary_seq(n): 
	nCr = 1
	res = 1
	for r in range(1, n + 1): 
		nCr = (nCr * (n + 1 - r)) / r 
		res += nCr * nCr 
	return res ",300,Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.,"['assert count_binary_seq(1) == 2.0', 'assert count_binary_seq(2) == 6.0', 'assert count_binary_seq(3) == 20.0']",[],"def count_binary_sequences(n):
    # Base case: when n is 0, there is only one sequence (empty sequence)
    if n == 0:
        return 1

    # Recursive case: count the sequences for n-1 and calculate the total count
    count = 0
    for i in range(n + 1):
        # The sum of the first n bits is i
        # The sum of the last n bits must also be i
        # For each such sum, we can count the number of sequences recursively
        count += count_binary_sequences(n - 1, i) * count_binary_sequences(n - 1, i)

    return count

# Helper function for the recursive case
def count_binary_sequences(n, target_sum):
    # Base case: when n is 0, check if the target sum is 0
    if n == 0:
        return 1 if target_sum == 0 else 0

    # Recursive case: count the sequences for n-1 with target sum adjusted accordingly
    count = 0
    for i in range(2):
        count += count_binary_sequences(n - 1, target_sum - i)

    return count",,,,,
Write a function to find the depth of a dictionary.,"def dict_depth(d):
    if isinstance(d, dict):
        return 1 + (max(map(dict_depth, d.values())) if d else 0)
    return 0",301,Write a function to find the depth of a dictionary.,"[""assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4"", ""assert dict_depth({'a':1, 'b': {'c':'python'}})==2"", ""assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3""]",[],"def get_dict_depth(dictionary):
    if not isinstance(dictionary, dict):
        return 0

    max_depth = 0
    for key, value in dictionary.items():
        if isinstance(value, dict):
            sub_depth = get_dict_depth(value)
            max_depth = max(max_depth, sub_depth)

    return max_depth + 1",,,,,
Write a python function to find the most significant bit number which is also a set bit.,"def set_Bit_Number(n): 
    if (n == 0): 
        return 0; 
    msb = 0; 
    n = int(n / 2); 
    while (n > 0): 
        n = int(n / 2); 
        msb += 1; 
    return (1 << msb)",302,Write a python function to find the most significant bit number which is also a set bit.,"['assert set_Bit_Number(6) == 4', 'assert set_Bit_Number(10) == 8', 'assert set_Bit_Number(18) == 16']",[],"def find_most_significant_set_bit(n):
    if n == 0:
        return 0

    bit_position = 0
    while (n >> bit_position) > 0:
        bit_position += 1

    return bit_position - 1",,,,,
Write a python function to check whether the count of inversion of two types are same or not.,"import sys 
def solve(a,n):   
    mx = -sys.maxsize - 1
    for j in range(1,n):  
        if (mx > a[j]):  
            return False  
        mx = max(mx,a[j - 1])    
    return True",303,Write a python function to check whether the count of inversion of two types are same or not.,"['assert solve([1,0,2],3) == True', 'assert solve([1,2,0],3) == False', 'assert solve([1,2,1],3) == True']",[],"def check_inversion_counts(outer_list, inner_list):
    if len(outer_list) != len(inner_list):
        return False
    
    outer_indices = {elem: index for index, elem in enumerate(outer_list)}
    inner_indices = {elem: index for index, elem in enumerate(inner_list)}
    
    inversions = 0
    for elem in outer_list:
        if elem in inner_indices and outer_indices[elem] != inner_indices[elem]:
            inversions += 1
    
    return inversions % 2 == 0",,,,,
Write a python function to find element at a given index after number of rotations.,"def find_Element(arr,ranges,rotations,index) :  
    for i in range(rotations - 1,-1,-1 ) : 
        left = ranges[i][0] 
        right = ranges[i][1] 
        if (left <= index and right >= index) : 
            if (index == left) : 
                index = right 
            else : 
                index = index - 1 
    return arr[index] ",304,Write a python function to find element at a given index after number of rotations.,"['assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3', 'assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3', 'assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1']",[],"def find_element_after_rotations(arr, rotations, index):
    # Flatten the nested list into a single list
    flattened_arr = [item for sublist in arr for item in sublist]
    
    # Apply the rotations to the flattened list
    rotated_arr = flattened_arr[-rotations:] + flattened_arr[:-rotations]
    
    # Find the element at the given index in the rotated list
    return rotated_arr[index]",,,,,
Write a function to match two words from a list of words starting with letter 'p'.,"import re
def start_withp(words):
 for w in words:
        m = re.match(""(P\w+)\W(P\w+)"", w)
        if m:
            return m.groups()",305,Write a function to match two words from a list of words starting with letter 'p'.,"['assert start_withp([""Python PHP"", ""Java JavaScript"", ""c c++""])==(\'Python\', \'PHP\')', 'assert start_withp([""Python Programming"",""Java Programming""])==(\'Python\',\'Programming\')', 'assert start_withp([""Pqrst Pqr"",""qrstuv""])==(\'Pqrst\',\'Pqr\')']",[],,,,,,
"Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .","def max_sum_increasing_subseq(a, n, index, k):
	dp = [[0 for i in range(n)] 
			for i in range(n)]
	for i in range(n):
		if a[i] > a[0]:
			dp[0][i] = a[i] + a[0]
		else:
			dp[0][i] = a[i]
	for i in range(1, n):
		for j in range(n):
			if a[j] > a[i] and j > i:
				if dp[i - 1][i] + a[j] > dp[i - 1][j]:
					dp[i][j] = dp[i - 1][i] + a[j]
				else:
					dp[i][j] = dp[i - 1][j]
			else:
				dp[i][j] = dp[i - 1][j]
	return dp[index][k]",306,"Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .","['assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11', 'assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7', 'assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71']",[],"def max_sum_increasing_subsequence(nums, i, k):
    # Helper function to find the maximum sum of increasing subsequence from prefix to index j
    def max_sum_upto_j(j):
        # Initialize a list to store the maximum sum ending at each index
        dp = [0] * (j + 1)
        max_sum = 0

        # Iterate through the numbers up to index j
        for j in range(1, j + 1):
            # Find the maximum sum of increasing subsequence ending at index j
            dp[j] = max(dp[j - 1], nums[j - 1] + (dp[i - 1] if i > 0 and nums[j - 1] > nums[i - 1] else 0))
            max_sum = max(max_sum, dp[j])

        return max_sum

    # Find the maximum sum of increasing subsequence from prefix to index i
    max_sum_upto_i = max_sum_upto_j(i)

    # Find the maximum sum of increasing subsequence from index k to the end
    max_sum_from_k = max_sum_upto_j(k)

    # Include the kth element in the subsequence
    max_sum_with_k = max_sum_upto_i + nums[k - 1] + (max_sum_from_k - max_sum_upto_j(k - 1) if k < len(nums) else 0)

    return max_sum_with_k",,,,,
Write a function to get a colon of a tuple.,"from copy import deepcopy
def colon_tuplex(tuplex,m,n):
  tuplex_colon = deepcopy(tuplex)
  tuplex_colon[m].append(n)
  return tuplex_colon",307,Write a function to get a colon of a tuple.,"['assert colon_tuplex((""HELLO"", 5, [], True) ,2,50)==(""HELLO"", 5, [50], True) ', 'assert colon_tuplex((""HELLO"", 5, [], True) ,2,100)==((""HELLO"", 5, [100],True))', 'assert colon_tuplex((""HELLO"", 5, [], True) ,2,500)==(""HELLO"", 5, [500], True)']",[],"def get_column(tuple_of_tuples, column_index):
    if not isinstance(tuple_of_tuples, tuple) or not all(isinstance(item, tuple) for item in tuple_of_tuples):
        raise ValueError(""Input must be a tuple of tuples."")
    if not isinstance(column_index, int) or column_index < 0:
        raise ValueError(""Column index must be a non-negative integer."")
    
    return tuple(item[column_index] for item in tuple_of_tuples if len(item) > column_index)",,,,,
Write a function to find the specified number of largest products from two given lists.,"def large_product(nums1, nums2, N):
    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]
    return result",308,Write a function to find the specified number of largest products from two given lists.,"['assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]', 'assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]', 'assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]']",[],"def find_largest_products(nums1, nums2, num_products):
    products = []
    
    # Generate all possible products by multiplying elements from nums1 and nums2
    for num1 in nums1:
        for num2 in nums2:
            product = num1 * num2
            products.append(product)
    
    # Sort the products in descending order
    products.sort(reverse=True)
    
    # Return the specified number of largest products
    return products[:num_products]",,,,,
Write a python function to find the maximum of two numbers.,"def maximum(a,b):   
    if a >= b: 
        return a 
    else: 
        return b ",309,Write a python function to find the maximum of two numbers.,"['assert maximum(5,10) == 10', 'assert maximum(-1,-2) == -1', 'assert maximum(9,7) == 9']",[],"def maximum_of_two_numbers(a, b):
    return max(a, b)",,,,,
Write a function to convert a given string to a tuple.,"def string_to_tuple(str1):
    result = tuple(x for x in str1 if not x.isspace()) 
    return result",310,Write a function to convert a given string to a tuple.,"['assert string_to_tuple(""python 3.0"")==(\'p\', \'y\', \'t\', \'h\', \'o\', \'n\', \'3\', \'.\', \'0\')', 'assert string_to_tuple(""item1"")==(\'i\', \'t\', \'e\', \'m\', \'1\')', 'assert string_to_tuple(""15.10"")==(\'1\', \'5\', \'.\', \'1\', \'0\')']",[],"def string_to_tuple(s):
    # Split the string into individual characters
    chars = list(s)
    
    # Initialize variables to keep track of the tuple elements and current element
    elements = []
    current_element = ''
    
    # Iterate over the characters
    for char in chars:
        # Check if the character is a comma or a closing parenthesis
        if char == ',' or char == ')':
            # If the current element is not empty, add it to the elements list
            if current_element:
                elements.append(current_element)
                current_element = ''
        else:
            # If the character is not a comma or a closing parenthesis, append it to the current element
            current_element += char
    
    # If there's a remaining element after the loop, add it to the elements list
    if current_element:
        elements.append(current_element)
    
    # Convert the elements list to a tuple
    result = tuple(elements)
    
    return result",,,,,
Write a python function to set the left most unset bit.,"def set_left_most_unset_bit(n): 
    if not (n & (n + 1)): 
        return n 
    pos, temp, count = 0, n, 0 
    while temp: 
        if not (temp & 1): 
            pos = count      
        count += 1; temp>>=1
    return (n | (1 << (pos))) ",311,Write a python function to set the left most unset bit.,"['assert set_left_most_unset_bit(10) == 14', 'assert set_left_most_unset_bit(12) == 14', 'assert set_left_most_unset_bit(15) == 15']",[],"def set_leftmost_unset_bit(n):
    # Find the index of the leftmost unset bit
    index = next((i for i, bit in enumerate(reversed(bin(n)[2:])) if bit == '0'), -1)[0]
    
    # Calculate the mask to set the bit
    mask = 1 << index
    
    # Set the bit and return the result
    return n | mask",,,,,
Write a function to find the volume of a cone.,"import math
def volume_cone(r,h):
  volume = (1.0/3) * math.pi * r * r * h
  return volume",312,Write a function to find the volume of a cone.,"['assert volume_cone(5,12)==314.15926535897927', 'assert volume_cone(10,15)==1570.7963267948965', 'assert volume_cone(19,17)==6426.651371693521']",[],"import math

def volume_of_cone(radius, height):
    return (1/3) * math.pi * radius**2 * height",,,,,
Write a python function to print positive numbers in a list.,"def pos_nos(list1):
  for num in list1: 
    if num >= 0: 
       return num ",313,Write a python function to print positive numbers in a list.,"['assert pos_nos([-1,-2,1,2]) == 1,2', 'assert pos_nos([3,4,-5]) == 3,4', 'assert pos_nos([-2,-3,1]) == 1']",[],,,,,,
Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.,"def max_sum_rectangular_grid(grid, n) : 
	incl = max(grid[0][0], grid[1][0]) 
	excl = 0
	for i in range(1, n) : 
		excl_new = max(excl, incl) 
		incl = excl + max(grid[0][i], grid[1][i]) 
		excl = excl_new 
	return max(excl, incl)",314,Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.,"['assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7', 'assert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24', 'assert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81']",[],"def max_sum_non_adjacent(grid):
    n = len(grid[0])
    dp = [[0] * (n + 1) for _ in range(2)]

    for j in range(1, n + 1):
        dp[0][j] = max(dp[0][j - 1], dp[1][j - 1] + grid[0][j - 1])
        dp[1][j] = max(dp[0][j - 1], dp[1][j - 1]) + grid[1][j - 1]

    return max(dp[0][n], dp[1][n])",,,,,
Write a python function to find the first maximum length of even word.,"def find_Max_Len_Even(str): 
    n = len(str) 
    i = 0
    currlen = 0
    maxlen = 0
    st = -1
    while (i < n): 
        if (str[i] == ' '): 
            if (currlen % 2 == 0): 
                if (maxlen < currlen): 
                    maxlen = currlen 
                    st = i - currlen 
            currlen = 0 
        else : 
            currlen += 1
        i += 1
    if (currlen % 2 == 0): 
        if (maxlen < currlen): 
            maxlen = currlen 
            st = i - currlen 
    if (st == -1): 
        return ""-1"" 
    return str[st: st + maxlen] ",315,Write a python function to find the first maximum length of even word.,"['assert find_Max_Len_Even(""python language"") == ""language""', 'assert find_Max_Len_Even(""maximum even length"") == ""length""', 'assert find_Max_Len_Even(""eve"") == ""-1""']",[],,,,,,
Write a function to find the index of the last occurrence of a given number in a sorted array.,"def find_last_occurrence(A, x):
    (left, right) = (0, len(A) - 1)
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if x == A[mid]:
            result = mid
            left = mid + 1
        elif x < A[mid]:
            right = mid - 1
        else:
            left = mid + 1
    return result ",316,Write a function to find the index of the last occurrence of a given number in a sorted array.,"['assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3', 'assert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9', 'assert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6']",[],,,,,,
Write a function to reflect the modified run-length encoding from a list.,"from itertools import groupby
def modified_encode(alist):
        def ctr_ele(el):
            if len(el)>1: return [len(el), el[0]]
            else: return el[0]
        return [ctr_ele(list(group)) for key, group in groupby(alist)]",317,Write a function to reflect the modified run-length encoding from a list.,"['assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]', ""assert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']"", ""assert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']""]",[],,,,,,
Write a python function to find the maximum volume of a cuboid with given sum of sides.,"def max_volume (s): 
    maxvalue = 0
    i = 1
    for i in range(s - 1): 
        j = 1
        for j in range(s): 
            k = s - i - j 
            maxvalue = max(maxvalue, i * j * k)         
    return maxvalue ",318,Write a python function to find the maximum volume of a cuboid with given sum of sides.,"['assert max_volume(8) == 18', 'assert max_volume(4) == 2', 'assert max_volume(1) == 0']",[],"def max_volume_cuboid(side_sum):
    if side_sum <= 3:
        return 0
    
    # Find the largest side length that is less than or equal to the side_sum // 3
    # Since all sides are integers, we need to round down to the nearest integer
    max_side = side_sum // 3
    
    # Initialize the maximum volume to 0
    max_volume = 0
    
    # Iterate over possible side lengths, starting from the largest one
    for length in range(max_side, 0, -1):
        width = (side_sum - length) // 2
        height = side_sum - length - width
        
        # Check if the remaining two sides are valid (positive integers)
        if height > 0 and width > 0:
            # Calculate the volume and update the maximum volume if necessary
            volume = length * width * height
            max_volume = max(max_volume, volume)
    
    return max_volume",,,,,
Write a function to find all five characters long word in the given string by using regex.,"import re
def find_long_word(text):
  return (re.findall(r""\b\w{5}\b"", text))",319,Write a function to find all five characters long word in the given string by using regex.,"[""assert find_long_word('Please move back to strem') == ['strem']"", ""assert find_long_word('4K Ultra HD streaming player') == ['Ultra']"", ""assert find_long_word('Streaming Media Player') == ['Media']""]",[],"import re

def find_five_char_words(string):
    pattern = r'\b\w{5}\b'
    words = re.findall(pattern, string)
    return words",,,,,
Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.,"def sum_difference(n):
    sumofsquares = 0
    squareofsum = 0
    for num in range(1, n+1):
        sumofsquares += num * num
        squareofsum += num
    squareofsum = squareofsum ** 2
    return squareofsum - sumofsquares",320,Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.,"['assert sum_difference(12)==5434', 'assert sum_difference(20)==41230', 'assert sum_difference(54)==2151270']",[],"def calculate_difference(n):
    squared_sum = sum(i**2 for i in range(1, n + 1))
    sum_of_squares = (n * (n + 1) // 2)**2
    return squared_sum - sum_of_squares",,,,,
Write a function to find the demlo number for the given number.,"def find_demlo(s): 
	l = len(s) 
	res = """" 
	for i in range(1,l+1): 
		res = res + str(i) 
	for i in range(l-1,0,-1): 
		res = res + str(i) 
	return res 	",321,Write a function to find the demlo number for the given number.,"['assert find_demlo(""111111"") == \'12345654321\'', 'assert find_demlo(""1111"") == \'1234321\'', 'assert find_demlo(""13333122222"") == \'123456789101110987654321\'']",[],"def find_demlo_number(number):
    digits = [int(digit) for digit in str(number)]
    n = len(digits)
    demlo = [0] * n

    for i in range(n):
        if i % 2 == 0:
            demlo[i] = sum(digits[j] for j in range(i, n, 2))
        else:
            demlo[i] = sum(digits[j] for j in range(i, -1, -2))

    return ''.join(map(str, reversed(demlo)))",,,,,
Write a function to find all index positions of the minimum values in a given list.,"def position_min(list1):
    min_val = min(list1)
    min_result = [i for i, j in enumerate(list1) if j == min_val]
    return min_result",322,Write a function to find all index positions of the minimum values in a given list.,"['assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]', 'assert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]', 'assert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]']",[],"def find_minimum_indices(lst):
    if not lst:
        return []
    
    minimum_value = min(lst)
    indices = [i for i, value in enumerate(lst) if value == minimum_value]
    return indices",,,,,
Write a function to re-arrange the given array in alternating positive and negative items.,"def right_rotate(arr, n, out_of_place, cur):
	temp = arr[cur]
	for i in range(cur, out_of_place, -1):
		arr[i] = arr[i - 1]
	arr[out_of_place] = temp
	return arr
def re_arrange(arr, n):
	out_of_place = -1
	for index in range(n):
		if (out_of_place >= 0):
			if ((arr[index] >= 0 and arr[out_of_place] < 0) or
			(arr[index] < 0 and arr[out_of_place] >= 0)):
				arr = right_rotate(arr, n, out_of_place, index)
				if (index-out_of_place > 2):
					out_of_place += 2
				else:
					out_of_place = - 1
		if (out_of_place == -1):
			if ((arr[index] >= 0 and index % 2 == 0) or
			 (arr[index] < 0 and index % 2 == 1)):
				out_of_place = index
	return arr",323,Write a function to re-arrange the given array in alternating positive and negative items.,"['assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]', 'assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]', 'assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]']",[],"def rearrange_array(arr):
    positives = [num for num in arr if num > 0]
    negatives = [num for num in arr if num < 0]
    
    result = []
    while positives and negatives:
        result.append(positives.pop(0))
        result.append(negatives.pop(0))
    
    # Append remaining items (if any)
    result.extend(positives)
    result.extend(negatives)
    
    return result",,,,,
Write a function to extract the sum of alternate chains of tuples.,"def sum_of_alternates(test_tuple):
  sum1 = 0
  sum2 = 0
  for idx, ele in enumerate(test_tuple):
    if idx % 2:
      sum1 += ele
    else:
      sum2 += ele
  return ((sum1),(sum2)) ",324,Write a function to extract the sum of alternate chains of tuples.,"['assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)', 'assert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)', 'assert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)']",[],"def sum_alternate_chains(tuples_list):
    if not tuples_list:
        return 0

    # Flatten the list of tuples into a single list
    flattened_list = [item for sublist in tuples_list for item in sublist]

    # Calculate the sum of alternate elements
    sum_of_alternates = sum(flattened_list[i] for i in range(0, len(flattened_list), 2))

    return sum_of_alternates",,,,,
Write a python function to find the minimum number of squares whose sum is equal to a given number.,"def get_Min_Squares(n):
    if n <= 3:
        return n;
    res = n 
    for x in range(1,n + 1):
        temp = x * x;
        if temp > n:
            break
        else:
            res = min(res,1 + get_Min_Squares(n  - temp)) 
    return res;",325,Write a python function to find the minimum number of squares whose sum is equal to a given number.,"['assert get_Min_Squares(6) == 3', 'assert get_Min_Squares(2) == 2', 'assert get_Min_Squares(4) == 1']",[],,,,,,
Write a function to get the word with most number of occurrences in the given strings list.,"from collections import defaultdict 

def most_occurrences(test_list):
  temp = defaultdict(int)
  for sub in test_list:
    for wrd in sub.split():
      temp[wrd] += 1
  res = max(temp, key=temp.get)
  return (str(res)) ",326,Write a function to get the word with most number of occurrences in the given strings list.,"['assert most_occurrences([""UTS is best for RTF"", ""RTF love UTS"", ""UTS is best""] ) == \'UTS\'', 'assert most_occurrences([""Its been a great year"", ""this year is so worse"", ""this year is okay""] ) == \'year\'', 'assert most_occurrences([""Families can be reunited"", ""people can be reunited"", ""Tasks can be achieved ""] ) == \'can\'']",[],"def get_most_frequent_word(strings):
    # Convert the list of strings into a single string
    combined_string = ''.join(strings)
    
    # Split the combined string into individual words
    words = combined_string.split()
    
    # Create a dictionary to store word counts
    word_counts = {}
    
    # Count the occurrences of each word
    for word in words:
        if word in word_counts:
            word_counts[word] += 1
        else:
            word_counts[word] = 1
    
    # Find the word with the maximum count
    most_frequent_word = max(word_counts, key=word_counts.get)
    
    return most_frequent_word",,,,,
Write a function to print check if the triangle is isosceles or not.,"def check_isosceles(x,y,z):
  if x==y or y==z or z==x:
	   return True
  else:
     return False",327,Write a function to print check if the triangle is isosceles or not.,"['assert check_isosceles(6,8,12)==False ', 'assert check_isosceles(6,6,12)==True', 'assert check_isosceles(6,16,20)==False']",[],"def is_isosceles(a, b, c):
    # Check if the sides form a valid triangle
    if a + b > c and a + c > b and b + c > a:
        # Check if any two sides are equal
        if a == b or a == c or b == c:
            return True
    return False",,,,,
Write a function to rotate a given list by specified number of items to the left direction.,"def rotate_left(list1,m,n):
  result =  list1[m:]+list1[:n]
  return result",328,Write a function to rotate a given list by specified number of items to the left direction.,"['assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]', 'assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]', 'assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]']",[],"def rotate_list_left(lst, num_items):
    if not lst or num_items <= 0:
        return lst

    num_items %= len(lst)  # Ensure num_items is within the range of list length
    return lst[-num_items:] + lst[:-num_items]",,,,,
Write a python function to count negative numbers in a list.,"def neg_count(list):
  neg_count= 0
  for num in list: 
    if num <= 0: 
      neg_count += 1
  return neg_count ",329,Write a python function to count negative numbers in a list.,"['assert neg_count([-1,-2,3,-4,-5]) == 4', 'assert neg_count([1,2,3]) == 0', 'assert neg_count([1,2,-3,-10,20]) == 2']",[],"def count_negative_numbers(lst):
    count = 0
    for num in lst:
        if isinstance(num, (int, float)) and num < 0:
            count += 1
    return count",,,,,
"Write a function to find all three, four, five characters long words in the given string by using regex.","import re
def find_char(text):
  return (re.findall(r""\b\w{3,5}\b"", text))",330,"Write a function to find all three, four, five characters long words in the given string by using regex.","[""assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']"", ""assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']"", ""assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']""]",[],"import re

def find_words_of_length(string, lengths):
    pattern = r'\b\w{{{}}}\b'.format('|'.join(map(str, lengths)))
    words = re.findall(pattern, string)
    return words",,,,,
Write a python function to count unset bits of a given number.,"def count_unset_bits(n): 
    count = 0
    x = 1
    while(x < n + 1): 
        if ((x & n) == 0): 
            count += 1
        x = x << 1
    return count  ",331,Write a python function to count unset bits of a given number.,"['assert count_unset_bits(2) == 1', 'assert count_unset_bits(4) == 2', 'assert count_unset_bits(6) == 1']",[],"def count_unset_bits(n):
    unset_bits = 0
    while n:
        if not n & 1:
            unset_bits += 1
        n >>= 1
    return unset_bits",,,,,
Write a function to count character frequency of a given string.,"def char_frequency(str1):
    dict = {}
    for n in str1:
        keys = dict.keys()
        if n in keys:
            dict[n] += 1
        else:
            dict[n] = 1
    return dict",332,Write a function to count character frequency of a given string.,"[""assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}"", ""assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}"", ""assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}""]",[],,,,,,
Write a python function to sort a list according to the second element in sublist.,"def Sort(sub_li): 
    sub_li.sort(key = lambda x: x[1]) 
    return sub_li ",333,Write a python function to sort a list according to the second element in sublist.,"[""assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]"", ""assert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]"", ""assert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]""]",[],"def sort_by_second_element(lst):
    return sorted(lst, key=lambda x: x[1])",,,,,
Write a python function to check whether the triangle is valid or not if sides are given.,"def check_Validity(a,b,c):  
    if (a + b <= c) or (a + c <= b) or (b + c <= a) : 
        return False
    else: 
        return True        ",334,Write a python function to check whether the triangle is valid or not if sides are given.,"['assert check_Validity(1,2,3) == False', 'assert check_Validity(2,3,5) == False', 'assert check_Validity(7,10,5) == True']",[],"def is_valid_triangle(a, b, c):
    # Check if all sides are positive
    if a <= 0 or b <= 0 or c <= 0:
        return False
    
    # Check if the sum of any two sides is greater than the third side
    if a + b > c and a + c > b and b + c > a:
        return True
    
    return False",,,,,
Write a function to find the sum of arithmetic progression.,"def ap_sum(a,n,d):
  total = (n * (2 * a + (n - 1) * d)) / 2
  return total",335,Write a function to find the sum of arithmetic progression.,"['assert ap_sum(1,5,2)==25', 'assert ap_sum(2,6,4)==72', 'assert ap_sum(1,4,5)==34']",[],,,,,,
Write a function to check whether the given month name contains 28 days or not.,"def check_monthnum(monthname1):
  if monthname1 == ""February"":
    return True
  else:
    return False",336,Write a function to check whether the given month name contains 28 days or not.,"['assert check_monthnum(""February"")==True', 'assert check_monthnum(""January"")==False', 'assert check_monthnum(""March"")==False']",[],"def has_28_days(month_name):
    months_with_28_days = ['February']
    return month_name.lower() in months_with_28_days",,,,,
"Write a function that matches a word at the end of a string, with optional punctuation.","import re
def text_match_word(text):
        patterns = '\w+\S*$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return 'Not matched!'",337,"Write a function that matches a word at the end of a string, with optional punctuation.","['assert text_match_word(""python."")==(\'Found a match!\')', 'assert text_match_word(""python."")==(\'Found a match!\')', 'assert text_match_word(""  lang  ."")==(\'Not matched!\')']",[],,,,,,
Write a python function to count the number of substrings with same first and last characters.,"def check_Equality(s): 
    return (ord(s[0]) == ord(s[len(s) - 1])); 
def count_Substring_With_Equal_Ends(s): 
    result = 0; 
    n = len(s); 
    for i in range(n):
        for j in range(1,n-i+1): 
            if (check_Equality(s[i:i+j])): 
                result+=1; 
    return result; ",338,Write a python function to count the number of substrings with same first and last characters.,"[""assert count_Substring_With_Equal_Ends('aba') == 4"", ""assert count_Substring_With_Equal_Ends('abcab') == 7"", ""assert count_Substring_With_Equal_Ends('abc') == 3""]",[],"def count_same_first_last_substrings(chars):
    count = 0
    n = len(chars)
    
    for i in range(n):
        for j in range(i + 2, n + 1):
            substring = chars[i:j]
            if len(substring) > 1 and substring[0] == substring[-1]:
                count += 1
    
    return count",,,,,
Write a python function to find the maximum occuring divisor in an interval.,"def find_Divisor(x,y):  
    if (x==y): 
        return y 
    return 2",339,Write a python function to find the maximum occuring divisor in an interval.,"['assert find_Divisor(2,2) == 2', 'assert find_Divisor(2,5) == 2', 'assert find_Divisor(5,10) == 2']",[],"def find_max_occurring_divisor(start, end):
    divisor_counts = {}
    
    for num in range(start, end + 1):
        for divisor in range(1, num + 1):
            if num % divisor == 0:
                divisor_counts[divisor] = divisor_counts.get(divisor, 0) + 1
    
    max_count = 0
    max_divisor = None
    
    for divisor, count in divisor_counts.items():
        if count > max_count:
            max_count = count
            max_divisor = divisor
    
    return max_divisor",,,,,
Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.,"def sum_three_smallest_nums(lst):
	return sum(sorted([x for x in lst if x > 0])[:3])",340,Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.,"['assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37', 'assert sum_three_smallest_nums([1,2,3,4,5]) == 6', 'assert sum_three_smallest_nums([0,1,2,3,4,5]) == 6']",[],"def sum_three_lowest_positive(numbers):
    positive_numbers = [num for num in numbers if num > 0]
    positive_numbers.sort()
    return sum(positive_numbers[:3])",,,,,
Write a function to convert the given set into ordered tuples.,"def set_to_tuple(s):
  t = tuple(sorted(s))
  return (t)",341,Write a function to convert the given set into ordered tuples.,"['assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)', 'assert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)', 'assert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)']",[],"def convert_set_to_ordered_tuples(input_set):
    # Sort the elements of the set to ensure a consistent order
    sorted_elements = sorted(input_set)
    
    # Initialize an empty list to store the ordered tuples
    ordered_tuples = []
    
    # Iterate over the sorted elements to create tuples
    current_tuple = ()
    for element in sorted_elements:
        # Check if the element is a string or a number
        if isinstance(element, str):
            # If it's a string, check if it's a separator (e.g., ',')
            if element == ',':
                # If it's a separator, append the current tuple to the list
                if current_tuple:
                    ordered_tuples.append(current_tuple)
                    current_tuple = ()
            else:
                # If it's not a separator, append it to the current tuple
                current_tuple += (element,)
        elif isinstance(element, int):
            # If it's a number, append it to the current tuple
            current_tuple += (element,)
    
    # Append the last tuple to the list (if any)
    if current_tuple:
        ordered_tuples.append(current_tuple)
    
    return ordered_tuples",,,,,
Write a function to find the smallest range that includes at-least one element from each of the given arrays.,"from heapq import heappop, heappush
class Node:
    def __init__(self, value, list_num, index):
        self.value = value
        self.list_num = list_num
        self.index = index
    def __lt__(self, other):
        return self.value < other.value
def find_minimum_range(list):
    high = float('-inf')
    p = (0, float('inf'))
    pq = []
    for i in range(len(list)):
        heappush(pq, Node(list[i][0], i, 0))
        high = max(high, list[i][0])
    while True:
        top = heappop(pq)
        low = top.value
        i = top.list_num
        j = top.index
        if high - low < p[1] - p[0]:
            p = (low, high)
        if j == len(list[i]) - 1:
            return p
        heappush(pq, Node(list[i][j + 1], i, j + 1))
        high = max(high, list[i][j + 1])",342,Write a function to find the smallest range that includes at-least one element from each of the given arrays.,"['assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)', 'assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)', 'assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)']",[],"def find_smallest_range(arrays):
    if not arrays or not all(arrays):
        return None

    # Find the minimum and maximum values in each array
    mins = [min(arr) for arr in arrays if arr]
    maxs = [max(arr) for arr in arrays if arr]

    # Initialize the range to the entire range of the first array
    start, end = min(mins), max(maxs)

    # Iterate over all possible ranges and find the smallest one
    for i in range(len(mins)):
        for j in range(len(maxs)):
            if i != j:
                # If the current range doesn't overlap with the range of the current array,
                # update the range to include the current array's range
                if maxs[i] < mins[j] or maxs[j] < mins[i]:
                    start = max(start, mins[i])
                    end = min(end, maxs[j])

    # Check if the range is valid (i.e., it includes at least one element from each array)
    if end - start >= 0:
        return start, end
    else:
        return None",,,,,
Write a function to calculate the number of digits and letters in a string.,"def dig_let(s):
 d=l=0
 for c in s:
    if c.isdigit():
        d=d+1
    elif c.isalpha():
        l=l+1
    else:
        pass
 return (l,d)",343,Write a function to calculate the number of digits and letters in a string.,"['assert dig_let(""python"")==(6,0)', 'assert dig_let(""program"")==(7,0)', 'assert dig_let(""python3.0"")==(6,2)']",[],"def count_digits_and_letters(string):
    digits = 0
    letters = 0
    
    for char in string:
        if char.isdigit():
            digits += 1
        elif char.isalpha():
            letters += 1
    
    return digits, letters",,,,,
Write a python function to find number of elements with odd factors in a given range.,"def count_Odd_Squares(n,m): 
    return int(m**0.5) - int((n-1)**0.5) ",344,Write a python function to find number of elements with odd factors in a given range.,"['assert count_Odd_Squares(5,100) == 8', 'assert count_Odd_Squares(8,65) == 6', 'assert count_Odd_Squares(2,5) == 1']",[],"def count_odd_factors(start, end):
    count = 0
    for num in range(start, end + 1):
        factors = []
        for i in range(1, num + 1):
            if num % i == 0:
                factors.append(i)
        if len(factors) % 2 != 0:
            count += 1
    return count",,,,,
Write a function to find the difference between two consecutive numbers in a given list.,"def diff_consecutivenums(nums):
    result = [b-a for a, b in zip(nums[:-1], nums[1:])]
    return result",345,Write a function to find the difference between two consecutive numbers in a given list.,"['assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]', 'assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]', 'assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]']",[],"def consecutive_differences(numbers):
    if len(numbers) < 2:
        return []
    
    differences = []
    for i in range(len(numbers) - 1):
        diff = numbers[i + 1] - numbers[i]
        differences.append(diff)
    
    return differences",,,,,
"Write a function to find entringer number e(n, k).","def zigzag(n, k): 
	if (n == 0 and k == 0): 
		return 1
	if (k == 0): 
		return 0
	return zigzag(n, k - 1) + zigzag(n - 1, n - k)",346,"Write a function to find entringer number e(n, k).","['assert zigzag(4, 3) == 5', 'assert zigzag(4, 2) == 4', 'assert zigzag(3, 1) == 1']",[],,,,,,
Write a python function to count the number of squares in a rectangle.,"def count_Squares(m,n): 
    if (n < m): 
        temp = m 
        m = n 
        n = temp 
    return n * (n + 1) * (3 * m - n + 1) // 6",347,Write a python function to count the number of squares in a rectangle.,"['assert count_Squares(4,3) == 20', 'assert count_Squares(1,2) == 2', 'assert count_Squares(2,2) == 5']",[],"def count_squares_in_rectangle(width, height):
    """"""
    Counts the number of squares in a rectangle of given width and height.

    :param width: The width of the rectangle.
    :param height: The height of the rectangle.
    :return: The number of squares in the rectangle.
    """"""
    # The number of squares in a rectangle is the sum of squares from 1 to the minimum of width and height
    return sum(i**2 for i in range(1, min(width, height) + 1))",,,,,
Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.,"def bin_coff(n, r): 
	val = 1
	if (r > (n - r)): 
		r = (n - r) 
	for i in range(0, r): 
		val *= (n - i) 
		val //= (i + 1) 
	return val 
def find_ways(M): 
	n = M // 2
	a = bin_coff(2 * n, n) 
	b = a // (n + 1) 
	return (b) ",348,Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.,"['assert find_ways(4) == 2', 'assert find_ways(6) == 5', 'assert find_ways(8) == 14']",[],,,,,,
Write a python function to check whether the given string is a binary string or not.,"def check(string) :
    p = set(string) 
    s = {'0', '1'} 
    if s == p or p == {'0'} or p == {'1'}: 
        return (""Yes"") 
    else : 
        return (""No"") ",349,Write a python function to check whether the given string is a binary string or not.,"['assert check(""01010101010"") == ""Yes""', 'assert check(""name0"") == ""No""', 'assert check(""101"") == ""Yes""']",[],"def is_binary_string(string):
    return all(char in '01' for char in string)",,,,,
Write a python function to minimize the length of the string by removing occurrence of only one character.,"def minimum_Length(s) : 
    maxOcc = 0
    n = len(s) 
    arr = [0]*26
    for i in range(n) : 
        arr[ord(s[i]) -ord('a')] += 1
    for i in range(26) : 
        if arr[i] > maxOcc : 
            maxOcc = arr[i] 
    return n - maxOcc ",350,Write a python function to minimize the length of the string by removing occurrence of only one character.,"['assert minimum_Length(""mnm"") == 1', 'assert minimum_Length(""abcda"") == 3', 'assert minimum_Length(""abcb"") == 2']",[],"def minimize_string_length(s):
    # Find the character whose removal would minimize the string length
    min_length = len(s)
    min_char = None
    for char in set(s):
        new_string = s.replace(char, '')
        if len(new_string) < min_length:
            min_length = len(new_string)
            min_char = char
    
    # Return the string with the minimizing character removed
    return s.replace(min_char, '') if min_char else s",,,,,
Write a python function to find the first element occurring k times in a given array.,"def first_Element(arr,n,k): 
    count_map = {}; 
    for i in range(0, n): 
        if(arr[i] in count_map.keys()): 
            count_map[arr[i]] += 1
        else: 
            count_map[arr[i]] = 1
        i += 1
    for i in range(0, n):  
        if (count_map[arr[i]] == k): 
            return arr[i] 
        i += 1 
    return -1",351,Write a python function to find the first element occurring k times in a given array.,"['assert first_Element([0,1,2,3,4,5],6,1) == 0', 'assert first_Element([1,2,1,3,4],5,2) == 1', 'assert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2']",[],"def find_first_element_k_times(arr, k):
    count_dict = {}
    for num in arr:
        if num in count_dict:
            count_dict[num] += 1
        else:
            count_dict[num] = 1
        if count_dict[num] == k:
            return num
    return None",,,,,
Write a python function to check whether all the characters in a given string are unique.,"def unique_Characters(str):
    for i in range(len(str)):
        for j in range(i + 1,len(str)): 
            if (str[i] == str[j]):
                return False;
    return True;",352,Write a python function to check whether all the characters in a given string are unique.,"[""assert unique_Characters('aba') == False"", ""assert unique_Characters('abc') == True"", ""assert unique_Characters('abab') == False""]",[],"def are_characters_unique(string):
    char_set = set()
    for char in string:
        if char in char_set:
            return False
        char_set.add(char)
    return True",,,,,
Write a function to remove a specified column from a given nested list.,"def remove_column(list1, n):
   for i in list1: 
    del i[n] 
   return list1",353,Write a function to remove a specified column from a given nested list.,"['assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]', 'assert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]', 'assert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]']",[],"def remove_column(nested_list, column_index):
    if not isinstance(nested_list, list) or not all(isinstance(sublist, list) for sublist in nested_list):
        raise ValueError(""Input must be a nested list of lists."")
    
    if column_index < 0 or column_index >= len(nested_list[0]):
        raise IndexError(""Column index out of range."")
    
    return [[item for index, item in enumerate(sublist) if index != column_index] for sublist in nested_list]",,,,,
Write a function to find t-nth term of arithemetic progression.,"def tn_ap(a,n,d):
  tn = a + (n - 1) * d
  return tn",354,Write a function to find t-nth term of arithemetic progression.,"['assert tn_ap(1,5,2)==9', 'assert tn_ap(2,6,4)==22', 'assert tn_ap(1,4,5)==16']",[],,,,,,
Write a python function to count the number of rectangles in a circle of radius r.,"def count_Rectangles(radius):  
    rectangles = 0 
    diameter = 2 * radius 
    diameterSquare = diameter * diameter 
    for a in range(1, 2 * radius):  
        for b in range(1, 2 * radius): 
            diagnalLengthSquare = (a * a +  b * b)  
            if (diagnalLengthSquare <= diameterSquare) : 
                rectangles += 1
    return rectangles ",355,Write a python function to count the number of rectangles in a circle of radius r.,"['assert count_Rectangles(2) == 8', 'assert count_Rectangles(1) == 1', 'assert count_Rectangles(0) == 0']",[],"import math

def count_rectangles_in_circle(r):
    # Calculate the diameter of the circle
    diameter = 2 * r
    
    # Calculate the number of rectangles that can fit horizontally and vertically
    # within the diameter
    horizontal_count = math.floor(diameter)
    vertical_count = math.floor(diameter)
    
    # The total number of rectangles is the product of the horizontal and vertical counts
    total_rectangles = horizontal_count * vertical_count
    
    return total_rectangles",,,,,
Write a function to find the third angle of a triangle using two angles.,"def find_angle(a,b):
 c = 180 - (a + b)
 return c
",356,Write a function to find the third angle of a triangle using two angles.,"['assert find_angle(47,89)==44', 'assert find_angle(45,95)==40', 'assert find_angle(50,40)==90']",[],"def find_third_angle(angle1, angle2):
    """"""
    Find the third angle of a triangle given two angles.
    
    :param angle1: The first angle of the triangle (in degrees).
    :param angle2: The second angle of the triangle (in degrees).
    :return: The third angle of the triangle (in degrees).
    """"""
    # Calculate the third angle using the triangle angle sum property
    third_angle = 180 - (angle1 + angle2)
    return third_angle",,,,,
Write a function to find the maximum element of all the given tuple records.,"def find_max(test_list):
  res = max(int(j) for i in test_list for j in i)
  return (res) ",357,Write a function to find the maximum element of all the given tuple records.,"['assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10', 'assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11', 'assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12']",[],"def find_max_element(records):
    max_element = float('-inf')
    for record in records:
        for element in record:
            if element > max_element:
                max_element = element
    return max_element",,,,,
Write a function to find modulo division of two lists using map and lambda function.,"def moddiv_list(nums1,nums2):
  result = map(lambda x, y: x % y, nums1, nums2)
  return list(result)",358,Write a function to find modulo division of two lists using map and lambda function.,"['assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]', 'assert moddiv_list([3,2],[1,4])==[0, 2]', 'assert moddiv_list([90,120],[50,70])==[40, 50]']",[],"def modulo_division(list1, list2):
    return list(map(lambda x, y: x % y, list1, list2))",,,,,
Write a python function to check whether one root of the quadratic equation is twice of the other or not.,"def Check_Solution(a,b,c): 
    if (2*b*b == 9*a*c): 
        return (""Yes""); 
    else: 
        return (""No""); ",359,Write a python function to check whether one root of the quadratic equation is twice of the other or not.,"['assert Check_Solution(1,3,2) == ""Yes""', 'assert Check_Solution(1,2,3) == ""No""', 'assert Check_Solution(1,-5,6) == ""No""']",[],,,,,,
Write a function to find the n’th carol number.,"def get_carol(n): 
	result = (2**n) - 1
	return result * result - 2",360,Write a function to find the n’th carol number.,"['assert get_carol(2) == 7', 'assert get_carol(4) == 223', 'assert get_carol(5) == 959']",[],,,,,,
Write a function to remove empty lists from a given list of lists.,"def remove_empty(list1):
  remove_empty = [x for x in list1 if x]
  return remove_empty",361,Write a function to remove empty lists from a given list of lists.,"[""assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']"", ""assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']"", ""assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']""]",[],,,,,,
Write a python function to find the item with maximum occurrences in a given list.,"def max_occurrences(nums):
    max_val = 0
    result = nums[0] 
    for i in nums:
        occu = nums.count(i)
        if occu > max_val:
            max_val = occu
            result = i 
    return result",362,Write a python function to find the item with maximum occurrences in a given list.,"['assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2', 'assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0', 'assert max_occurrences([1,2,3,1,2,4,1]) == 1']",[],"def find_max_occurrences(lst):
    # Create a dictionary to store the count of each item
    item_counts = {}
    
    # Iterate over the list and count the occurrences of each item
    for item in lst:
        if item in item_counts:
            item_counts[item] += 1
        else:
            item_counts[item] = 1
    
    # Find the item with the maximum count
    max_item = max(item_counts, key=item_counts.get)
    
    # Return the item with the maximum occurrences
    return max_item",,,,,
Write a function to add the k elements to each element in the tuple.,"def add_K_element(test_list, K):
  res = [tuple(j + K for j in sub ) for sub in test_list]
  return (res) ",363,Write a function to add the k elements to each element in the tuple.,"['assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]', 'assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]', 'assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]']",[],"def add_k_to_elements(tuples, k):
    return tuple(tuple(element + k for element in sub_tuple) for sub_tuple in tuples)",,,,,
Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.,"def make_flip(ch): 
	return '1' if (ch == '0') else '0'
def get_flip_with_starting_charcter(str, expected): 
	flip_count = 0
	for i in range(len( str)): 
		if (str[i] != expected): 
			flip_count += 1
		expected = make_flip(expected) 
	return flip_count 
def min_flip_to_make_string_alternate(str): 
	return min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) ",364,Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.,"['assert min_flip_to_make_string_alternate(""0001010111"") == 2', 'assert min_flip_to_make_string_alternate(""001"") == 1', 'assert min_flip_to_make_string_alternate(""010111011"") == 2 ']",[],"def flips_to_alternate(binary_string):
    flips = 0
    prev_char = None
    
    for char in binary_string:
        if prev_char is not None and char == prev_char:
            flips += 1
            if char == '0':
                char = '1'
            else:
                char = '0'
        prev_char = char
    
    return flips",,,,,
Write a python function to count the number of digits of a given number.,"def count_Digit(n):
    count = 0
    while n != 0:
        n //= 10
        count += 1
    return count",365,Write a python function to count the number of digits of a given number.,"['assert count_Digit(12345) == 5', 'assert count_Digit(11223305) == 8', 'assert count_Digit(4123459) == 7']",[],"def count_digits(number):
    return len(str(number))",,,,,
Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.,"def adjacent_num_product(list_nums):
    return max(a*b for a, b in zip(list_nums, list_nums[1:]))",366,Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.,"['assert adjacent_num_product([1,2,3,4,5,6]) == 30', 'assert adjacent_num_product([1,2,3,4,5]) == 20', 'assert adjacent_num_product([2,3]) == 6']",[],"def find_largest_adjacent_product(numbers):
    if len(numbers) < 2:
        return None  # No adjacent elements to multiply

    max_product = float('-inf')  # Initialize with negative infinity

    for i in range(len(numbers) - 1):
        product = numbers[i] * numbers[i + 1]
        max_product = max(max_product, product)

    return max_product",,,,,
Write a function to check if a binary tree is balanced or not.,"class Node: 
	def __init__(self, data): 
		self.data = data 
		self.left = None
		self.right = None
def get_height(root): 
	if root is None: 
		return 0
	return max(get_height(root.left), get_height(root.right)) + 1
def is_tree_balanced(root): 
	if root is None: 
		return True
	lh = get_height(root.left) 
	rh = get_height(root.right) 
	if (abs(lh - rh) <= 1) and is_tree_balanced( 
	root.left) is True and is_tree_balanced( root.right) is True: 
		return True
	return False",367,Write a function to check if a binary tree is balanced or not.,"['assert is_tree_balanced(root) == False', 'assert is_tree_balanced(root1) == True', 'assert is_tree_balanced(root2) == False ']",[],"class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def is_balanced(root):
    def height(node):
        if not node:
            return 0
        left_height = height(node.left)
        if left_height == -1:
            return -1
        right_height = height(node.right)
        if right_height == -1:
            return -1
        if abs(left_height - right_height) > 1:
            return -1
        return max(left_height, right_height) + 1

    return height(root) != -1",,,,,
Write a function to repeat the given tuple n times.,"def repeat_tuples(test_tup, N):
  res = ((test_tup, ) * N)
  return (res) ",368,Write a function to repeat the given tuple n times.,"['assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))', 'assert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))', 'assert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))']",[],,,,,,
Write a function to find the lateral surface area of cuboid,"def lateralsurface_cuboid(l,w,h):
  LSA = 2*h*(l+w)
  return LSA",369,Write a function to find the lateral surface area of cuboid,"['assert lateralsurface_cuboid(8,5,6)==156', 'assert lateralsurface_cuboid(7,9,10)==320', 'assert lateralsurface_cuboid(10,20,30)==1800']",[],"def lateral_surface_area_cuboid(length, width, height):
    """"""
    Calculate the lateral surface area of a cuboid.
    
    :param length: Length of the cuboid
    :param width: Width of the cuboid
    :param height: Height of the cuboid
    :return: Lateral surface area of the cuboid
    """"""
    return 2 * (length + width) * height",,,,,
Write a function to sort a tuple by its float element.,"def float_sort(price):
  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)
  return float_sort",370,Write a function to sort a tuple by its float element.,"[""assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] "", ""assert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] "", ""assert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] ""]",[],"def sort_tuple_by_float(tup):
    # Extract the float elements from the tuple
    floats = [float(item[1]) for item in tup if isinstance(item, tuple) and len(item) == 2 and isinstance(item[1], str)]
    
    # Sort the tuple based on the extracted float elements
    sorted_tup = sorted(tup, key=lambda x: floats[tup.index(x)] if isinstance(x, tuple) and len(x) == 2 and isinstance(x[1], str) else float('inf'))
    
    return sorted_tup",,,,,
Write a function to find the smallest missing element in a sorted array.,"def smallest_missing(A, left_element, right_element):
    if left_element > right_element:
        return left_element
    mid = left_element + (right_element - left_element) // 2
    if A[mid] == mid:
        return smallest_missing(A, mid + 1, right_element)
    else:
        return smallest_missing(A, left_element, mid - 1)",371,Write a function to find the smallest missing element in a sorted array.,"['assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7', 'assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3', 'assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0']",[],"def find_smallest_missing_element(arr):
    left, right = 0, len(arr) - 1
    missing = len(arr)  # Initialize missing as the length of the array (a conservative estimate)

    while left <= right:
        mid = (left + right) // 2

        # If the middle element is not equal to its index,
        # then the missing element must be between the current index and the middle element.
        if arr[mid] != mid:
            missing = mid  # Update the missing element to the current index
            right = mid - 1  # Search in the left half of the array
        else:
            left = mid + 1  # Search in the right half of the array

    # If the missing element is still the length of the array,
    # then all elements are present and the missing element is the length of the array.
    return missing if missing == len(arr) else arr[missing]",,,,,
Write a function to sort a given list of elements in ascending order using heap queue algorithm.,"import heapq as hq
def heap_assending(nums):
  hq.heapify(nums)
  s_result = [hq.heappop(nums) for i in range(len(nums))]
  return s_result",372,Write a function to sort a given list of elements in ascending order using heap queue algorithm.,"['assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]', 'assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]', 'assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]']",[],"import heapq

def heap_sort(arr):
    # Convert the list to a min heap
    heap = [-x for x in arr]
    heapq.heapify(heap)

    # Extract elements from the heap and convert them back to positive
    sorted_arr = [-heapq.heappop(heap) for _ in range(len(arr))]
    return sorted_arr",,,,,
Write a function to find the volume of a cuboid.,"def volume_cuboid(l,w,h):
  volume=l*w*h
  return volume",373,Write a function to find the volume of a cuboid.,"['assert volume_cuboid(1,2,3)==6', 'assert volume_cuboid(5,7,9)==315', 'assert volume_cuboid(10,15,21)==3150']",[],"def volume_cuboid(length, width, height):
    return length * width * height",,,,,
Write a function to print all permutations of a given string including duplicates.,"def permute_string(str):
    if len(str) == 0:
        return ['']
    prev_list = permute_string(str[1:len(str)])
    next_list = []
    for i in range(0,len(prev_list)):
        for j in range(0,len(str)):
            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]
            if new_str not in next_list:
                next_list.append(new_str)
    return next_list",374,Write a function to print all permutations of a given string including duplicates.,"[""assert permute_string('ab')==['ab', 'ba']"", ""assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']"", ""assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']""]",[],,,,,,
Write a function to round the given number to the nearest multiple of a specific number.,"def round_num(n,m):
    a = (n //m) * m
    b = a + m
    return (b if n - a > b - n else a)",375,Write a function to round the given number to the nearest multiple of a specific number.,"['assert round_num(4722,10)==4720', 'assert round_num(1111,5)==1110', 'assert round_num(219,2)==218']",[],"def round_to_nearest_multiple(number, multiple):
    return round(number / multiple) * multiple",,,,,
Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.,"def remove_replica(test_tup):
  temp = set()
  res = tuple(ele if ele not in temp and not temp.add(ele) 
				else 'MSP' for ele in test_tup)
  return (res)",376,Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.,"[""assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')"", ""assert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')"", ""assert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')""]",[],,,,,,
Write a python function to remove all occurrences of a character in a given string.,"def remove_Char(s,c) :  
    counts = s.count(c) 
    s = list(s) 
    while counts :  
        s.remove(c) 
        counts -= 1 
    s = '' . join(s)   
    return (s) ",377,Write a python function to remove all occurrences of a character in a given string.,"['assert remove_Char(""aba"",\'a\') == ""b""', 'assert remove_Char(""toggle"",\'g\') == ""tole""', 'assert remove_Char(""aabbc"",\'b\') == ""aac""']",[],"def remove_character(string, character):
    return string.replace(character, '')
assert remove_character('Hello, world!', '') == 'Heo, word!'",,,,,
Write a python function to shift last element to first position in the given list.,"def move_first(test_list):
  test_list = test_list[-1:] + test_list[:-1]  
  return test_list",378,Write a python function to shift last element to first position in the given list.,"['assert move_first([1,2,3,4]) == [4,1,2,3]', 'assert move_first([0,1,2,3]) == [3,0,1,2]', 'assert move_first([9,8,7,1]) == [1,9,8,7]']",[],"def shift_last_to_first(lst):
    if lst:  # Check if the list is not empty
        last_element = lst.pop()  # Remove and return the last element
        lst.insert(0, last_element)  # Insert the last element at the beginning of the list
    return lst",,,,,
Write a function to find the surface area of a cuboid.,"def surfacearea_cuboid(l,w,h):
  SA = 2*(l*w + l * h + w * h)
  return SA",379,Write a function to find the surface area of a cuboid.,"['assert surfacearea_cuboid(1,2,3)==22', 'assert surfacearea_cuboid(5,7,9)==286', 'assert surfacearea_cuboid(10,15,21)==1350']",[],"def surface_area_cuboid(length, width, height):
    """"""
    Calculates the surface area of a cuboid.
    
    :param length: Length of the cuboid
    :param width: Width of the cuboid
    :param height: Height of the cuboid
    :return: Surface area of the cuboid
    """"""
    return 2 * (length * width + width * height + height * length)",,,,,
Write a function to generate a two-dimensional array.,"def multi_list(rownum,colnum):
  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]
  for row in range(rownum):
    for col in range(colnum):
        multi_list[row][col]= row*col
  return multi_list
",380,Write a function to generate a two-dimensional array.,"['assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] ', 'assert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]', 'assert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]']",[],"def generate_2d_array(rows, cols):
    return [[i * cols + j for j in range(cols)] for i in range(rows)]",,,,,
Write a function to sort a list of lists by a given index of the inner list.,"from operator import itemgetter
def index_on_inner_list(list_data, index_no):
    result = sorted(list_data, key=itemgetter(index_no))
    return result",381,Write a function to sort a list of lists by a given index of the inner list.,"[""assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]"", ""assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]"", ""assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]""]",[],"def sort_list_of_lists_by_index(lst, index):
    return sorted(lst, key=lambda x: x[index])",,,,,
Write a function to find the number of rotations in a circularly sorted array.,"def find_rotation_count(A):
    (left, right) = (0, len(A) - 1)
    while left <= right:
        if A[left] <= A[right]:
            return left
        mid = (left + right) // 2
        next = (mid + 1) % len(A)
        prev = (mid - 1 + len(A)) % len(A)
        if A[mid] <= A[next] and A[mid] <= A[prev]:
            return mid
        elif A[mid] <= A[right]:
            right = mid - 1
        elif A[mid] >= A[left]:
            left = mid + 1
    return -1",382,Write a function to find the number of rotations in a circularly sorted array.,"['assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3', 'assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3', 'assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0']",[],"def find_rotation_count(arr):
    if not arr or len(arr) < 2:
        return 0

    low = 0
    high = len(arr) - 1

    while low < high:
        mid = low + (high - low) // 2

        if arr[mid] > arr[high]:
            low = mid + 1
        elif arr[mid] < arr[high]:
            high = mid
        else:
            # If the middle element is the pivot, we need to search in the right half
            # to find the first element that is less than the pivot
            while mid < len(arr) - 1 and arr[mid] == arr[mid + 1]:
                mid += 1
            high = mid

    # low and high will point to adjacent elements in the final iteration
    # The rotation count is the index of the low element (which is now the pivot)
    return low",,,,,
Write a python function to toggle all odd bits of a given number.,"def even_bit_toggle_number(n) : 
    res = 0; count = 0; temp = n    
    while(temp > 0 ) : 
        if (count % 2 == 0) : 
            res = res | (1 << count)      
        count = count + 1
        temp >>= 1 
    return n ^ res ",383,Write a python function to toggle all odd bits of a given number.,"['assert even_bit_toggle_number(10) == 15', 'assert even_bit_toggle_number(20) == 1', 'assert even_bit_toggle_number(30) == 11']",[],"def toggle_odd_bits(num):
    # Convert the number to binary representation
    binary = bin(num)[2:]
    
    # Toggle the odd bits
    toggled_binary = ''.join('1' if i % 2 != 0 and c == '0' else '0' if i % 2 != 0 and c == '1' else c for i, c in enumerate(binary))
    
    # Convert the toggled binary representation back to decimal
    toggled_num = int(toggled_binary, 2)
    
    return toggled_num",,,,,
Write a python function to find the frequency of the smallest value in a given array.,"def frequency_Of_Smallest(n,arr): 
    mn = arr[0] 
    freq = 1
    for i in range(1,n): 
        if (arr[i] < mn): 
            mn = arr[i] 
            freq = 1
        elif (arr[i] == mn): 
            freq += 1
    return freq ",384,Write a python function to find the frequency of the smallest value in a given array.,"['assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1', 'assert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1', 'assert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3']",[],,,,,,
Write a function to find the n'th perrin number using recursion.,"def get_perrin(n):
  if (n == 0):
    return 3
  if (n == 1):
    return 0
  if (n == 2):
    return 2 
  return get_perrin(n - 2) + get_perrin(n - 3)",385,Write a function to find the n'th perrin number using recursion.,"['assert get_perrin(9) == 12', 'assert get_perrin(4) == 2', 'assert get_perrin(6) == 5']",[],,,,,,
Write a function to find out the minimum no of swaps required for bracket balancing in the given string.,"def swap_count(s):
	chars = s
	count_left = 0
	count_right = 0
	swap = 0
	imbalance = 0; 
	for i in range(len(chars)):
		if chars[i] == '[':
			count_left += 1
			if imbalance > 0:
				swap += imbalance
				imbalance -= 1
		elif chars[i] == ']':
			count_right += 1
			imbalance = (count_right - count_left) 
	return swap",386,Write a function to find out the minimum no of swaps required for bracket balancing in the given string.,"['assert swap_count(""[]][]["") == 2', 'assert swap_count(""[[][]]"") == 0', 'assert swap_count(""[[][]]]["") == 1']",[],"def min_swaps_for_balance(s):
    stack = []
    swaps = 0
    open_brackets = {'(': 1, '[': 2, '{': 3, '<': 4}
    close_brackets = {')': 1, ']': 2, '}': 3, '>': 4}

    for char in s:
        if char in open_brackets:
            stack.append(open_brackets[char])
        elif char in close_brackets:
            if not stack or stack[-1] != close_brackets[char]:
                swaps += 1
            else:
                stack.pop()

    # Additional swaps might be needed if there are unmatched opening brackets
    swaps += len(stack)

    return swaps",,,,,
Write a python function to check whether the hexadecimal number is even or odd.,"def even_or_odd(N): 
    l = len(N) 
    if (N[l-1] =='0'or N[l-1] =='2'or 
        N[l-1] =='4'or N[l-1] =='6'or 
        N[l-1] =='8'or N[l-1] =='A'or 
        N[l-1] =='C'or N[l-1] =='E'): 
        return (""Even"") 
    else: 
        return (""Odd"") ",387,Write a python function to check whether the hexadecimal number is even or odd.,"['assert even_or_odd(""AB3454D"") ==""Odd""', 'assert even_or_odd(""ABC"") == ""Even""', 'assert even_or_odd(""AAD"") == ""Odd""']",[],,,,,,
Write a python function to find the highest power of 2 that is less than or equal to n.,"def highest_Power_of_2(n): 
    res = 0; 
    for i in range(n, 0, -1): 
        if ((i & (i - 1)) == 0): 
            res = i; 
            break; 
    return res; ",388,Write a python function to find the highest power of 2 that is less than or equal to n.,"['assert highest_Power_of_2(10) == 8', 'assert highest_Power_of_2(19) == 16', 'assert highest_Power_of_2(32) == 32']",[],"def highest_power_of_2(n):
    power = 0
    while (2 ** power) <= n:
        power += 1
    return 2 ** (power - 1)",,,,,
Write a function to find the n'th lucas number.,"def find_lucas(n): 
	if (n == 0): 
		return 2
	if (n == 1): 
		return 1
	return find_lucas(n - 1) + find_lucas(n - 2) ",389,Write a function to find the n'th lucas number.,"['assert find_lucas(9) == 76', 'assert find_lucas(4) == 7', 'assert find_lucas(3) == 4']",[],,,,,,
Write a function to insert a given string at the beginning of all items in a list.,"def add_string(list,string):
 add_string=[string.format(i) for i in  list]
 return add_string",390,Write a function to insert a given string at the beginning of all items in a list.,"[""assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']"", ""assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']"", ""assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']""]",[],"def add_prefix_to_list(lst, prefix):
    return [prefix + item for item in lst]",,,,,
Write a function to convert more than one list to nested dictionary.,"def convert_list_dictionary(l1, l2, l3):
     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]
     return result",391,Write a function to convert more than one list to nested dictionary.,"['assert convert_list_dictionary([""S001"", ""S002"", ""S003"", ""S004""],[""Adina Park"", ""Leyton Marsh"", ""Duncan Boyle"", ""Saim Richards""] ,[85, 98, 89, 92])==[{\'S001\': {\'Adina Park\': 85}}, {\'S002\': {\'Leyton Marsh\': 98}}, {\'S003\': {\'Duncan Boyle\': 89}}, {\'S004\': {\'Saim Richards\': 92}}]', 'assert convert_list_dictionary([""abc"",""def"",""ghi"",""jkl""],[""python"",""program"",""language"",""programs""],[100,200,300,400])==[{\'abc\':{\'python\':100}},{\'def\':{\'program\':200}},{\'ghi\':{\'language\':300}},{\'jkl\':{\'programs\':400}}]', 'assert convert_list_dictionary([""A1"",""A2"",""A3"",""A4""],[""java"",""C"",""C++"",""DBMS""],[10,20,30,40])==[{\'A1\':{\'java\':10}},{\'A2\':{\'C\':20}},{\'A3\':{\'C++\':30}},{\'A4\':{\'DBMS\':40}}]']",[],"def convert_lists_to_nested_dict(keys, values, *args):
    if not args:
        return {k: v for k, v in zip(keys, values)}
    else:
        nested_dict = {}
        for key, value in zip(keys, values):
            nested_dict[key] = convert_lists_to_nested_dict(args[0], args[1], *args[2:])
        return nested_dict",,,,,
"Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).","def get_max_sum (n):
	res = list()
	res.append(0)
	res.append(1)
	i = 2
	while i<n + 1:
		res.append(max(i, (res[int(i / 2)] 
						+ res[int(i / 3)] +
							res[int(i / 4)]
						+ res[int(i / 5)])))
		i = i + 1
	return res[n]",392,"Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).","['assert get_max_sum(60) == 106', 'assert get_max_sum(10) == 12', 'assert get_max_sum(2) == 2']",[],"def max_sum(n):
    # Base case: if n is 1 or less, return n itself
    if n <= 1:
        return n

    # Recursive case: calculate the maximum sum using the equation
    max_val = n
    if n % 2 == 0:
        max_val = max(max_val, max_sum(n // 2) + max_sum(n - n // 2))
    if n % 3 == 0:
        max_val = max(max_val, max_sum(n // 3) + max_sum(n - n // 3))
    if n % 4 == 0:
        max_val = max(max_val, max_sum(n // 4) + max_sum(n - n // 4))
    if n % 5 == 0:
        max_val = max(max_val, max_sum(n // 5) + max_sum(n - n // 5))

    return max_val",,,,,
Write a function to find the list with maximum length using lambda function.,"def max_length_list(input_list):
    max_length = max(len(x) for x in input_list )   
    max_list = max(input_list, key = lambda i: len(i))    
    return(max_length, max_list)",393,Write a function to find the list with maximum length using lambda function.,"['assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])', 'assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])', 'assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])']",[],"def find_max_length_list(lst):
    return max(lst, key=lambda x: len(x))",,,,,
Write a function to check if given tuple is distinct or not.,"def check_distinct(test_tup):
  res = True
  temp = set()
  for ele in test_tup:
    if ele in temp:
      res = False
      break
    temp.add(ele)
  return (res) ",394,Write a function to check if given tuple is distinct or not.,"['assert check_distinct((1, 4, 5, 6, 1, 4)) == False', 'assert check_distinct((1, 4, 5, 6)) == True', 'assert check_distinct((2, 3, 4, 5, 6)) == True']",[],,,,,,
Write a python function to find the first non-repeated character in a given string.,"def first_non_repeating_character(str1):
  char_order = []
  ctr = {}
  for c in str1:
    if c in ctr:
      ctr[c] += 1
    else:
      ctr[c] = 1 
      char_order.append(c)
  for c in char_order:
    if ctr[c] == 1:
      return c
  return None",395,Write a python function to find the first non-repeated character in a given string.,"['assert first_non_repeating_character(""abcabc"") == None', 'assert first_non_repeating_character(""abc"") == ""a""', 'assert first_non_repeating_character(""ababc"") == ""c""']",[],"def find_first_non_repeated_char(s):
    char_count = {}
    for char in s:
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1
    
    for char in s:
        if char_count[char] == 1:
            return char
    
    return None  # If there are no non-repeated characters",,,,,
Write a function to check whether the given string starts and ends with the same character or not using regex.,"import re  
regex = r'^[a-z]$|^([a-z]).*\1$'
def check_char(string): 
	if(re.search(regex, string)): 
		return ""Valid"" 
	else: 
		return ""Invalid"" ",396,Write a function to check whether the given string starts and ends with the same character or not using regex.,"['assert check_char(""abba"") == ""Valid""', 'assert check_char(""a"") == ""Valid""', 'assert check_char(""abcd"") == ""Invalid""']",[],"import re

def starts_and_ends_with_same_char(string):
    pattern = r'^(.)\1$'
    return bool(re.match(pattern, string))
strings = [
    ""[]"", ""''"", ""a"", ""ssert"", ""check_char(\""abba\"")"", ""== \""Valid\"","",
    ""'assert check_char(\""a\"")"", ""== \""Valid\"","", ""'assert check_char(\""abcd\"")"",
    ""== \""Invalid\"",""
]

for string in strings:
    result = starts_and_ends_with_same_char(string)
    print(f""Does '{string}' start and end with the same character? {result}"")",,,,,
Write a function to find the median of three specific numbers.,"def median_numbers(a,b,c):
 if a > b:
    if a < c:
        median = a
    elif b > c:
        median = b
    else:
        median = c
 else:
    if a > c:
        median = a
    elif b < c:
        median = b
    else:
        median = c
 return median",397,Write a function to find the median of three specific numbers.,"['assert median_numbers(25,55,65)==55.0', 'assert median_numbers(20,10,30)==20.0', 'assert median_numbers(15,45,75)==45.0']",[],"def find_median(num1, num2, num3):
    # Sort the numbers in ascending order
    sorted_nums = sorted([num1, num2, num3])
    
    # Calculate the index of the middle number
    middle_index = len(sorted_nums) // 2
    
    # Return the middle number as the median
    return sorted_nums[middle_index]",,,,,
Write a function to compute the sum of digits of each number of a given list.,"def sum_of_digits(nums):
    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",398,Write a function to compute the sum of digits of each number of a given list.,"['assert sum_of_digits([10,2,56])==14', ""assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19"", 'assert sum_of_digits([10,20,-4,5,-70])==19']",[],"def sum_of_digits(numbers):
    return [sum(int(digit) for digit in str(num)) for num in numbers]",,,,,
Write a function to perform the mathematical bitwise xor operation across the given tuples.,"def bitwise_xor(test_tup1, test_tup2):
  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ",399,Write a function to perform the mathematical bitwise xor operation across the given tuples.,"['assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)', 'assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)', 'assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)']",[],"def bitwise_xor_tuples(*tuples):
    result = []
    for i in range(len(max(tuples, key=len))):
        bit_xor = 0
        for tup in tuples:
            if i < len(tup):
                bit_xor ^= tup[i]
        result.append(bit_xor)
    return tuple(result)",,,,,
Write a function to extract the frequency of unique tuples in the given list order irrespective.,"def extract_freq(test_list):
  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))
  return (res)",400,Write a function to extract the frequency of unique tuples in the given list order irrespective.,"['assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3', 'assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4', 'assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4']",[],,,,,,
Write a function to perform index wise addition of tuple elements in the given two nested tuples.,"def add_nested_tuples(test_tup1, test_tup2):
  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ",401,Write a function to perform index wise addition of tuple elements in the given two nested tuples.,"['assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))', 'assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))', 'assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))']",[],"def add_nested_tuples(tuple1, tuple2):
    if len(tuple1) != len(tuple2):
        raise ValueError(""The nested tuples must have the same number of elements"")

    result = []
    for sub_tuple1, sub_tuple2 in zip(tuple1, tuple2):
        if len(sub_tuple1) != len(sub_tuple2):
            raise ValueError(""The sub-tuples at the same index must have the same number of elements"")

        sub_result = tuple(a + b for a, b in zip(sub_tuple1, sub_tuple2))
        result.append(sub_result)

    return tuple(result)",,,,,
Write a function to compute the value of ncr%p.,"def ncr_modp(n, r, p): 
    C = [0 for i in range(r+1)]   
    C[0] = 1
    for i in range(1, n+1): 
        for j in range(min(i, r), 0, -1): 
            C[j] = (C[j] + C[j-1]) % p   
    return C[r] ",402,Write a function to compute the value of ncr%p.,"['assert ncr_modp(10,2,13)==6', 'assert ncr_modp(15,12,43)==25', 'assert ncr_modp(17,9,18)==10']",[],"def ncr_mod_p(n, r, p):
    # Initialize numerator and denominator
    numerator = 1
    denominator = 1

    # Compute the numerator (n * (n-1) * ... * (n-r+1))
    for i in range(r):
        numerator = (numerator * (n - i)) % p

    # Compute the denominator (r! = r * (r-1) * ... * 1)
    for i in range(1, r + 1):
        denominator = (denominator * i) % p

    # Compute the result (numerator / denominator) % p
    result = (numerator * pow(denominator, p - 2, p)) % p
    return result",,,,,
Write a function to check if a url is valid or not using regex.,"import re
def is_valid_URL(str):
	regex = (""((http|https)://)(www.)?"" +
			""[a-zA-Z0-9@:%._\\+~#?&//=]"" +
			""{2,256}\\.[a-z]"" +
			""{2,6}\\b([-a-zA-Z0-9@:%"" +
			""._\\+~#?&//=]*)"")
	p = re.compile(regex)
	if (str == None):
		return False
	if(re.search(p, str)):
		return True
	else:
		return False",403,Write a function to check if a url is valid or not using regex.,"['assert is_valid_URL(""https://www.google.com"") == True', 'assert is_valid_URL(""https:/www.gmail.com"") == False', 'assert is_valid_URL(""https:// www.redit.com"") == False']",[],,,,,,
Write a python function to find the minimum of two numbers.,"def minimum(a,b):   
    if a <= b: 
        return a 
    else: 
        return b ",404,Write a python function to find the minimum of two numbers.,"['assert minimum(1,2) == 1', 'assert minimum(-5,-4) == -5', 'assert minimum(0,0) == 0']",[],"def minimum(a, b):
    if a < b:
        return a
    else:
        return b",,,,,
Write a function to check whether an element exists within a tuple.,"def check_tuplex(tuplex,tuple1): 
  if tuple1 in tuplex:
    return True
  else:
     return False",405,Write a function to check whether an element exists within a tuple.,"['assert check_tuplex((""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""),\'r\')==True', 'assert check_tuplex((""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""),\'5\')==False', 'assert check_tuplex((""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"",""e""),3)==True']",[],,,,,,
Write a python function to find the parity of a given number.,"def find_Parity(x): 
    y = x ^ (x >> 1); 
    y = y ^ (y >> 2); 
    y = y ^ (y >> 4); 
    y = y ^ (y >> 8); 
    y = y ^ (y >> 16); 
    if (y & 1): 
        return (""Odd Parity""); 
    return (""Even Parity""); ",406,Write a python function to find the parity of a given number.,"['assert find_Parity(12) == ""Even Parity""', 'assert find_Parity(7) == ""Odd Parity""', 'assert find_Parity(10) == ""Even Parity""']",[],"def find_parity(number):
    if number % 2 == 0:
        return ""Even Parity""
    else:
        return ""Odd Parity""",,,,,
Write a function to create the next bigger number by rearranging the digits of a given number.,"def rearrange_bigger(n):
    nums = list(str(n))
    for i in range(len(nums)-2,-1,-1):
        if nums[i] < nums[i+1]:
            z = nums[i:]
            y = min(filter(lambda x: x > z[0], z))
            z.remove(y)
            z.sort()
            nums[i:] = [y] + z
            return int("""".join(nums))
    return False",407,Write a function to create the next bigger number by rearranging the digits of a given number.,"['assert rearrange_bigger(12)==21', 'assert rearrange_bigger(10)==False', 'assert rearrange_bigger(102)==120']",[],"def next_bigger_number(n):
    # Convert the number to a string of digits
    digits = list(str(n))
    
    # Find the first digit from right to left that is smaller than the digit next to it
    i = len(digits) - 2
    while i >= 0 and digits[i] >= digits[i + 1]:
        i -= 1
    
    # If no such digit is found, it means the digits are in descending order
    # and there is no way to rearrange them to form a bigger number
    if i < 0:
        return False
    
    # Find the smallest digit from the right that is greater than the digit found in the previous step
    j = len(digits) - 1
    while digits[j] <= digits[i]:
        j -= 1
    
    # Swap the two digits
    digits[i], digits[j] = digits[j], digits[i]
    
    # Reverse the sublist from the index found in the first step to the end
    digits[i + 1:] = reversed(digits[i + 1:])
    
    # Convert the digits back to a number
    return int(''.join(digits))",,,,,
Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.,"import heapq
def k_smallest_pairs(nums1, nums2, k):
   queue = []
   def push(i, j):
       if i < len(nums1) and j < len(nums2):
           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])
   push(0, 0)
   pairs = []
   while queue and len(pairs) < k:
       _, i, j = heapq.heappop(queue)
       pairs.append([nums1[i], nums2[j]])
       push(i, j + 1)
       if j == 0:
           push(i + 1, 0)
   return pairs",408,Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.,"['assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]', 'assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]', 'assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]']",[],,,,,,
Write a function to find the minimum product from the pairs of tuples within a given list.,"def min_product_tuple(list1):
    result_min = min([abs(x * y) for x, y in list1] )
    return result_min",409,Write a function to find the minimum product from the pairs of tuples within a given list.,"['assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8', 'assert min_product_tuple([(10,20), (15,2), (5,10)] )==30', 'assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100']",[],"def find_min_product(lst):
    products = [a * b for pair in lst for a, b in pair]
    return min(products)",,,,,
Write a function to find the minimum value in a given heterogeneous list.,"def min_val(listval):
     min_val = min(i for i in listval if isinstance(i, int))
     return min_val",410,Write a function to find the minimum value in a given heterogeneous list.,"[""assert min_val(['Python', 3, 2, 4, 5, 'version'])==2"", ""assert min_val(['Python', 15, 20, 25])==15"", ""assert min_val(['Python', 30, 20, 40, 50, 'version'])==20""]",[],"def find_min_value(lst):
    min_value = float('inf')  # Initialize minimum value to positive infinity

    for item in lst:
        if isinstance(item, (int, float)):  # Check if the item is numeric
            if item < min_value:
                min_value = item  # Update minimum value if a smaller one is found

    return min_value if min_value != float('inf') else None  # Return the minimum value or None if no numeric values are found",,,,,
Write a function to convert the given snake case string to camel case string by using regex.,"import re
def snake_to_camel(word):
  return ''.join(x.capitalize() or '_' for x in word.split('_'))",411,Write a function to convert the given snake case string to camel case string by using regex.,"[""assert snake_to_camel('android_tv') == 'AndroidTv'"", ""assert snake_to_camel('google_pixel') == 'GooglePixel'"", ""assert snake_to_camel('apple_watch') == 'AppleWatch'""]",[],,,,,,
Write a python function to remove odd numbers from a given list.,"def remove_odd(l):
    for i in l:
        if i % 2 != 0:
            l.remove(i)
    return l",412,Write a python function to remove odd numbers from a given list.,"['assert remove_odd([1,2,3]) == [2]', 'assert remove_odd([2,4,6]) == [2,4,6]', 'assert remove_odd([10,20,3]) == [10,20]']",[],"def remove_odd_numbers(lst):
    return [num for num in lst if num % 2 == 0]",,,,,
Write a function to extract the nth element from a given list of tuples.,"def extract_nth_element(list1, n):
    result = [x[n] for x in list1]
    return result",413,Write a function to extract the nth element from a given list of tuples.,"[""assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']"", ""assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]"", ""assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]""]",[],"def extract_nth_element(lst, n):
    """"""
    Extracts the nth element from a list of tuples.
    
    :param lst: List of tuples.
    :param n: Index of the element to extract.
    :return: A list containing the nth element from each tuple in the list.
    """"""
    return [tup[n] for tup in lst]",,,,,
Write a python function to check whether the value exists in a sequence or not.,"def overlapping(list1,list2):  
    c=0
    d=0
    for i in list1: 
        c+=1
    for i in list2: 
        d+=1
    for i in range(0,c): 
        for j in range(0,d): 
            if(list1[i]==list2[j]): 
                return 1
    return 0",414,Write a python function to check whether the value exists in a sequence or not.,"['assert overlapping([1,2,3,4,5],[6,7,8,9]) == False', 'assert overlapping([1,2,3],[4,5,6]) == False', 'assert overlapping([1,4,5],[1,4,5]) == True']",[],,,,,,
Write a python function to find a pair with highest product from a given array of integers.,"def max_Product(arr): 
    arr_len = len(arr) 
    if (arr_len < 2): 
        return (""No pairs exists"")           
    x = arr[0]; y = arr[1]      
    for i in range(0,arr_len): 
        for j in range(i + 1,arr_len): 
            if (arr[i] * arr[j] > x * y): 
                x = arr[i]; y = arr[j] 
    return x,y    ",415,Write a python function to find a pair with highest product from a given array of integers.,"['assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)', 'assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)', 'assert max_Product([1,2,3]) == (2,3)']",[],"def find_max_product_pair(arr):
    # Sort the array in ascending order
    arr.sort()
    
    # Initialize variables to store the maximum product and the pair
    max_product = float('-inf')
    max_pair = None
    
    # Iterate through the array from both ends
    left = 0
    right = len(arr) - 1
    
    while left < right:
        # Calculate the current product
        current_product = arr[left] * arr[right]
        
        # Update the maximum product and pair if necessary
        if current_product > max_product:
            max_product = current_product
            max_pair = (arr[left], arr[right])
        
        # Move the pointers towards the center
        if arr[left] < 0 and arr[right] > 0:
            left += 1
        else:
            right -= 1
    
    return max_pair",,,,,
Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.,"MAX = 1000000
def breakSum(n): 
	dp = [0]*(n+1) 
	dp[0] = 0
	dp[1] = 1
	for i in range(2, n+1): 
		dp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); 
	return dp[n]",416,Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.,"['assert breakSum(12) == 13', 'assert breakSum(24) == 27', 'assert breakSum(23) == 23']",[],"def max_sum_of_three_parts(n):
    def find_max_sum(num, parts):
        if num == 0 and parts == 3:
            return 0
        if num < 0 or parts < 3:
            return float('-inf')
        
        max_sum = float('-inf')
        for i in range(1, num + 1):
            remaining_sum = find_max_sum(num - i, parts - 1)
            if remaining_sum != float('-inf'):
                max_sum = max(max_sum, i + remaining_sum)
        
        return max_sum
    
    return find_max_sum(n, 3)",,,,,
Write a function to find common first element in given list of tuple.,"def group_tuples(Input): 
	out = {} 
	for elem in Input: 
		try: 
			out[elem[0]].extend(elem[1:]) 
		except KeyError: 
			out[elem[0]] = list(elem) 
	return [tuple(values) for values in out.values()] ",417,Write a function to find common first element in given list of tuple.,"[""assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]"", ""assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]"", ""assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]""]",[],"def find_common_first_element(tuples_list):
    if not tuples_list or not all(isinstance(tup, tuple) for tup in tuples_list):
        return None
    
    first_elements = [tup[0] for tup in tuples_list]
    common_element = set(first_elements).intersection(*[set(tup) for tup in tuples_list])
    
    if len(common_element) == 1:
        return common_element.pop()
    else:
        return None",,,,,
Write a python function to find the sublist having maximum length.,"def Find_Max(lst): 
    maxList = max((x) for x in lst) 
    return maxList",418,Write a python function to find the sublist having maximum length.,"[""assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']"", 'assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]', 'assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]']",[],,,,,,
Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.,"def round_and_sum(list1):
  lenght=len(list1)
  round_and_sum=sum(list(map(round,list1))* lenght)
  return round_and_sum",419,Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.,"['assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243', 'assert round_and_sum([5,2,9,24.3,29])==345', 'assert round_and_sum([25.0,56.7,89.2])==513']",[],"def round_and_sum(numbers):
    rounded_numbers = [round(num) for num in numbers]
    total_sum = sum(rounded_numbers)
    length = len(numbers)
    result = total_sum * length
    print(result)

# Example usage
round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])",,,,,
Write a python function to find the cube sum of first n even natural numbers.,"def cube_Sum(n): 
    sum = 0
    for i in range(1,n + 1): 
        sum += (2*i)*(2*i)*(2*i) 
    return sum",420,Write a python function to find the cube sum of first n even natural numbers.,"['assert cube_Sum(2) == 72', 'assert cube_Sum(3) == 288', 'assert cube_Sum(4) == 800']",[],"def cube_sum_even_numbers(n):
    sum_cubes = 0
    even_number = 2
    for _ in range(n):
        sum_cubes += even_number ** 3
        even_number += 2
    return sum_cubes",,,,,
Write a function to concatenate each element of tuple by the delimiter.,"def concatenate_tuple(test_tup):
    delim = ""-""
    res = ''.join([str(ele) + delim for ele in test_tup])
    res = res[ : len(res) - len(delim)]
    return (str(res)) ",421,Write a function to concatenate each element of tuple by the delimiter.,"['assert concatenate_tuple((""ID"", ""is"", 4, ""UTS"") ) == \'ID-is-4-UTS\'', 'assert concatenate_tuple((""QWE"", ""is"", 4, ""RTY"") ) == \'QWE-is-4-RTY\'', 'assert concatenate_tuple((""ZEN"", ""is"", 4, ""OP"") ) == \'ZEN-is-4-OP\'']",[],,,,,,
Write a python function to find the average of cubes of first n natural numbers.,"def find_Average_Of_Cube(n):  
    sum = 0
    for i in range(1, n + 1): 
        sum += i * i * i  
    return round(sum / n, 6) ",422,Write a python function to find the average of cubes of first n natural numbers.,"['assert find_Average_Of_Cube(2) == 4.5', 'assert find_Average_Of_Cube(3) == 12', 'assert find_Average_Of_Cube(1) == 1']",[],"def find_average_of_cubes(n):
    total_sum = 0
    for i in range(1, n + 1):
        total_sum += i ** 3
    average = total_sum / n
    return average",,,,,
Write a function to solve gold mine problem.,"def get_maxgold(gold, m, n): 
    goldTable = [[0 for i in range(n)] 
                        for j in range(m)]   
    for col in range(n-1, -1, -1): 
        for row in range(m):  
            if (col == n-1): 
                right = 0
            else: 
                right = goldTable[row][col+1] 
            if (row == 0 or col == n-1): 
                right_up = 0
            else: 
                right_up = goldTable[row-1][col+1] 
            if (row == m-1 or col == n-1): 
                right_down = 0
            else: 
                right_down = goldTable[row+1][col+1] 
            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) 
    res = goldTable[0][0] 
    for i in range(1, m): 
        res = max(res, goldTable[i][0])  
    return res ",423,Write a function to solve gold mine problem.,"['assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16', 'assert get_maxgold([[10,20],[30,40]],2,2)==70', 'assert get_maxgold([[4,9],[3,7]],2,2)==13']",[],"def get_max_gold(mine, row_start, col_start):
    # Initialize variables
    max_gold = 0
    rows, cols = len(mine), len(mine[0])
    visited = [[False] * cols for _ in range(rows)]
    
    # Define helper function to explore neighboring cells
    def explore(row, col, total_gold):
        nonlocal max_gold
        
        # Check if current cell is out of bounds or already visited
        if row < 0 or row >= rows or col < 0 or col >= cols or visited[row][col]:
            return
        
        # Mark current cell as visited
        visited[row][col] = True
        
        # Add gold from current cell to total gold
        total_gold += mine[row][col]
        
        # Update max_gold if necessary
        max_gold = max(max_gold, total_gold)
        
        # Recursively explore neighboring cells
        explore(row - 1, col, total_gold)  # Up
        explore(row + 1, col, total_gold)  # Down
        explore(row, col - 1, total_gold)  # Left
        explore(row, col + 1, total_gold)  # Right
    
    # Start exploring from the given starting position
    explore(row_start, col_start, 0)
    
    return max_gold",,,,,
Write a function to extract only the rear index element of each string in the given tuple.,"def extract_rear(test_tuple):
  res = list(sub[len(sub) - 1] for sub in test_tuple)
  return (res) ",424,Write a function to extract only the rear index element of each string in the given tuple.,"[""assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']"", ""assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']"", ""assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']""]",[],,,,,,
Write a function to count the number of sublists containing a particular element.,"def count_element_in_list(list1, x): 
    ctr = 0
    for i in range(len(list1)): 
        if x in list1[i]: 
            ctr+= 1          
    return ctr",425,Write a function to count the number of sublists containing a particular element.,"['assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3', ""assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3"", ""assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1""]",[],,,,,,
Write a function to filter odd numbers using lambda function.,"def filter_oddnumbers(nums):
 odd_nums = list(filter(lambda x: x%2 != 0, nums))
 return odd_nums",426,Write a function to filter odd numbers using lambda function.,"['assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]', 'assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]', 'assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]']",[],"def filter_odd_numbers(numbers):
    return list(filter(lambda x: x % 2 != 0, numbers))",,,,,
Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.,"import re
def change_date_format(dt):
        return re.sub(r'(\d{4})-(\d{1,2})-(\d{1,2})', '\\3-\\2-\\1', dt)",427,Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.,"['assert change_date_format(""2026-01-02"") == \'02-01-2026\'', 'assert change_date_format(""2020-11-13"") == \'13-11-2020\'', 'assert change_date_format(""2021-04-26"") == \'26-04-2021\'']",[],"import re

def convert_date_format(date_str):
    # Use regex to match the year, month, and day
    match = re.match(r'(\d{4})-(\d{2})-(\d{2})', date_str)
    if match:
        year, month, day = match.groups()
        # Reformat the date as dd-mm-yyyy
        return f'{day}-{month}-{year}'
    else:
        return None  # Return None if the date format is incorrect",,,,,
Write a function to sort the given array by using shell sort.,"def shell_sort(my_list):
    gap = len(my_list) // 2
    while gap > 0:
        for i in range(gap, len(my_list)):
            current_item = my_list[i]
            j = i
            while j >= gap and my_list[j - gap] > current_item:
                my_list[j] = my_list[j - gap]
                j -= gap
            my_list[j] = current_item
        gap //= 2

    return my_list",428,Write a function to sort the given array by using shell sort.,"['assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]', 'assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]', 'assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]']",[],"def shell_sort(arr):
    n = len(arr)
    gap = n // 2

    while gap > 0:
        for i in range(gap, n):
            temp = arr[i]
            j = i

            while j >= gap and arr[j - gap] > temp:
                arr[j] = arr[j - gap]
                j -= gap

            arr[j] = temp

        gap //= 2

    return arr",,,,,
Write a function to extract the elementwise and tuples from the given two tuples.,"def and_tuples(test_tup1, test_tup2):
  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ",429,Write a function to extract the elementwise and tuples from the given two tuples.,"['assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)', 'assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)', 'assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)']",[],"def extract_elements(tuple1, tuple2, indices):
    return tuple(tuple1[i] if i < len(tuple1) else None for i in indices), tuple(tuple2[i] if i < len(tuple2) else None for i in indices)",,,,,
Write a function to find the directrix of a parabola.,"def parabola_directrix(a, b, c): 
  directrix=((int)(c - ((b * b) + 1) * 4 * a ))
  return directrix",430,Write a function to find the directrix of a parabola.,"['assert parabola_directrix(5,3,2)==-198', 'assert parabola_directrix(9,8,4)==-2336', 'assert parabola_directrix(2,4,6)==-130']",[],"def find_directrix(a, b, c):
    # Calculate the discriminant
    D = b**2 - 4*a*c
    
    # Calculate the focus and vertex of the parabola
    focus_x = -b / (2*a)
    vertex_y = -D / (4*a)
    
    # Calculate the directrix
    directrix_y = vertex_y - 1 / (4*a)
    
    return directrix_y",,,,,
Write a function that takes two lists and returns true if they have at least one common element.,"def common_element(list1, list2):
     result = False
     for x in list1:
         for y in list2:
             if x == y:
                 result = True
                 return result",431,Write a function that takes two lists and returns true if they have at least one common element.,"['assert common_element([1,2,3,4,5], [5,6,7,8,9])==True', 'assert common_element([1,2,3,4,5], [6,7,8,9])==None', ""assert common_element(['a','b','c'], ['d','b','e'])==True""]",[],"def has_common_element(list1, list2):
    return any(element in list2 for element in list1)",,,,,
Write a function to find the median of a trapezium.,"def median_trapezium(base1,base2,height):
 median = 0.5 * (base1+ base2)
 return median",432,Write a function to find the median of a trapezium.,"['assert median_trapezium(15,25,35)==20', 'assert median_trapezium(10,20,30)==15', 'assert median_trapezium(6,9,4)==7.5']",[],"def median_of_trapezium(sides):
    # Sort the lengths of the sides
    sorted_sides = sorted(sides)
    
    # Find the median
    num_sides = len(sorted_sides)
    if num_sides % 2 == 0:
        # If there are an even number of sides, take the average of the two middle values
        median = (sorted_sides[num_sides // 2 - 1] + sorted_sides[num_sides // 2]) / 2
    else:
        # If there are an odd number of sides, take the middle value
        median = sorted_sides[num_sides // 2]
    
    return median",,,,,
Write a function to check whether the entered number is greater than the elements of the given array.,"def check_greater(arr, number):
  arr.sort()
  if number > arr[-1]:
    return ('Yes, the entered number is greater than those in the array')
  else:
    return ('No, entered number is less than those in the array')",433,Write a function to check whether the entered number is greater than the elements of the given array.,"[""assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'"", ""assert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'"", ""assert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'""]",[],"def check_greater_than_array(number, array):
    return all(number > element for element in array)",,,,,
Write a function that matches a string that has an a followed by one or more b's.,"import re
def text_match_one(text):
        patterns = 'ab+?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')
",434,Write a function that matches a string that has an a followed by one or more b's.,"['assert text_match_one(""ac"")==(\'Not matched!\')', 'assert text_match_one(""dc"")==(\'Not matched!\')', 'assert text_match_one(""abba"")==(\'Found a match!\')']",[],"import re

def match_ab_pattern(string):
    pattern = r'ab+'
    return bool(re.search(pattern, string))",,,,,
Write a python function to find the last digit of a given number.,"def last_Digit(n) :
    return (n % 10) ",435,Write a python function to find the last digit of a given number.,"['assert last_Digit(123) == 3', 'assert last_Digit(25) == 5', 'assert last_Digit(30) == 0']",[],"def last_digit(number):
    return number % 10",,,,,
Write a python function to print negative numbers in a list.,"def neg_nos(list1):
  for num in list1: 
    if num < 0: 
       return num ",436,Write a python function to print negative numbers in a list.,"['assert neg_nos([-1,4,5,-6]) == -1,-6', 'assert neg_nos([-1,-2,3,4]) == -1,-2', 'assert neg_nos([-7,-6,8,9]) == -7,-6']",[],,,,,,
Write a function to remove odd characters in a string.,"def remove_odd(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 == 0):
        str2 = str2 + str1[i - 1]
 return str2",437,Write a function to remove odd characters in a string.,"['assert remove_odd(""python"")==(""yhn"")', 'assert remove_odd(""program"")==(""rga"")', 'assert remove_odd(""language"")==(""agae"")']",[],,,,,,
Write a function to count bidirectional tuple pairs.,"def count_bidirectional(test_list):
  res = 0
  for idx in range(0, len(test_list)):
    for iidx in range(idx + 1, len(test_list)):
      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:
        res += 1
  return (str(res)) ",438,Write a function to count bidirectional tuple pairs.,"[""assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'"", ""assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'"", ""assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'""]",[],"def count_bidirectional_tuple_pairs(lst):
    tuple_pairs = set()
    bidirectional_pairs = 0

    for i in range(len(lst)):
        for j in range(i + 1, len(lst)):
            tuple1 = tuple(lst[i])
            tuple2 = tuple(lst[j])

            # Check if the tuples are bidirectional
            if tuple1 == tuple2[::-1] or tuple2 == tuple1[::-1]:
                tuple_pair = (tuple1, tuple2)
                if tuple_pair not in tuple_pairs:
                    tuple_pairs.add(tuple_pair)
                    bidirectional_pairs += 1

    return bidirectional_pairs",,,,,
Write a function to convert a list of multiple integers into a single integer.,"def multiple_to_single(L):
  x = int("""".join(map(str, L)))
  return x",439,Write a function to convert a list of multiple integers into a single integer.,"['assert multiple_to_single([11, 33, 50])==113350', 'assert multiple_to_single([-1,2,3,4,5,6])==-123456', 'assert multiple_to_single([10,15,20,25])==10152025']",[],"def convert_list_to_integer(lst):
    return int(''.join(map(str, lst)))",,,,,
Write a function to find all adverbs and their positions in a given sentence.,"import re
def find_adverb_position(text):
 for m in re.finditer(r""\w+ly"", text):
    return (m.start(), m.end(), m.group(0))",440,Write a function to find all adverbs and their positions in a given sentence.,"['assert find_adverb_position(""clearly!! we can see the sky"")==(0, 7, \'clearly\')', 'assert find_adverb_position(""seriously!! there are many roses"")==(0, 9, \'seriously\')', 'assert find_adverb_position(""unfortunately!! sita is going to home"")==(0, 13, \'unfortunately\')']",[],"def find_adverbs_and_positions(sentence):
    # Simple list of common adverbs (you can expand this as needed)
    adverbs = set([""clearly"", ""seriously"", ""unfortunately"", ""unfortunately"", ""seriously"", ""unfortunately""])
    
    # Convert the sentence to lowercase for case-insensitive matching
    sentence = sentence.lower()
    
    # Split the sentence into words
    words = sentence.split()
    
    # Find the positions of adverbs in the sentence
    adverb_positions = [i for i, word in enumerate(words) if word in adverbs]
    
    # Return the adverbs and their positions
    return [(words[pos], pos) for pos in adverb_positions]",,,,,
Write a function to find the surface area of a cube.,"def surfacearea_cube(l):
  surfacearea= 6*l*l
  return surfacearea",441,Write a function to find the surface area of a cube.,"['assert surfacearea_cube(5)==150', 'assert surfacearea_cube(3)==54', 'assert surfacearea_cube(10)==600']",[],"def surface_area_of_cube(side_length):
    return 6 * (side_length ** 2)",,,,,
Write a function to find the ration of positive numbers in an array of integers.,"from array import array
def positive_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x > 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)",442,Write a function to find the ration of positive numbers in an array of integers.,"['assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54', 'assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69', 'assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56']",[],"def positive_number_ratio(arr):
    positive_count = sum(1 for num in arr if num > 0)
    total_count = len(arr)
    return positive_count / total_count if total_count > 0 else 0",,,,,
Write a python function to find the largest negative number from the given list.,"def largest_neg(list1): 
    max = list1[0] 
    for x in list1: 
        if x < max : 
             max = x  
    return max",443,Write a python function to find the largest negative number from the given list.,"['assert largest_neg([1,2,3,-4,-6]) == -6', 'assert largest_neg([1,2,3,-8,-9]) == -9', 'assert largest_neg([1,2,3,4,-1]) == -1']",[],,,,,,
Write a function to trim each tuple by k in the given tuple list.,"def trim_tuple(test_list, K):
  res = []
  for ele in test_list:
    N = len(ele)
    res.append(tuple(list(ele)[K: N - K]))
  return (str(res)) ",444,Write a function to trim each tuple by k in the given tuple list.,"[""assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'"", ""assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'"", ""assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'""]",[],,,,,,
Write a function to perform index wise multiplication of tuple elements in the given two tuples.,"def index_multiplication(test_tup1, test_tup2):
  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ",445,Write a function to perform index wise multiplication of tuple elements in the given two tuples.,"['assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))', 'assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))', 'assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))']",[],"def index_wise_multiplication(tuple1, tuple2):
    # Check if the lengths of the tuples are equal
    if len(tuple1) != len(tuple2):
        raise ValueError(""The lengths of the two tuples must be equal."")

    # Initialize an empty list to store the results
    result = []

    # Iterate over the elements of the tuples
    for subtuple1, subtuple2 in zip(tuple1, tuple2):
        # Perform element-wise multiplication
        multiplied_subtuple = tuple(a * b for a, b in zip(subtuple1, subtuple2))
        # Append the multiplied subtuple to the result
        result.append(multiplied_subtuple)

    # Convert the list of tuples back to a tuple of tuples
    return tuple(result)",,,,,
Write a python function to count the occurence of all elements of list in a tuple.,"from collections import Counter 
def count_Occurrence(tup, lst): 
    count = 0
    for item in tup: 
        if item in lst: 
            count+= 1 
    return count  ",446,Write a python function to count the occurence of all elements of list in a tuple.,"[""assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3"", 'assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6', 'assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2']",[],"def count_elements_in_tuple(lst, tpl):
    element_counts = {}
    for element in lst:
        count = sum(1 for item in tpl if item == element)
        element_counts[element] = count
    return element_counts",,,,,
Write a function to find cubes of individual elements in a list using lambda function.,"def cube_nums(nums):
 cube_nums = list(map(lambda x: x ** 3, nums))
 return cube_nums",447,Write a function to find cubes of individual elements in a list using lambda function.,"['assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]', 'assert cube_nums([10,20,30])==([1000, 8000, 27000])', 'assert cube_nums([12,15])==([1728, 3375])']",[],"def cube_elements(lst):
    return list(map(lambda x: x ** 3, lst))",,,,,
Write a function to calculate the sum of perrin numbers.,"def cal_sum(n): 
	a = 3
	b = 0
	c = 2
	if (n == 0): 
		return 3
	if (n == 1): 
		return 3
	if (n == 2): 
		return 5
	sum = 5
	while (n > 2): 
		d = a + b 
		sum = sum + d 
		a = b 
		b = c 
		c = d 
		n = n-1
	return sum",448,Write a function to calculate the sum of perrin numbers.,"['assert cal_sum(9) == 49', 'assert cal_sum(10) == 66', 'assert cal_sum(11) == 88']",[],"def calculate_perrin_sum(n):
    if n < 0:
        return 0
    
    perrin_sequence = [3, 0, 2]
    
    for i in range(3, n + 1):
        perrin_sequence.append(perrin_sequence[i-2] + perrin_sequence[i-3])
    
    return sum(perrin_sequence[:n+1])",,,,,
Write a python function to check whether the triangle is valid or not if 3 points are given.,"def check_Triangle(x1,y1,x2,y2,x3,y3): 
    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   
    if a == 0: 
        return ('No') 
    else: 
        return ('Yes') ",449,Write a python function to check whether the triangle is valid or not if 3 points are given.,"[""assert check_Triangle(1,5,2,5,4,6) == 'Yes'"", ""assert check_Triangle(1,1,1,4,1,5) == 'No'"", ""assert check_Triangle(1,1,1,1,1,1) == 'No'""]",[],,,,,,
Write a function to extract specified size of strings from a give list of string values.,"def extract_string(str, l):
    result = [e for e in str if len(e) == l] 
    return result",450,Write a function to extract specified size of strings from a give list of string values.,"[""assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']"", ""assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']"", ""assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']""]",[],,,,,,
Write a function to remove all whitespaces from the given string using regex.,"import re
def remove_whitespaces(text1):
  return (re.sub(r'\s+', '',text1))",451,Write a function to remove all whitespaces from the given string using regex.,"[""assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'"", ""assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'"", ""assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'""]",[],,,,,,
Write a function that gives loss amount if the given amount has loss else return none.,"def loss_amount(actual_cost,sale_amount): 
  if(sale_amount > actual_cost):
    amount = sale_amount - actual_cost
    return amount
  else:
    return None",452,Write a function that gives loss amount if the given amount has loss else return none.,"['assert loss_amount(1500,1200)==None', 'assert loss_amount(100,200)==100', 'assert loss_amount(2000,5000)==3000']",[],"def assert_loss_amount(amount, loss):
    if amount < loss:
        return amount - loss
    else:
        return None",,,,,
Write a python function to find the sum of even factors of a number.,"import math 
def sumofFactors(n) : 
    if (n % 2 != 0) : 
        return 0
    res = 1
    for i in range(2, (int)(math.sqrt(n)) + 1) :    
        count = 0
        curr_sum = 1
        curr_term = 1
        while (n % i == 0) : 
            count= count + 1
            n = n // i 
            if (i == 2 and count == 1) : 
                curr_sum = 0
            curr_term = curr_term * i 
            curr_sum = curr_sum + curr_term 
        res = res * curr_sum  
    if (n >= 2) : 
        res = res * (1 + n) 
    return res ",453,Write a python function to find the sum of even factors of a number.,"['assert sumofFactors(18) == 26', 'assert sumofFactors(30) == 48', 'assert sumofFactors(6) == 8']",[],"def sum_of_even_factors(n):
    sum_factors = 0
    for i in range(1, n + 1):
        if n % i == 0 and i % 2 == 0:
            sum_factors += i
    return sum_factors",,,,,
Write a function that matches a word containing 'z'.,"import re
def text_match_wordz(text):
        patterns = '\w*z.\w*'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')",454,Write a function that matches a word containing 'z'.,"['assert text_match_wordz(""pythonz."")==(\'Found a match!\')', 'assert text_match_wordz(""xyz."")==(\'Found a match!\')', 'assert text_match_wordz(""  lang  ."")==(\'Not matched!\')']",[],,,,,,
Write a function to check whether the given month number contains 31 days or not.,"def check_monthnumb_number(monthnum2):
  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):
    return True
  else:
    return False",455,Write a function to check whether the given month number contains 31 days or not.,"['assert check_monthnumb_number(5)==True', 'assert check_monthnumb_number(2)==False', 'assert check_monthnumb_number(6)==False']",[],"def has_31_days(month):
    # Create a set of months with 31 days
    months_with_31_days = {1, 3, 5, 7, 8, 10, 12}
    
    # Check if the given month is in the set
    return month in months_with_31_days",,,,,
Write a function to reverse strings in a given list of string values.,"def reverse_string_list(stringlist):
    result = [x[::-1] for x in stringlist]
    return result",456,Write a function to reverse strings in a given list of string values.,"[""assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']"", ""assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']"", ""assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']""]",[],,,,,,
Write a python function to find the sublist having minimum length.,"def Find_Min(lst): 
    minList = min((x) for x in lst) 
    return minList",457,Write a python function to find the sublist having minimum length.,"['assert Find_Min([[1],[1,2],[1,2,3]]) == [1]', 'assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]', ""assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']""]",[],,,,,,
Write a function to find the area of a rectangle.,"def rectangle_area(l,b):
  area=l*b
  return area",458,Write a function to find the area of a rectangle.,"['assert rectangle_area(10,20)==200', 'assert rectangle_area(10,5)==50', 'assert rectangle_area(4,2)==8']",[],"def rectangle_area(length, width):
    return length * width",,,,,
Write a function to remove uppercase substrings from a given string by using regex.,"import re
def remove_uppercase(str1):
  remove_upper = lambda text: re.sub('[A-Z]', '', text)
  result =  remove_upper(str1)
  return (result)",459,Write a function to remove uppercase substrings from a given string by using regex.,"[""assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'"", ""assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'"", ""assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'""]",[],,,,,,
Write a python function to get the first element of each sublist.,"def Extract(lst): 
    return [item[0] for item in lst] ",460,Write a python function to get the first element of each sublist.,"['assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]', 'assert Extract([[1,2,3],[4, 5]]) == [1,4]', 'assert Extract([[9,8,1],[1,2]]) == [9,1]']",[],,,,,,
Write a python function to count the upper case characters in a given string.,"def upper_ctr(str):
    upper_ctr = 0
    for i in range(len(str)):
          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1
          return upper_ctr",461,Write a python function to count the upper case characters in a given string.,"[""assert upper_ctr('PYthon') == 1"", ""assert upper_ctr('BigData') == 1"", ""assert upper_ctr('program') == 0""]",[],"def count_upper_case(string):
    count = 0
    for char in string:
        if char.isupper():
            count += 1
    return count",,,,,
Write a function to find all possible combinations of the elements of a given list.,"def combinations_list(list1):
    if len(list1) == 0:
        return [[]]
    result = []
    for el in combinations_list(list1[1:]):
        result += [el, el+[list1[0]]]
    return result",462,Write a function to find all possible combinations of the elements of a given list.,"[""assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]"", ""assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]"", ""assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]""]",[],"def get_combinations(lst):
    def backtrack(start, path):
        # Base case: if the path (combination) is not empty, add it to the result
        if path:
            result.append(path)
        
        # Iterate over the remaining elements in the list
        for i in range(start, len(lst)):
            # Exclude duplicates by skipping consecutive elements that are the same
            if i > start and lst[i] == lst[i-1]:
                continue
            
            # Add the current element to the path and recursively explore the next elements
            backtrack(i + 1, path + [lst[i]])
    
    result = []
    backtrack(0, [])
    return result",,,,,
Write a function to find the maximum product subarray of the given array.,"def max_subarray_product(arr):
	n = len(arr)
	max_ending_here = 1
	min_ending_here = 1
	max_so_far = 0
	flag = 0
	for i in range(0, n):
		if arr[i] > 0:
			max_ending_here = max_ending_here * arr[i]
			min_ending_here = min (min_ending_here * arr[i], 1)
			flag = 1
		elif arr[i] == 0:
			max_ending_here = 1
			min_ending_here = 1
		else:
			temp = max_ending_here
			max_ending_here = max (min_ending_here * arr[i], 1)
			min_ending_here = temp * arr[i]
		if (max_so_far < max_ending_here):
			max_so_far = max_ending_here
	if flag == 0 and max_so_far == 0:
		return 0
	return max_so_far",463,Write a function to find the maximum product subarray of the given array.,"['assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112', 'assert max_subarray_product([6, -3, -10, 0, 2]) == 180 ', 'assert max_subarray_product([-2, -40, 0, -2, -3]) == 80']",[],"def max_product_subarray(nums):
    if not nums:
        return 0

    max_product = float('-inf')
    current_max = 1
    current_min = 1

    for num in nums:
        if num < 0:
            current_max, current_min = current_min, current_max

        current_max = max(num, current_max * num)
        current_min = min(num, current_min * num)

        max_product = max(max_product, current_max)

    return max_product",,,,,
Write a function to check if all values are same in a dictionary.,"def check_value(dict, n):
    result = all(x == n for x in dict.values()) 
    return result",464,Write a function to check if all values are same in a dictionary.,"[""assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False"", ""assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True"", ""assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False""]",[],"def check_if_all_values_same(dictionary):
    if not dictionary:
        return True  # Empty dictionary is considered to have all values the same

    first_value = next(iter(dictionary.values()))
    return all(value == first_value for value in dictionary.values())",,,,,
Write a function to drop empty items from a given dictionary.,"def drop_empty(dict1):
  dict1 = {key:value for (key, value) in dict1.items() if value is not None}
  return dict1",465,Write a function to drop empty items from a given dictionary.,"[""assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}"", ""assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}"", ""assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}""]",[],,,,,,
Write a function to find the peak element in the given array.,"def find_peak_util(arr, low, high, n): 
	mid = low + (high - low)/2
	mid = int(mid) 
	if ((mid == 0 or arr[mid - 1] <= arr[mid]) and
		(mid == n - 1 or arr[mid + 1] <= arr[mid])): 
		return mid 
	elif (mid > 0 and arr[mid - 1] > arr[mid]): 
		return find_peak_util(arr, low, (mid - 1), n) 
	else: 
		return find_peak_util(arr, (mid + 1), high, n) 
def find_peak(arr, n): 
	return find_peak_util(arr, 0, n - 1, n) ",466,Write a function to find the peak element in the given array.,"['assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2', 'assert find_peak([2, 3, 4, 5, 6], 5) == 4', 'assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 ']",[],"def find_peak_element(nums):
    left = 0
    right = len(nums) - 1

    while left < right:
        mid = (left + right) // 2

        # If the middle element is greater than its right neighbor,
        # the peak is either the middle element or somewhere on the left side.
        if nums[mid] > nums[mid + 1]:
            right = mid
        # If the middle element is less than its left neighbor,
        # the peak is somewhere on the right side.
        else:
            left = mid + 1

    # left and right will converge to the peak element
    return nums[left]",,,,,
Write a python function to convert decimal number to octal number.,"def decimal_to_Octal(deciNum):
    octalNum = 0
    countval = 1;
    dNo = deciNum;
    while (deciNum!= 0):
        remainder= deciNum % 8;
        octalNum+= remainder*countval;
        countval= countval*10;
        deciNum //= 8; 
    return (octalNum)",467,Write a python function to convert decimal number to octal number.,"['assert decimal_to_Octal(10) == 12', 'assert decimal_to_Octal(2) == 2', 'assert decimal_to_Octal(33) == 41']",[],"def decimal_to_octal(decimal_num):
    return oct(decimal_num)[2:]",,,,,
Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.,"def max_product(arr, n ): 
	mpis =[0] * (n) 
	for i in range(n): 
		mpis[i] = arr[i] 
	for i in range(1, n): 
		for j in range(i): 
			if (arr[i] > arr[j] and
					mpis[i] < (mpis[j] * arr[i])): 
						mpis[i] = mpis[j] * arr[i] 
	return max(mpis)",468,Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.,"['assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 ', 'assert max_product([4, 42, 55, 68, 80], 5) == 50265600', 'assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 ']",[],"def max_increasing_product(nums):
    if not nums:
        return 0

    max_product = float('-inf')
    current_product = 1
    prev_num = float('-inf')

    for num in nums:
        if num > prev_num:
            current_product *= num
            max_product = max(max_product, current_product)
        else:
            current_product = num

        prev_num = num

    return max_product",,,,,
Write a function to find the maximum profit earned from a maximum of k stock transactions,"def max_profit(price, k):
    n = len(price)
    final_profit = [[None for x in range(n)] for y in range(k + 1)]
    for i in range(k + 1):
        for j in range(n):
            if i == 0 or j == 0:
                final_profit[i][j] = 0
            else:
                max_so_far = 0
                for x in range(j):
                    curr_price = price[j] - price[x] + final_profit[i-1][x]
                    if max_so_far < curr_price:
                        max_so_far = curr_price
                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)
    return final_profit[k][n-1]",469,Write a function to find the maximum profit earned from a maximum of k stock transactions,"['assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10', 'assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7', 'assert max_profit([10, 6, 8, 4, 2], 2) == 2']",[],"def max_profit(prices, k):
    if not prices or k == 0:
        return 0
    
    n = len(prices)
    if k >= n // 2:
        # If k is greater than or equal to half the number of prices,
        # we can make a transaction for each price rise.
        return sum(max(0, prices[i] - prices[i-1]) for i in range(1, n))
    
    # dp[i][j] represents the maximum profit after i transactions on the first j+1 prices
    dp = [[0] * (k + 1) for _ in range(n)]
    
    for i in range(1, n):
        max_diff = float('-inf')
        for j in range(1, k + 1):
            # Calculate the maximum difference between buying and selling
            max_diff = max(max_diff, dp[i-1][j-1] - prices[i-1])
            dp[i][j] = max(dp[i-1][j], prices[i] + max_diff)
    
    return dp[n-1][k]",,,,,
Write a function to find the pairwise addition of the elements of the given tuples.,"def add_pairwise(test_tup):
  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ",470,Write a function to find the pairwise addition of the elements of the given tuples.,"['assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)', 'assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)', 'assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)']",[],"def pairwise_addition(tuples):
    result = []
    for t in tuples:
        pairs = zip(t[::2], t[1::2])  # Create pairs of adjacent elements
        result.extend(sum(pair) for pair in pairs)  # Add the pairs and extend the result list
    return tuple(result)",,,,,
Write a python function to find remainder of array multiplication divided by n.,"def find_remainder(arr, lens, n): 
    mul = 1
    for i in range(lens):  
        mul = (mul * (arr[i] % n)) % n 
    return mul % n ",471,Write a python function to find remainder of array multiplication divided by n.,"['assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9', 'assert find_remainder([1,1,1],3,1) == 0', 'assert find_remainder([1,2,1],3,2) == 0']",[],"def find_remainder(arr, n):
    product = 1
    for num in arr:
        product *= num
    return product % n",,,,,
Write a python function to check whether the given list contains consecutive numbers or not.,"def check_Consecutive(l): 
    return sorted(l) == list(range(min(l),max(l)+1)) ",472,Write a python function to check whether the given list contains consecutive numbers or not.,"['assert check_Consecutive([1,2,3,4,5]) == True', 'assert check_Consecutive([1,2,3,5,6]) == False', 'assert check_Consecutive([1,2,1]) == False']",[],,,,,,
Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.,"def tuple_intersection(test_list1, test_list2):
  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])
  return (res)",473,Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.,"['assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}', 'assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}', 'assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}']",[],"def tuple_intersection(tuple_list):
    # Convert each tuple in the list to a set for efficient intersection
    sets = [set(tup) for tup in tuple_list]
    
    # Find the intersection of all sets
    intersection = sets[0]
    for i in range(1, len(sets)):
        intersection &= sets[i]
    
    # Convert the intersection set back to a list of tuples
    intersection_tuples = [tuple(sorted(tup)) for tup in intersection]
    
    return intersection_tuples",,,,,
Write a function to replace characters in a string.,"def replace_char(str1,ch,newch):
 str2 = str1.replace(ch, newch)
 return str2",474,Write a function to replace characters in a string.,"['assert replace_char(""polygon"",\'y\',\'l\')==(""pollgon"")', 'assert replace_char(""character"",\'c\',\'a\')==(""aharaater"")', 'assert replace_char(""python"",\'l\',\'a\')==(""python"")']",[],,,,,,
Write a function to sort counter by value.,"from collections import Counter
def sort_counter(dict1):
 x = Counter(dict1)
 sort_counter=x.most_common()
 return sort_counter",475,Write a function to sort counter by value.,"[""assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]"", ""assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]"", ""assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]""]",[],"def sort_counter_by_value(counter):
    return dict(sorted(counter.items(), key=lambda item: item[1], reverse=True))",,,,,
Write a python function to find the sum of the largest and smallest value in a given array.,"def big_sum(nums):
      sum= max(nums)+min(nums)
      return sum",476,Write a python function to find the sum of the largest and smallest value in a given array.,"['assert big_sum([1,2,3]) == 4', 'assert big_sum([-1,2,3,4]) == 3', 'assert big_sum([2,3,6]) == 8']",[],"def big_sum(array):
    if not array:
        return 0  # Return 0 if the array is empty

    # Find the largest and smallest values in the array
    largest = float('-inf')
    smallest = float('inf')
    for num in array:
        largest = max(largest, num)
        smallest = min(smallest, num)

    # Return the sum of the largest and smallest values
    return largest + smallest",,,,,
Write a python function to convert the given string to lower case.,"def is_lower(string):
  return (string.lower())",477,Write a python function to convert the given string to lower case.,"['assert is_lower(""InValid"") == ""invalid""', 'assert is_lower(""TruE"") == ""true""', 'assert is_lower(""SenTenCE"") == ""sentence""']",[],,,,,,
Write a function to remove lowercase substrings from a given string.,"import re
def remove_lowercase(str1):
 remove_lower = lambda text: re.sub('[a-z]', '', text)
 result =  remove_lower(str1)
 return result",478,Write a function to remove lowercase substrings from a given string.,"['assert remove_lowercase(""PYTHon"")==(\'PYTH\')', 'assert remove_lowercase(""FInD"")==(\'FID\')', 'assert remove_lowercase(""STRinG"")==(\'STRG\')']",[],,,,,,
Write a python function to find the first digit of a given number.,"def first_Digit(n) :  
    while n >= 10:  
        n = n / 10; 
    return int(n) ",479,Write a python function to find the first digit of a given number.,"['assert first_Digit(123) == 1', 'assert first_Digit(456) == 4', 'assert first_Digit(12) == 1']",[],,,,,,
Write a python function to find the maximum occurring character in a given string.,"def get_max_occuring_char(str1):
  ASCII_SIZE = 256
  ctr = [0] * ASCII_SIZE
  max = -1
  ch = ''
  for i in str1:
    ctr[ord(i)]+=1;
  for i in str1:
    if max < ctr[ord(i)]:
      max = ctr[ord(i)]
      ch = i
  return ch",480,Write a python function to find the maximum occurring character in a given string.,"['assert get_max_occuring_char(""data"") == ""a""', 'assert get_max_occuring_char(""create"") == ""e""', 'assert get_max_occuring_char(""brilliant girl"") == ""i""']",[],"def find_max_occurring_char(string):
    char_count = {}
    max_char = ''
    max_count = 0

    for char in string:
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1

        if char_count[char] > max_count:
            max_count = char_count[char]
            max_char = char

    return max_char",,,,,
Write a function to determine if there is a subset of the given set with sum equal to the given sum.,"def is_subset_sum(set, n, sum):
	if (sum == 0):
		return True
	if (n == 0):
		return False
	if (set[n - 1] > sum):
		return is_subset_sum(set, n - 1, sum)
	return is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])",481,Write a function to determine if there is a subset of the given set with sum equal to the given sum.,"['assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True', 'assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False', 'assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True']",[],"def has_subset_sum(nums, target_sum):
    def backtrack(start, current_sum):
        # Base case: If current_sum is equal to target_sum, return True
        if current_sum == target_sum:
            return True
        
        # Base case: If current_sum exceeds target_sum or start exceeds the length of nums, return False
        if current_sum > target_sum or start >= len(nums):
            return False
        
        # Recursive case: Exclude the current element
        exclude = backtrack(start + 1, current_sum)
        
        # Recursive case: Include the current element
        include = backtrack(start + 1, current_sum + nums[start])
        
        # Return True if either exclude or include is True
        return exclude or include
    
    # Start the backtracking process from the first element and sum of 0
    return backtrack(0, 0)",,,,,
Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.,"import re 
def match(text): 
		pattern = '[A-Z]+[a-z]+$'
		if re.search(pattern, text): 
				return('Yes') 
		else: 
				return('No') ",482,Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.,"['assert match(""Geeks"") == \'Yes\'', 'assert match(""geeksforGeeks"") == \'Yes\'', 'assert match(""geeks"") == \'No\'']",[],,,,,,
Write a python function to find the first natural number whose factorial is divisible by x.,"def first_Factorial_Divisible_Number(x): 
    i = 1;
    fact = 1; 
    for i in range(1,x): 
        fact = fact * i 
        if (fact % x == 0): 
            break
    return i ",483,Write a python function to find the first natural number whose factorial is divisible by x.,"['assert first_Factorial_Divisible_Number(10) == 5', 'assert first_Factorial_Divisible_Number(15) == 5', 'assert first_Factorial_Divisible_Number(5) == 4']",[],"import math

def first_factorial_divisible_by(x):
    num = 1
    while True:
        factorial = math.factorial(num)
        if factorial % x == 0:
            return num
        num += 1",,,,,
Write a function to remove the matching tuples from the given two tuples.,"def remove_matching_tuple(test_list1, test_list2):
  res = [sub for sub in test_list1 if sub not in test_list2]
  return (res) ",484,Write a function to remove the matching tuples from the given two tuples.,"[""assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]"", ""assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]"", ""assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]""]",[],"def remove_matching_tuples(tuple1, tuple2):
    set1 = set(tuple(sorted(t)) for t in tuple1)
    set2 = set(tuple(sorted(t)) for t in tuple2)
    
    matching_tuples = set1.intersection(set2)
    
    result_tuple1 = tuple(t for t in tuple1 if tuple(sorted(t)) not in matching_tuples)
    result_tuple2 = tuple(t for t in tuple2 if tuple(sorted(t)) not in matching_tuples)
    
    return result_tuple1, result_tuple2",,,,,
Write a function to find the largest palindromic number in the given array.,"def is_palindrome(n) : 
	divisor = 1
	while (n / divisor >= 10) : 
		divisor *= 10
	while (n != 0) : 
		leading = n // divisor 
		trailing = n % 10
		if (leading != trailing) : 
			return False
		n = (n % divisor) // 10
		divisor = divisor // 100
	return True
def largest_palindrome(A, n) : 
	A.sort() 
	for i in range(n - 1, -1, -1) : 
		if (is_palindrome(A[i])) : 
			return A[i] 
	return -1",485,Write a function to find the largest palindromic number in the given array.,"['assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545', 'assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5', 'assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9']",[],"def find_largest_palindrome(arr):
    palindromes = []
    
    # Iterate over each number in the array
    for num in arr:
        # Convert the number to a string for easier manipulation
        num_str = str(num)
        
        # Check if the string is a palindrome
        if num_str == num_str[::-1]:
            palindromes.append(num)
    
    # Return the largest palindrome found (or None if no palindromes were found)
    return max(palindromes) if palindromes else None",,,,,
Write a function to compute binomial probability for the given number.,"def nCr(n, r): 
	if (r > n / 2): 
		r = n - r 
	answer = 1 
	for i in range(1, r + 1): 
		answer *= (n - r + i) 
		answer /= i 
	return answer 
def binomial_probability(n, k, p): 
	return (nCr(n, k) * pow(p, k) *	pow(1 - p, n - k)) ",486,Write a function to compute binomial probability for the given number.,"['assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185', 'assert binomial_probability(11, 6, 2.0/4) == 0.2255859375', 'assert binomial_probability(12, 7, 3.0/5) == 0.227030335488']",[],"from math import comb

def binomial_probability(n, k, p):
    """"""
    Compute the binomial probability P(X=k) given n trials, k successes, and probability of success p.
    
    :param n: Number of trials
    :param k: Number of successes
    :param p: Probability of success
    :return: Binomial probability P(X=k)
    """"""
    q = 1 - p  # Probability of failure
    return comb(n, k) * (p ** k) * (q ** (n - k))",,,,,
Write a function to sort a list of tuples in increasing order by the last element in each tuple.,"def sort_tuple(tup): 
	lst = len(tup) 
	for i in range(0, lst): 
		for j in range(0, lst-i-1): 
			if (tup[j][-1] > tup[j + 1][-1]): 
				temp = tup[j] 
				tup[j]= tup[j + 1] 
				tup[j + 1]= temp 
	return tup",487,Write a function to sort a list of tuples in increasing order by the last element in each tuple.,"['assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]', 'assert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]', 'assert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]']",[],,,,,,
Write a function to find the area of a pentagon.,"import math
def area_pentagon(a):
  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0
  return area",488,Write a function to find the area of a pentagon.,"['assert area_pentagon(5)==43.01193501472417', 'assert area_pentagon(10)==172.0477400588967', 'assert area_pentagon(15)==387.10741513251753']",[],"import math

def area_of_pentagon(side_length):
    apothem = side_length / (2 * math.tan(math.pi / 5))
    area = (5 * math.pow(side_length, 2)) / (4 * math.tan(math.pi / 5))
    return area",,,,,
Write a python function to find the frequency of the largest value in a given array.,"def frequency_Of_Largest(n,arr): 
    mn = arr[0] 
    freq = 1
    for i in range(1,n): 
        if (arr[i] >mn): 
            mn = arr[i] 
            freq = 1
        elif (arr[i] == mn): 
            freq += 1
    return freq ",489,Write a python function to find the frequency of the largest value in a given array.,"['assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2', 'assert frequency_Of_Largest(3,[5,6,5]) == 1', 'assert frequency_Of_Largest(4,[2,7,7,7]) == 3']",[],,,,,,
Write a function to extract all the pairs which are symmetric in the given tuple list.,"def extract_symmetric(test_list):
  temp = set(test_list) & {(b, a) for a, b in test_list}
  res = {(a, b) for a, b in temp if a < b}
  return (res) ",490,Write a function to extract all the pairs which are symmetric in the given tuple list.,"['assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}', 'assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}', 'assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}']",[],"def extract_symmetric_pairs(tuple_list):
    symmetric_pairs = set()
    
    for tup in tuple_list:
        if len(tup) == 2:
            pair = (tup[1], tup[0])
            if pair in tuple_list:
                symmetric_pairs.add(tup)
    
    return symmetric_pairs",,,,,
Write a function to find the sum of geometric progression series.,"import math
def sum_gp(a,n,r):
 total = (a * (1 - math.pow(r, n ))) / (1- r)
 return total",491,Write a function to find the sum of geometric progression series.,"['assert sum_gp(1,5,2)==31', 'assert sum_gp(1,5,4)==341', 'assert sum_gp(2,6,3)==728']",[],,,,,,
Write a function to search an element in the given array by using binary search.,"def binary_search(item_list,item):
	first = 0
	last = len(item_list)-1
	found = False
	while( first<=last and not found):
		mid = (first + last)//2
		if item_list[mid] == item :
			found = True
		else:
			if item < item_list[mid]:
				last = mid - 1
			else:
				first = mid + 1	
	return found",492,Write a function to search an element in the given array by using binary search.,"['assert binary_search([1,2,3,5,8], 6) == False', 'assert binary_search([7, 8, 9, 10, 13], 10) == True', 'assert binary_search([11, 13, 14, 19, 22, 36], 23) == False']",[],"def binary_search(arr, target):
    low = 0
    high = len(arr) - 1

    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            return True
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1

    return False",,,,,
"Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.","import math
def calculate_polygons(startx, starty, endx, endy, radius):
    sl = (2 * radius) * math.tan(math.pi / 6)
    p = sl * 0.5
    b = sl * math.cos(math.radians(30))
    w = b * 2
    h = 2 * sl   
    startx = startx - w
    starty = starty - h
    endx = endx + w
    endy = endy + h
    origx = startx
    origy = starty
    xoffset = b
    yoffset = 3 * p
    polygons = []
    row = 1
    counter = 0
    while starty < endy:
        if row % 2 == 0:
            startx = origx + xoffset
        else:
            startx = origx
        while startx < endx:
            p1x = startx
            p1y = starty + p
            p2x = startx
            p2y = starty + (3 * p)
            p3x = startx + b
            p3y = starty + h
            p4x = startx + w
            p4y = starty + (3 * p)
            p5x = startx + w
            p5y = starty + p
            p6x = startx + b
            p6y = starty
            poly = [
                (p1x, p1y),
                (p2x, p2y),
                (p3x, p3y),
                (p4x, p4y),
                (p5x, p5y),
                (p6x, p6y),
                (p1x, p1y)]
            polygons.append(poly)
            counter += 1
            startx += w
        starty += yoffset
        row += 1
    return polygons",493,"Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.","['assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]', 'assert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]', 'assert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]']",[],,,,,,
Write a function to convert the given binary tuple to integer.,"def binary_to_integer(test_tup):
  res = int("""".join(str(ele) for ele in test_tup), 2)
  return (str(res)) ",494,Write a function to convert the given binary tuple to integer.,"[""assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'"", ""assert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'"", ""assert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'""]",[],"def binary_tuple_to_int(binary_tuple):
    return int("""".join(map(str, binary_tuple)), 2)",,,,,
Write a function to remove lowercase substrings from a given string by using regex.,"import re
def remove_lowercase(str1):
  remove_lower = lambda text: re.sub('[a-z]', '', text)
  result =  remove_lower(str1)
  return (result)",495,Write a function to remove lowercase substrings from a given string by using regex.,"[""assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'"", ""assert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'"", ""assert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'""]",[],"import re

def remove_lowercase_substrings(string):
    pattern = r'[a-z]+'
    result = re.sub(pattern, '', string)
    return result",,,,,
Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.,"import heapq as hq
def heap_queue_smallest(nums,n):
  smallest_nums = hq.nsmallest(n, nums)
  return smallest_nums",496,Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.,"['assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] ', 'assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]', 'assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]']",[],,,,,,
Write a function to find the surface area of a cone.,"import math
def surfacearea_cone(r,h):
  l = math.sqrt(r * r + h * h)
  SA = math.pi * r * (r + l)
  return SA",497,Write a function to find the surface area of a cone.,"['assert surfacearea_cone(5,12)==282.7433388230814', 'assert surfacearea_cone(10,15)==880.5179353159282', 'assert surfacearea_cone(19,17)==2655.923961165254']",[],"import math

def cone_surface_area(radius, slant_height):
    base_area = math.pi * radius ** 2
    lateral_area = math.pi * radius * slant_height
    total_area = base_area + lateral_area
    return total_area",,,,,
Write a python function to find gcd of two positive integers.,"def gcd(x, y):
    gcd = 1
    if x % y == 0:
        return y
    for k in range(int(y / 2), 0, -1):
        if x % k == 0 and y % k == 0:
            gcd = k
            break  
    return gcd",498,Write a python function to find gcd of two positive integers.,"['assert gcd(12, 17) == 1', 'assert gcd(4,6) == 2', 'assert gcd(2,9) == 1']",[],,,,,,
Write a function to find the diameter of a circle.,"def diameter_circle(r):
  diameter=2*r
  return diameter",499,Write a function to find the diameter of a circle.,"['assert diameter_circle(10)==20', 'assert diameter_circle(40)==80', 'assert diameter_circle(15)==30']",[],"import math

def diameter_of_circle(radius):
    return 2 * radius",,,,,
Write a function to concatenate all elements of the given list into a string.,"def concatenate_elements(list):
  ans = ' '
  for i in list:
    ans = ans+ ' '+i
  return (ans) ",500,Write a function to concatenate all elements of the given list into a string.,"[""assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'"", ""assert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'"", ""assert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'""]",[],,,,,,
Write a python function to find common divisor between two numbers in a given pair.,"def ngcd(x,y):
    i=1
    while(i<=x and i<=y):
        if(x%i==0 and y%i == 0):
            gcd=i;
        i+=1
    return gcd;
def num_comm_div(x,y):
  n = ngcd(x,y)
  result = 0
  z = int(n**0.5)
  i = 1
  while(i <= z):
    if(n % i == 0):
      result += 2 
      if(i == n/i):
        result-=1
    i+=1
  return result",501,Write a python function to find common divisor between two numbers in a given pair.,"['assert num_comm_div(2,4) == 2', 'assert num_comm_div(2,8) == 2', 'assert num_comm_div(12,24) == 6']",[],,,,,,
Write a python function to find remainder of two numbers.,"def find(n,m):
  r = n%m
  return (r)",502,Write a python function to find remainder of two numbers.,"['assert find(3,3) == 0', 'assert find(10,3) == 1', 'assert find(16,5) == 1']",[],"def find_remainder(a, b):
    return a % b",,,,,
Write a function to add consecutive numbers of a given list.,"def add_consecutive_nums(nums):
    result = [b+a for a, b in zip(nums[:-1], nums[1:])]
    return result",503,Write a function to add consecutive numbers of a given list.,"['assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]', 'assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]', 'assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]']",[],"def add_consecutive_numbers(numbers):
    result = []
    for i in range(len(numbers) - 1):
        result.append(numbers[i] + numbers[i + 1])
    return result",,,,,
Write a python function to find the cube sum of first n natural numbers.,"def sum_Of_Series(n): 
    sum = 0
    for i in range(1,n + 1): 
        sum += i * i*i       
    return sum",504,Write a python function to find the cube sum of first n natural numbers.,"['assert sum_Of_Series(5) == 225', 'assert sum_Of_Series(2) == 9', 'assert sum_Of_Series(3) == 36']",[],,,,,,
Write a function to move all zeroes to the end of the given array.,"def re_order(A):
    k = 0
    for i in A:
        if i:
            A[k] = i
            k = k + 1
    for i in range(k, len(A)):
        A[i] = 0
    return A",505,Write a function to move all zeroes to the end of the given array.,"['assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]', 'assert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]', 'assert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]']",[],"def move_zeros_to_end(arr):
    # Initialize a pointer to keep track of the non-zero elements
    non_zero_index = 0

    # Iterate over the array
    for i in range(len(arr)):
        # If the current element is not zero
        if arr[i] != 0:
            # Swap the current element with the element at the non-zero index
            arr[i], arr[non_zero_index] = arr[non_zero_index], arr[i]
            # Increment the non-zero index
            non_zero_index += 1

    return arr",,,,,
"Write a function to calculate the permutation coefficient of given p(n, k).","def permutation_coefficient(n, k): 
	P = [[0 for i in range(k + 1)] 
			for j in range(n + 1)] 
	for i in range(n + 1): 
		for j in range(min(i, k) + 1): 
			if (j == 0): 
				P[i][j] = 1
			else: 
				P[i][j] = P[i - 1][j] + ( 
						j * P[i - 1][j - 1]) 
			if (j < k): 
				P[i][j + 1] = 0
	return P[n][k] ",506,"Write a function to calculate the permutation coefficient of given p(n, k).","['assert permutation_coefficient(10, 2) == 90', 'assert permutation_coefficient(10, 3) == 720', 'assert permutation_coefficient(10, 1) == 10']",[],"def permutation_coefficient(n, k):
    """"""
    Calculate the permutation coefficient p(n, k).
    
    :param n: The total number of elements.
    :param k: The number of elements to select.
    :return: The permutation coefficient p(n, k).
    """"""
    # Calculate the permutation coefficient using the formula: n! / (n-k)!
    # Import the math module for factorial calculation
    import math
    
    # Calculate the factorial of n
    n_factorial = math.factorial(n)
    
    # Calculate the factorial of (n-k)
    n_minus_k_factorial = math.factorial(n - k)
    
    # Calculate the permutation coefficient
    permutation = n_factorial // n_minus_k_factorial
    
    return permutation",,,,,
Write a function to remove specific words from a given list.,"def remove_words(list1, removewords):
    for word in list(list1):
        if word in removewords:
            list1.remove(word)
    return list1  ",507,Write a function to remove specific words from a given list.,"[""assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']"", ""assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']"", ""assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']""]",[],"def remove_words(word_list, words_to_remove):
    result = []
    for word in word_list:
        if word not in words_to_remove:
            result.append(word)
    return result",,,,,
Write a function to check if the common elements between two given lists are in the same order or not.,"def same_order(l1, l2):
    common_elements = set(l1) & set(l2)
    l1 = [e for e in l1 if e in common_elements]
    l2 = [e for e in l2 if e in common_elements]
    return l1 == l2",508,Write a function to check if the common elements between two given lists are in the same order or not.,"['assert same_order([""red"",""green"",""black"",""orange""],[""red"",""pink"",""green"",""white"",""black""])==True', 'assert same_order([""red"",""pink"",""green"",""white"",""black""],[""white"",""orange"",""pink"",""black""])==False', 'assert same_order([""red"",""green"",""black"",""orange""],[""red"",""pink"",""green"",""white"",""black""])==True']",[],"def check_common_order(list1, list2):
    common_elements = set(list1) & set(list2)
    common_order_list1 = [elem for elem in list1 if elem in common_elements]
    common_order_list2 = [elem for elem in list2 if elem in common_elements]
    
    return common_order_list1 == common_order_list2",,,,,
Write a python function to find the average of odd numbers till a given odd number.,"def average_Odd(n) : 
    if (n%2==0) : 
        return (""Invalid Input"") 
        return -1 
    sm =0
    count =0
    while (n>=1) : 
        count=count+1
        sm = sm + n 
        n = n-2
    return sm//count ",509,Write a python function to find the average of odd numbers till a given odd number.,"['assert average_Odd(9) == 5', 'assert average_Odd(5) == 3', 'assert average_Odd(11) == 6']",[],,,,,,
Write a function to find the number of subsequences having product smaller than k for the given non negative array.,"def no_of_subsequences(arr, k): 
	n = len(arr) 
	dp = [[0 for i in range(n + 1)] 
			for j in range(k + 1)] 
	for i in range(1, k + 1): 
		for j in range(1, n + 1): 
			dp[i][j] = dp[i][j - 1] 
			if arr[j - 1] <= i and arr[j - 1] > 0: 
				dp[i][j] += dp[i // arr[j - 1]][j - 1] + 1
	return dp[k][n]",510,Write a function to find the number of subsequences having product smaller than k for the given non negative array.,"['assert no_of_subsequences([1,2,3,4], 10) == 11', 'assert no_of_subsequences([4,8,7,2], 50) == 9', 'assert no_of_subsequences([5,6,7,8], 15) == 4']",[],"def numSubseqProductLessThanK(nums, k):
    if k <= 1:
        return 0
    
    # Initialize an array to store the count of subsequences ending with each product
    dp = [0] * k
    dp[0] = 1  # There is always one subsequence with product 0 (the empty subsequence)
    count = 0  # Total count of subsequences with product < k
    
    for num in nums:
        # Create a new array to store the updated counts
        new_dp = [0] * k
        
        # Iterate over the existing dp array
        for prod in dp:
            # If the product is already >= k, we can't use it to form new subsequences
            if prod >= k:
                continue
            
            # Add the current number to the existing product and update the count in new_dp
            new_prod = prod * num
            if new_prod < k:
                new_dp[new_prod] += dp[prod]
            
            # We can also form a new subsequence by appending the current number itself
            # (i.e., a subsequence with only the current number)
            if num < k:
                new_dp[num] += 1
        
        # Update the dp array for the next iteration
        dp = new_dp
        
        # Add the counts from the new_dp array to the total count
        count += sum(dp)
    
    return count",,,,,
Write a python function to find minimum sum of factors of a given number.,"def find_Min_Sum(num): 
    sum = 0
    i = 2
    while(i * i <= num): 
        while(num % i == 0): 
            sum += i 
            num /= i 
        i += 1
    sum += num 
    return sum",511,Write a python function to find minimum sum of factors of a given number.,"['assert find_Min_Sum(12) == 7', 'assert find_Min_Sum(105) == 15', 'assert find_Min_Sum(2) == 2']",[],"def find_min_sum_of_factors(n):
    def get_factors(num):
        factors = []
        for i in range(1, int(num**0.5) + 1):
            if num % i == 0:
                factors.append(i)
                if i != num // i:
                    factors.append(num // i)
        return factors

    def min_sum_helper(num, factors, current_sum):
        if num == 1:
            return current_sum

        min_sum = float('inf')
        for factor in factors:
            remaining = num // factor
            remaining_factors = get_factors(remaining)
            new_sum = current_sum + factor
            min_sum = min(min_sum, new_sum + min_sum_helper(remaining, remaining_factors, new_sum))

        return min_sum

    factors = get_factors(n)
    return min_sum_helper(n, factors, 0)",,,,,
Write a function to count the element frequency in the mixed nested tuple.,"def flatten(test_tuple): 
	for tup in test_tuple: 
		if isinstance(tup, tuple): 
			yield from flatten(tup) 
		else: 
			yield tup 
def count_element_freq(test_tuple):
  res = {}
  for ele in flatten(test_tuple):
    if ele not in res:
      res[ele] = 0
    res[ele] += 1
  return (res) ",512,Write a function to count the element frequency in the mixed nested tuple.,"['assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}', 'assert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}', 'assert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}']",[],"def count_elements(nested_tuple):
    element_count = {}
    
    def traverse_tuple(tup):
        for item in tup:
            if isinstance(item, tuple):
                traverse_tuple(item)
            else:
                if item in element_count:
                    element_count[item] += 1
                else:
                    element_count[item] = 1
    
    traverse_tuple(nested_tuple)
    return element_count",,,,,
Write a function to convert tuple into list by adding the given string after every element.,"def add_str(test_tup, K):
  res = [ele for sub in test_tup for ele in (sub, K)]
  return (res) ",513,Write a function to convert tuple into list by adding the given string after every element.,"['assert add_str((5, 6, 7, 4, 9) , ""FDF"") == [5, \'FDF\', 6, \'FDF\', 7, \'FDF\', 4, \'FDF\', 9, \'FDF\']', 'assert add_str((7, 8, 9, 10) , ""PF"") == [7, \'PF\', 8, \'PF\', 9, \'PF\', 10, \'PF\']', 'assert add_str((11, 14, 12, 1, 4) , ""JH"") == [11, \'JH\', 14, \'JH\', 12, \'JH\', 1, \'JH\', 4, \'JH\']']",[],"def tuple_to_list_with_string(tup, string_to_add):
    return [element + string_to_add for element in tup]",,,,,
Write a function to find the summation of tuple elements in the given tuple list.,"def sum_elements(test_tup):
  res = sum(list(test_tup))
  return (res) ",514,Write a function to find the summation of tuple elements in the given tuple list.,"['assert sum_elements((7, 8, 9, 1, 10, 7)) == 42', 'assert sum_elements((1, 2, 3, 4, 5, 6)) == 21', 'assert sum_elements((11, 12 ,13 ,45, 14)) == 95']",[],"def sum_tuple_elements(tuple_list):
    total_sum = 0
    for tuple_item in tuple_list:
        tuple_sum = sum(tuple_item)
        total_sum += tuple_sum
    return total_sum",,,,,
Write a function to check if there is a subset with sum divisible by m.,"def modular_sum(arr, n, m): 
	if (n > m): 
		return True
	DP = [False for i in range(m)] 
	for i in range(n): 
		if (DP[0]): 
			return True
		temp = [False for i in range(m)] 
		for j in range(m): 
			if (DP[j] == True): 
				if (DP[(j + arr[i]) % m] == False): 
					temp[(j + arr[i]) % m] = True
		for j in range(m): 
			if (temp[j]): 
				DP[j] = True
		DP[arr[i] % m] = True
	return DP[0]",515,Write a function to check if there is a subset with sum divisible by m.,"['assert modular_sum([3, 1, 7, 5], 4, 6) == True', 'assert modular_sum([1, 7], 2, 5) == False', 'assert modular_sum([1, 6], 2, 5) == False']",[],,,,,,
Write a function to sort a list of elements using radix sort.,"def radix_sort(nums):
    RADIX = 10
    placement = 1
    max_digit = max(nums)

    while placement < max_digit:
      buckets = [list() for _ in range( RADIX )]
      for i in nums:
        tmp = int((i / placement) % RADIX)
        buckets[tmp].append(i)
      a = 0
      for b in range( RADIX ):
        buck = buckets[b]
        for i in buck:
          nums[a] = i
          a += 1
      placement *= RADIX
    return nums",516,Write a function to sort a list of elements using radix sort.,"['assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]', 'assert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]', 'assert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]']",[],,,,,,
Write a python function to find the largest postive number from the given list.,"def largest_pos(list1): 
    max = list1[0] 
    for x in list1: 
        if x > max : 
             max = x  
    return max",517,Write a python function to find the largest postive number from the given list.,"['assert largest_pos([1,2,3,4,-1]) == 4', 'assert largest_pos([0,1,2,-5,-1,6]) == 6', 'assert largest_pos([0,0,1,0]) == 1']",[],"def find_largest_positive(lst):
    largest_positive = None
    for num in lst:
        if isinstance(num, int) and num > 0:
            if largest_positive is None or num > largest_positive:
                largest_positive = num
    return largest_positive",,,,,
Write a function to find the square root of a perfect number.,"import math
def sqrt_root(num):
 sqrt_root = math.pow(num, 0.5)
 return sqrt_root ",518,Write a function to find the square root of a perfect number.,"['assert sqrt_root(4)==2', 'assert sqrt_root(16)==4', 'assert sqrt_root(400)==20']",[],"import math

def sqrt_perfect_number(n):
    # Check if the number is perfect
    def is_perfect(num):
        divisors = [i for i in range(1, int(math.sqrt(num)) + 1) if num % i == 0]
        return sum(divisors) == num

    # Find the square root if the number is perfect
    if is_perfect(n):
        return math.sqrt(n)
    else:
        raise ValueError(""The number is not perfect."")

# Example usage
print(sqrt_perfect_number(4))  # Output: 2.0
print(sqrt_perfect_number(16))  # Output: 4.0
print(sqrt_perfect_number(400))  # Output: 20.0",,,,,
Write a function to calculate volume of a tetrahedron.,"import math
def volume_tetrahedron(num):
	volume = (num ** 3 / (6 * math.sqrt(2)))	
	return round(volume, 2)",519,Write a function to calculate volume of a tetrahedron.,"['assert volume_tetrahedron(10)==117.85', 'assert volume_tetrahedron(15)==397.75', 'assert volume_tetrahedron(20)==942.81']",[],"import math

def volume_of_tetrahedron(side_length):
    """"""
    Calculate the volume of a tetrahedron given its side length.
    
    :param side_length: The length of each side of the tetrahedron.
    :return: The volume of the tetrahedron.
    """"""
    volume = (math.sqrt(2) / 12) * side_length ** 3
    return volume",,,,,
Write a function to find the lcm of the given array elements.,"def find_lcm(num1, num2): 
	if(num1>num2): 
		num = num1 
		den = num2 
	else: 
		num = num2 
		den = num1 
	rem = num % den 
	while (rem != 0): 
		num = den 
		den = rem 
		rem = num % den 
	gcd = den 
	lcm = int(int(num1 * num2)/int(gcd)) 
	return lcm 
def get_lcm(l):
  num1 = l[0]
  num2 = l[1]
  lcm = find_lcm(num1, num2)
  for i in range(2, len(l)):
    lcm = find_lcm(lcm, l[i])
  return lcm ",520,Write a function to find the lcm of the given array elements.,"['assert get_lcm([2, 7, 3, 9, 4]) == 252', 'assert get_lcm([1, 2, 8, 3]) == 24', 'assert get_lcm([3, 8, 4, 10, 5]) == 120']",[],"def get_lcm(arr):
    def gcd(a, b):
        while b:
            a, b = b, a % b
        return a

    def lcm(a, b):
        return abs(a * b) // gcd(a, b)

    lcm_value = arr[0]
    for num in arr[1:]:
        lcm_value = lcm(lcm_value, num)
    return lcm_value",,,,,
Write a function to print check if the triangle is scalene or not.,"def check_isosceles(x,y,z):
  if x!=y & y!=z & z!=x:
	   return True
  else:
     return False",521,Write a function to print check if the triangle is scalene or not.,"['assert check_isosceles(6,8,12)==True', 'assert check_isosceles(6,6,12)==False', 'assert check_isosceles(6,15,20)==True']",[],"def is_scalene_triangle(a, b, c):
    # Check if the lengths form a valid triangle
    if a + b > c and a + c > b and b + c > a:
        # Check if all sides are different lengths
        if a != b and a != c and b != c:
            return True
    return False",,,,,
Write a function to find the longest bitonic subsequence for the given array.,"def lbs(arr): 
	n = len(arr) 
	lis = [1 for i in range(n+1)] 
	for i in range(1 , n): 
		for j in range(0 , i): 
			if ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): 
				lis[i] = lis[j] + 1
	lds = [1 for i in range(n+1)] 
	for i in reversed(range(n-1)): 
		for j in reversed(range(i-1 ,n)): 
			if(arr[i] > arr[j] and lds[i] < lds[j] + 1): 
				lds[i] = lds[j] + 1
	maximum = lis[0] + lds[0] - 1
	for i in range(1 , n): 
		maximum = max((lis[i] + lds[i]-1), maximum) 
	return maximum",522,Write a function to find the longest bitonic subsequence for the given array.,"['assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7', 'assert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6', 'assert lbs([80, 60, 30, 40, 20, 10]) == 5']",[],"def longest_bitonic_subsequence(arr):
    n = len(arr)
    if n <= 2:
        return n

    # Initialize lengths of increasing and decreasing subsequences
    increasing_lengths = [1] * n
    decreasing_lengths = [1] * n

    # Calculate lengths of increasing subsequences
    for i in range(1, n):
        for j in range(i):
            if arr[i] > arr[j]:
                increasing_lengths[i] = max(increasing_lengths[i], increasing_lengths[j] + 1)

    # Calculate lengths of decreasing subsequences
    for i in range(n - 2, -1, -1):
        for j in range(i + 1, n):
            if arr[i] > arr[j]:
                decreasing_lengths[i] = max(decreasing_lengths[i], decreasing_lengths[j] + 1)

    # Find the maximum length of a bitonic subsequence
    max_length = 0
    for i in range(n):
        max_length = max(max_length, increasing_lengths[i] + decreasing_lengths[i] - 1)

    return max_length",,,,,
"Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.","def check_string(str1):
    messg = [
    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',
    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',
    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',
    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]
    result = [x for x in [i(str1) for i in messg] if x != True]
    if not result:
        result.append('Valid string.')
    return result  ",523,"Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.","[""assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']"", ""assert check_string('123python')==['String must have 1 upper case character.']"", ""assert check_string('123Python')==['Valid string.']""]",[],"def check_string(string, length):
    has_capital = lambda s: any(c.isupper() for c in s)
    has_lowercase = lambda s: any(c.islower() for c in s)
    has_number = lambda s: any(c.isdigit() for c in s)
    has_correct_length = lambda s, l: len(s) == l

    return (
        has_capital(string) and
        has_lowercase(string) and
        has_number(string) and
        has_correct_length(string, length)
    )",,,,,
Write a function to find the sum of maximum increasing subsequence of the given array.,"def max_sum_increasing_subsequence(arr, n): 
	max = 0
	msis = [0 for x in range(n)] 
	for i in range(n): 
		msis[i] = arr[i] 
	for i in range(1, n): 
		for j in range(i): 
			if (arr[i] > arr[j] and
				msis[i] < msis[j] + arr[i]): 
				msis[i] = msis[j] + arr[i] 
	for i in range(n): 
		if max < msis[i]: 
			max = msis[i] 
	return max",524,Write a function to find the sum of maximum increasing subsequence of the given array.,"['assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106', 'assert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22', 'assert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10']",[],"def max_increasing_subsequence_sum(arr):
    if not arr:
        return 0

    n = len(arr)
    dp = [0] * n
    dp[0] = arr[0]
    max_sum = dp[0]

    for i in range(1, n):
        for j in range(i):
            if arr[i] > arr[j]:
                dp[i] = max(dp[i], dp[j] + arr[i])
        max_sum = max(max_sum, dp[i])

    return max_sum",,,,,
Write a python function to check whether two given lines are parallel or not.,"def parallel_lines(line1, line2):
  return line1[0]/line1[1] == line2[0]/line2[1]",525,Write a python function to check whether two given lines are parallel or not.,"['assert parallel_lines([2,3,4], [2,3,8]) == True', 'assert parallel_lines([2,3,4], [4,-3,8]) == False', 'assert parallel_lines([3,3],[5,5]) == True']",[],,,,,,
Write a python function to capitalize first and last letters of each word of a given string.,"def capitalize_first_last_letters(str1):
     str1 = result = str1.title()
     result =  """"
     for word in str1.split():
        result += word[:-1] + word[-1].upper() + "" ""
     return result[:-1]  ",526,Write a python function to capitalize first and last letters of each word of a given string.,"['assert capitalize_first_last_letters(""python"") == ""PythoN""', 'assert capitalize_first_last_letters(""bigdata"") == ""BigdatA""', 'assert capitalize_first_last_letters(""Hadoop"") == ""HadooP""']",[],"def capitalize_first_last_letters(string):
    words = string.split()
    capitalized_words = []
    
    for word in words:
        if len(word) > 1:
            capitalized_word = word[0].upper() + word[1:-1] + word[-1].upper()
        else:
            capitalized_word = word.upper()
        capitalized_words.append(capitalized_word)
    
    return ' '.join(capitalized_words)",,,,,
Write a function to find all pairs in an integer array whose sum is equal to a given number.,"def get_pairs_count(arr, n, sum):
    count = 0 
    for i in range(0, n):
        for j in range(i + 1, n):
            if arr[i] + arr[j] == sum:
                count += 1
    return count",527,Write a function to find all pairs in an integer array whose sum is equal to a given number.,"['assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3', 'assert get_pairs_count([1, 5, 7, -1], 4, 6) == 2', 'assert get_pairs_count([1, 1, 1, 1], 4, 2) == 6']",[],,,,,,
Write a function to find the list of lists with minimum length.,"def min_length(list1):
   min_length = min(len(x) for x in  list1 )  
   min_list = min((x) for x in   list1)
   return(min_length, min_list)     ",528,Write a function to find the list of lists with minimum length.,"['assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])', 'assert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])', 'assert min_length([[5], [15,20,25]])==(1, [5])']",[],"def find_min_length_list(lst):
    min_length = float('inf')
    min_length_lists = []
    
    for sublist in lst:
        if len(sublist) < min_length:
            min_length = len(sublist)
            min_length_lists = [sublist]
        elif len(sublist) == min_length:
            min_length_lists.append(sublist)
    
    return min_length_lists",,,,,
Write a function to find the nth jacobsthal-lucas number.,"def jacobsthal_lucas(n): 
	dp=[0] * (n + 1) 
	dp[0] = 2
	dp[1] = 1
	for i in range(2, n+1): 
		dp[i] = dp[i - 1] + 2 * dp[i - 2]; 
	return dp[n]",529,Write a function to find the nth jacobsthal-lucas number.,"['assert jacobsthal_lucas(5) == 31', 'assert jacobsthal_lucas(2) == 5', 'assert jacobsthal_lucas(4) == 17']",[],"def jacobsthal_lucas(n):
    if n == 0:
        return 2
    elif n == 1:
        return 1
    else:
        a, b = 2, 1
        for _ in range(2, n + 1):
            a, b = b, a + b
        return a",,,,,
Write a function to find the ration of negative numbers in an array of integers.,"from array import array
def negative_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x < 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)",530,Write a function to find the ration of negative numbers in an array of integers.,"['assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31', 'assert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31', 'assert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44']",[],"def ratio_of_negative_numbers(arr):
    negative_count = sum(1 for num in arr if num < 0)
    total_count = len(arr)
    if total_count == 0:
        return 0.0
    else:
        return negative_count / total_count",,,,,
Write a function to find minimum number of coins that make a given value.,"import sys 
def min_coins(coins, m, V): 
    if (V == 0): 
        return 0
    res = sys.maxsize 
    for i in range(0, m): 
        if (coins[i] <= V): 
            sub_res = min_coins(coins, m, V-coins[i]) 
            if (sub_res != sys.maxsize and sub_res + 1 < res): 
                res = sub_res + 1  
    return res ",531,Write a function to find minimum number of coins that make a given value.,"['assert min_coins([9, 6, 5, 1] ,4,11)==2', 'assert min_coins([4,5,6,7,8,9],6,9)==1', 'assert min_coins([1, 2, 3],3,4)==2']",[],,,,,,
Write a function to check if the two given strings are permutations of each other.,"def check_permutation(str1, str2):
  n1=len(str1)
  n2=len(str2)
  if(n1!=n2):
    return False
  a=sorted(str1)
  str1="" "".join(a)
  b=sorted(str2)
  str2="" "".join(b)
  for i in range(0, n1, 1):
    if(str1[i] != str2[i]):
      return False
  return True",532,Write a function to check if the two given strings are permutations of each other.,"['assert check_permutation(""abc"", ""cba"") == True', 'assert check_permutation(""test"", ""ttew"") == False', 'assert check_permutation(""xxyz"", ""yxzx"") == True']",[],"def are_permutations(str1, str2):
    # Check if the lengths of the strings are different
    if len(str1) != len(str2):
        return False

    # Create dictionaries to count the occurrences of each character
    count1 = {}
    count2 = {}

    # Count the occurrences of characters in str1
    for char in str1:
        count1[char] = count1.get(char, 0) + 1

    # Count the occurrences of characters in str2
    for char in str2:
        count2[char] = count2.get(char, 0) + 1

    # Check if the dictionaries are equal
    return count1 == count2",,,,,
Write a function to remove particular data type elements from the given tuple.,"def remove_datatype(test_tuple, data_type):
  res = []
  for ele in test_tuple:
    if not isinstance(ele, data_type):
      res.append(ele)
  return (res) ",533,Write a function to remove particular data type elements from the given tuple.,"['assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]', 'assert remove_datatype((7, 8, 9, ""SR""), str) == [7, 8, 9]', 'assert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]']",[],,,,,,
Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.,"import re
def search_literal(pattern,text):
 match = re.search(pattern, text)
 s = match.start()
 e = match.end()
 return (s, e)",534,Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.,"[""assert search_literal('python','python programming language')==(0,6)"", ""assert search_literal('programming','python programming language')==(7,18)"", ""assert search_literal('language','python programming language')==(19,27)""]",[],"def search_literal_string(original_string, pattern):
    start_index = original_string.find(pattern)
    return start_index",,,,,
Write a function to find the top or bottom surface area of a cylinder.,"def topbottom_surfacearea(r):
  toporbottomarea=3.1415*r*r
  return toporbottomarea",535,Write a function to find the top or bottom surface area of a cylinder.,"['assert topbottom_surfacearea(10)==314.15000000000003', 'assert topbottom_surfacearea(5)==78.53750000000001', 'assert topbottom_surfacearea(4)==50.264']",[],"import math

def cylinder_surface_area(radius, height=None):
    if height is None:
        # If height is not provided, calculate the surface area of the base (circle)
        return math.pi * radius ** 2
    else:
        # If height is provided, calculate the surface area of the top or bottom surface (circle)
        return math.pi * radius ** 2",,,,,
Write a function to select the nth items of a list.,"def nth_items(list,n):
 return list[::n]",536,Write a function to select the nth items of a list.,"['assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] ', 'assert nth_items([10,15,19,17,16,18],3)==[10,17] ', 'assert nth_items([14,16,19,15,17],4)==[14,17]']",[],"def select_nth_items(lst, n):
    return [item for index, item in enumerate(lst) if (index + 1) % n == 0]",,,,,
Write a python function to find the first repeated word in a given string.,"def first_repeated_word(str1):
  temp = set()
  for word in str1.split():
    if word in temp:
      return word;
    else:
      temp.add(word)
  return 'None'",537,Write a python function to find the first repeated word in a given string.,"['assert first_repeated_word(""ab ca bc ab"") == ""ab""', 'assert first_repeated_word(""ab ca bc"") == \'None\'', 'assert first_repeated_word(""ab ca bc ca ab bc"") == ""ca""']",[],"def find_first_repeated_word(string):
    word_count = {}
    words = string.split()

    for word in words:
        if word in word_count:
            return word
        word_count[word] = word_count.get(word, 0) + 1

    return None",,,,,
Write a python function to convert a given string list to a tuple.,"def string_list_to_tuple(str1):
    result = tuple(x for x in str1 if not x.isspace()) 
    return result",538,Write a python function to convert a given string list to a tuple.,"['assert string_list_to_tuple((""python 3.0"")) == (\'p\', \'y\', \'t\', \'h\', \'o\', \'n\', \'3\', \'.\', \'0\')', 'assert string_list_to_tuple((""bigdata"")) == (\'b\', \'i\', \'g\', \'d\', \'a\', \'t\', \'a\')', 'assert string_list_to_tuple((""language"")) == (\'l\', \'a\', \'n\', \'g\', \'u\', \'a\', \'g\',\'e\')']",[],"def string_list_to_tuple(string_list):
    return tuple(string_list)",,,,,
Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.,"def basesnum_coresspondingnum(bases_num,index):
  result = list(map(pow, bases_num, index))
  return result",539,Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.,"['assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]', 'assert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]', 'assert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]']",[],"def power_of_number_in_base(numbers, bases):
    return list(map(lambda x, y: x ** y, numbers, bases))",,,,,
Write a python function to find the difference between highest and least frequencies in a given array.,"def find_Diff(arr,n): 
    arr.sort()  
    count = 0; max_count = 0; min_count = n 
    for i in range(0,(n-1)): 
        if arr[i] == arr[i + 1]: 
            count += 1
            continue
        else: 
            max_count = max(max_count,count) 
            min_count = min(min_count,count) 
            count = 0
    return max_count - min_count ",540,Write a python function to find the difference between highest and least frequencies in a given array.,"['assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2', 'assert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3', 'assert find_Diff([1,2,1,2],4) == 0']",[],"def find_frequency_difference(arr):
    frequency = {}
    max_freq = 0
    min_freq = float('inf')

    for num in arr:
        if num in frequency:
            frequency[num] += 1
        else:
            frequency[num] = 1

        max_freq = max(max_freq, frequency[num])
        min_freq = min(min_freq, frequency[num])

    return max_freq - min_freq",,,,,
Write a function to find if the given number is abundant or not.,"import math 
def get_sum(n): 
	sum = 0
	i = 1
	while i <= (math.sqrt(n)): 
		if n%i == 0: 
			if n/i == i : 
				sum = sum + i 
			else: 
				sum = sum + i 
				sum = sum + (n / i ) 
		i = i + 1
	sum = sum - n 
	return sum
def check_abundant(n): 
	if (get_sum(n) > n): 
		return True
	else: 
		return False",541,Write a function to find if the given number is abundant or not.,"['assert check_abundant(12) == True', 'assert check_abundant(15) == False', 'assert check_abundant(18) == True']",[],"def is_abundant(n):
    """"""
    Check if a number is abundant.
    
    An abundant number is a number n for which the sum of its proper divisors
    (all positive divisors of n excluding n itself) is greater than n.
    
    :param n: The number to check.
    :return: True if the number is abundant, False otherwise.
    """"""
    divisors_sum = 0
    for i in range(1, n):
        if n % i == 0:
            divisors_sum += i
    return divisors_sum > n",,,,,
"Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.","import re
def fill_spaces(text):
  return (re.sub(""[ ,.]"", "":"", text))",542,"Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.","[""assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'"", ""assert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'"", ""assert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'""]",[],"import re

def replace_characters_with_colon(string):
    pattern = r'[ ,.]'
    replaced_string = re.sub(pattern, ':', string)
    return replaced_string",,,,,
Write a function to add two numbers and print number of digits of sum.,"def count_digits(num1,num2):
    number=num1+num2
    count = 0
    while(number > 0):
        number = number // 10
        count = count + 1
    return count",543,Write a function to add two numbers and print number of digits of sum.,"['assert count_digits(9875,10)==(4)', 'assert count_digits(98759853034,100)==(11)', 'assert count_digits(1234567,500)==(7)']",[],"def add_numbers_and_print_digits(num1, num2):
    sum_of_numbers = num1 + num2
    num_digits = len(str(sum_of_numbers))
    print(num_digits)",,,,,
Write a function to flatten the tuple list to a string.,"def flatten_tuple(test_list):
  res = ' '.join([idx for tup in test_list for idx in tup])
  return (res) ",544,Write a function to flatten the tuple list to a string.,"[""assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'"", ""assert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'"", ""assert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'""]",[],"def flatten_tuple_list_to_string(tuple_list):
    flattened = []
    for item in tuple_list:
        if isinstance(item, tuple):
            flattened.extend(flatten_tuple_list_to_string(item))
        else:
            flattened.append(str(item))
    return ''.join(flattened)
tuple_list1 = (
    (
        ('1', '4', '6'),
        ('5', '8'),
        ('2', '9'),
        ('1', '10')
    )
)
assert flatten_tuple_list_to_string(tuple_list1) == '1 4 6 5 8 2 9 1 10'

tuple_list2 = (
    (
        ('2', '3', '4'),
        ('6', '9'),
        ('3', '2'),
        ('2', '11')
    )
)
assert flatten_tuple_list_to_string(tuple_list2) == '2 3 4 6 9 3 2 2 11'

tuple_list3 = (
    (
        ('14', '21', '9'),
        ('24', '19'),
        ('12', '29'),
        ('23', '17')
    )
)
assert flatten_tuple_list_to_string(tuple_list3) == '14 21 9 24 19 12 29 23 17'",,,,,
Write a python function to toggle only first and last bits of a given number.,"def take_L_and_F_set_bits(n) : 
    n = n | n >> 1
    n = n | n >> 2
    n = n | n >> 4
    n = n | n >> 8
    n = n | n >> 16 
    return ((n + 1) >> 1) + 1      
def toggle_F_and_L_bits(n) :  
    if (n == 1) : 
        return 0 
    return n ^ take_L_and_F_set_bits(n) ",545,Write a python function to toggle only first and last bits of a given number.,"['assert toggle_F_and_L_bits(10) == 3', 'assert toggle_F_and_L_bits(15) == 6', 'assert toggle_F_and_L_bits(20) == 5']",[],"def toggle_first_and_last_bits(num):
    # Convert the number to binary string with leading zeros
    binary = format(num, '08b')
    
    # Toggle the first and last bits
    toggled_binary = binary[0] ^ '1' + binary[1:-1] + binary[-1] ^ '1'
    
    # Convert the toggled binary string back to an integer
    toggled_num = int(toggled_binary, 2)
    
    return toggled_num",,,,,
Write a function to find the last occurrence of a character in a string.,"def last_occurence_char(string,char):
 flag = -1
 for i in range(len(string)):
     if(string[i] == char):
         flag = i
 if(flag == -1):
    return None
 else:
    return flag + 1",546,Write a function to find the last occurrence of a character in a string.,"['assert last_occurence_char(""hello world"",\'l\')==10', 'assert last_occurence_char(""language"",\'g\')==7', 'assert last_occurence_char(""little"",\'y\')==None']",[],"def find_last_occurrence(string, char):
    last_index = -1
    for i in range(len(string) - 1, -1, -1):
        if string[i] == char:
            last_index = i
            break
    return last_index",,,,,
Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.,"def Total_Hamming_Distance(n):   
    i = 1
    sum = 0
    while (n // i > 0):  
        sum = sum + n // i  
        i = i * 2     
    return sum",547,Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.,"['assert Total_Hamming_Distance(4) == 7', 'assert Total_Hamming_Distance(2) == 3', 'assert Total_Hamming_Distance(5) == 8']",[],,,,,,
Write a function to find the length of the longest increasing subsequence of the given sequence.,"def longest_increasing_subsequence(arr): 
	n = len(arr) 
	longest_increasing_subsequence = [1]*n 
	for i in range (1 , n): 
		for j in range(0 , i): 
			if arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : 
				longest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1
	maximum = 0
	for i in range(n): 
		maximum = max(maximum , longest_increasing_subsequence[i]) 
	return maximum",548,Write a function to find the length of the longest increasing subsequence of the given sequence.,"['assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5', 'assert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3', 'assert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 ']",[],"def length_of_lis(sequence):
    n = len(sequence)
    if n == 0:
        return 0
    
    # Initialize an array to store the lengths of increasing subsequences ending at each index
    lis = [1] * n
    
    # Iterate over the sequence to compute the LIS lengths
    for i in range(1, n):
        for j in range(i):
            if sequence[i] > sequence[j]:
                lis[i] = max(lis[i], lis[j] + 1)
    
    # The LIS length is the maximum value in the lis array
    return max(lis)",,,,,
Write a python function to find the sum of fifth power of first n odd natural numbers.,"def odd_Num_Sum(n) : 
    j = 0
    sm = 0
    for i in range(1,n+1) : 
        j = (2*i-1) 
        sm = sm + (j*j*j*j*j)     
    return sm ",549,Write a python function to find the sum of fifth power of first n odd natural numbers.,"['assert odd_Num_Sum(1) == 1', 'assert odd_Num_Sum(2) == 244', 'assert odd_Num_Sum(3) == 3369']",[],,,,,,
Write a python function to find the maximum element in a sorted and rotated array.,"def find_Max(arr,low,high): 
    if (high < low): 
        return arr[0] 
    if (high == low): 
        return arr[low] 
    mid = low + (high - low) // 2 
    if (mid < high and arr[mid + 1] < arr[mid]): 
        return arr[mid] 
    if (mid > low and arr[mid] < arr[mid - 1]): 
        return arr[mid - 1]  
    if (arr[low] > arr[mid]): 
        return find_Max(arr,low,mid - 1) 
    else: 
        return find_Max(arr,mid + 1,high) ",550,Write a python function to find the maximum element in a sorted and rotated array.,"['assert find_Max([2,3,5,6,9],0,4) == 9', 'assert find_Max([3,4,5,2,1],0,4) == 5', 'assert find_Max([1,2,3],0,2) == 3']",[],"def find_max_in_rotated_array(nums, start, end):
    if start == end:
        return nums[start]
    
    mid = (start + end) // 2
    
    # Check if the middle element is the maximum
    if (mid == 0 or nums[mid] > nums[mid - 1]) and (mid == end or nums[mid] > nums[mid + 1]):
        return nums[mid]
    
    # If the left half is sorted
    if nums[start] <= nums[mid]:
        return find_max_in_rotated_array(nums, mid + 1, end)
    
    # If the right half is sorted
    return find_max_in_rotated_array(nums, start, mid - 1)

def find_max_in_sorted_rotated_array(nums):
    if not nums:
        return None
    
    return find_max_in_rotated_array(nums, 0, len(nums) - 1)",,,,,
Write a function to extract a specified column from a given nested list.,"def extract_column(list1, n):
   result = [i.pop(n) for i in list1]
   return result ",551,Write a function to extract a specified column from a given nested list.,"['assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]', 'assert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]', 'assert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]']",[],"def extract_column(nested_list, column_index):
    result = []
    for sublist in nested_list:
        if isinstance(sublist, list) and len(sublist) > column_index:
            result.append(sublist[column_index])
    return result",,,,,
Write a python function to check whether a given sequence is linear or not.,"def Seq_Linear(seq_nums):
  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]
  if len(set(seq_nums)) == 1: 
    return ""Linear Sequence""
  else:
    return ""Non Linear Sequence""",552,Write a python function to check whether a given sequence is linear or not.,"['assert Seq_Linear([0,2,4,6,8,10]) == ""Linear Sequence""', 'assert Seq_Linear([1,2,3]) == ""Linear Sequence""', 'assert Seq_Linear([1,5,2]) == ""Non Linear Sequence""']",[],"def is_linear_sequence(sequence):
    # Remove any non-numeric elements from the sequence
    numeric_sequence = [x for x in sequence if isinstance(x, (int, float))]

    # Check if the remaining sequence has at least two elements
    if len(numeric_sequence) < 2:
        return False

    # Calculate the difference between consecutive elements
    differences = [numeric_sequence[i+1] - numeric_sequence[i] for i in range(len(numeric_sequence) - 1)]

    # Check if all differences are equal
    return len(set(differences)) == 1",,,,,
Write a function to convert the given tuple to a floating-point number.,"def tuple_to_float(test_tup):
  res = float('.'.join(str(ele) for ele in test_tup))
  return (res) ",553,Write a function to convert the given tuple to a floating-point number.,"['assert tuple_to_float((4, 56)) == 4.56', 'assert tuple_to_float((7, 256)) == 7.256', 'assert tuple_to_float((8, 123)) == 8.123']",[],,,,,,
Write a python function to find odd numbers from a mixed list.,"def Split(list): 
    od_li = [] 
    for i in list: 
        if (i % 2 != 0): 
            od_li.append(i)  
    return od_li",554,Write a python function to find odd numbers from a mixed list.,"['assert Split([1,2,3,4,5,6]) == [1,3,5]', 'assert Split([10,11,12,13]) == [11,13]', 'assert Split([7,8,9,1]) == [7,9,1]']",[],"def find_odd_numbers(mixed_list):
    odd_numbers = []
    for item in mixed_list:
        if isinstance(item, int) and item % 2 != 0:
            odd_numbers.append(item)
    return odd_numbers",,,,,
Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.,"def difference(n) :  
    S = (n*(n + 1))//2;  
    res = S*(S-1);  
    return res;  ",555,Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.,"['assert difference(3) == 30', 'assert difference(5) == 210', 'assert difference(2) == 6']",[],"def calculate_difference(n):
    sum_of_cubes = sum(i**3 for i in range(1, n + 1))
    sum_of_numbers = sum(i for i in range(1, n + 1))
    difference = sum_of_cubes - sum_of_numbers
    return difference",,,,,
Write a python function to count the pairs with xor as an odd number.,"def find_Odd_Pair(A,N) : 
    oddPair = 0
    for i in range(0,N) :  
        for j in range(i+1,N) :  
            if ((A[i] ^ A[j]) % 2 != 0):  
                oddPair+=1  
    return oddPair  ",556,Write a python function to count the pairs with xor as an odd number.,"['assert find_Odd_Pair([5,4,7,2,1],5) == 6', 'assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12', 'assert find_Odd_Pair([1,2,3],3) == 2']",[],"def count_odd_xor_pairs(nums):
    count = 0
    num_set = set(nums)

    for num in nums:
        if (num ^ 1) in num_set:
            count += 1

    return count",,,,,
Write a function to toggle characters case in a string.,"def toggle_string(string):
 string1 = string.swapcase()
 return string1",557,Write a function to toggle characters case in a string.,"['assert toggle_string(""Python"")==(""pYTHON"")', 'assert toggle_string(""Pangram"")==(""pANGRAM"")', 'assert toggle_string(""LIttLE"")==(""liTTle"")']",[],,,,,,
Write a python function to find the digit distance between two integers.,"def digit_distance_nums(n1, n2):
         return sum(map(int,str(abs(n1-n2))))",558,Write a python function to find the digit distance between two integers.,"['assert digit_distance_nums(1,2) == 1', 'assert digit_distance_nums(23,56) == 6', 'assert digit_distance_nums(123,256) == 7']",[],,,,,,
Write a function to find the largest sum of contiguous subarray in the given array.,"def max_sub_array_sum(a, size):
  max_so_far = 0
  max_ending_here = 0
  for i in range(0, size):
    max_ending_here = max_ending_here + a[i]
    if max_ending_here < 0:
      max_ending_here = 0
    elif (max_so_far < max_ending_here):
      max_so_far = max_ending_here
  return max_so_far",559,Write a function to find the largest sum of contiguous subarray in the given array.,"['assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7', 'assert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8', 'assert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10']",[],"def max_subarray_sum(arr):
    if not arr:
        return 0

    max_sum = float('-inf')
    current_sum = 0

    for num in arr:
        current_sum = max(num, current_sum + num)
        max_sum = max(max_sum, current_sum)

    return max_sum",,,,,
Write a function to find the union of elements of the given tuples.,"def union_elements(test_tup1, test_tup2):
  res = tuple(set(test_tup1 + test_tup2))
  return (res) ",560,Write a function to find the union of elements of the given tuples.,"['assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)', 'assert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)', 'assert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)']",[],"def find_union(tuples):
    union_set = set()
    for tup in tuples:
        union_set.update(tup)
    return tuple(union_set)",,,,,
"Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.","def assign_elements(test_list):
  res = dict()
  for key, val in test_list:
    res.setdefault(val, [])
    res.setdefault(key, []).append(val)
  return (res) ",561,"Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.","['assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}', 'assert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}', 'assert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}']",[],,,,,,
Write a python function to find the maximum length of sublist.,"def Find_Max_Length(lst):  
    maxLength = max(len(x) for x in lst )
    return maxLength ",562,Write a python function to find the maximum length of sublist.,"['assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4', 'assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3', 'assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5']",[],"def find_max_length_of_sublist(lst):
    max_length = 0
    for sublist in lst:
        if isinstance(sublist, list):
            length = len(sublist)
            if length > max_length:
                max_length = length
    return max_length",,,,,
Write a function to extract values between quotation marks of a string.,"import re
def extract_values(text):
 return (re.findall(r'""(.*?)""', text))",563,Write a function to extract values between quotation marks of a string.,"['assert extract_values(\'""Python"", ""PHP"", ""Java""\')==[\'Python\', \'PHP\', \'Java\']', 'assert extract_values(\'""python"",""program"",""language""\')==[\'python\',\'program\',\'language\']', 'assert extract_values(\'""red"",""blue"",""green"",""yellow""\')==[\'red\',\'blue\',\'green\',\'yellow\']']",[],"import re

def extract_values_between_quotes(string):
    # Find all occurrences of values between quotes using regular expression
    values = re.findall(r'""([^""]*)""|\'([^\']*)\'', string)
    
    # Flatten the list of tuples into a single list
    values = [value for sublist in values for value in sublist if value]
    
    return values",,,,,
Write a python function to count unequal element pairs from the given array.,"def count_Pairs(arr,n): 
    cnt = 0; 
    for i in range(n): 
        for j in range(i + 1,n): 
            if (arr[i] != arr[j]): 
                cnt += 1; 
    return cnt; ",564,Write a python function to count unequal element pairs from the given array.,"['assert count_Pairs([1,2,1],3) == 2', 'assert count_Pairs([1,1,1,1],4) == 0', 'assert count_Pairs([1,2,3,4,5],5) == 10']",[],"def count_unequal_pairs(arr):
    count = 0
    unique_elements = set(arr)
    
    for element in unique_elements:
        pairs = [(element, other) for other in unique_elements if element != other]
        count += len(pairs)
    
    return count",,,,,
Write a python function to split a string into characters.,"def split(word): 
    return [char for char in word] ",565,Write a python function to split a string into characters.,"[""assert split('python') == ['p','y','t','h','o','n']"", ""assert split('Name') == ['N','a','m','e']"", ""assert split('program') == ['p','r','o','g','r','a','m']""]",[],,,,,,
Write a function to get the sum of a non-negative integer.,"def sum_digits(n):
  if n == 0:
    return 0
  else:
    return n % 10 + sum_digits(int(n / 10))",566,Write a function to get the sum of a non-negative integer.,"['assert sum_digits(345)==12', 'assert sum_digits(12)==3', 'assert sum_digits(97)==16']",[],,,,,,
Write a function to check whether a specified list is sorted or not.,"def issort_list(list1):
    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))
    return result",567,Write a function to check whether a specified list is sorted or not.,"['assert issort_list([1,2,4,6,8,10,12,14,16,17])==True', 'assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False', 'assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False']",[],"def is_sorted(lst):
    if not lst:  # If the list is empty, it's considered sorted
        return True
    
    for i in range(len(lst) - 1):
        if lst[i] > lst[i + 1]:  # If any element is greater than the next element, it's not sorted
            return False
    
    return True  # If no such element is found, the list is sorted",,,,,
Write a function to create a list of empty dictionaries.,"def empty_list(length):
 empty_list = [{} for _ in range(length)]
 return empty_list",568,Write a function to create a list of empty dictionaries.,"['assert empty_list(5)==[{},{},{},{},{}]', 'assert empty_list(6)==[{},{},{},{},{},{}]', 'assert empty_list(7)==[{},{},{},{},{},{},{}]']",[],,,,,,
Write a function to sort each sublist of strings in a given list of lists.,"def sort_sublists(list1):
    result = list(map(sorted,list1)) 
    return result",569,Write a function to sort each sublist of strings in a given list of lists.,"[""assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"", ""assert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]"", ""assert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]""]",[],"def sort_sublists(lst):
    for sublist in lst:
        sublist.sort()
    return lst",,,,,
Write a function to remove words from a given list of strings containing a character or string.,"def remove_words(list1, charlist):
    new_list = []
    for line in list1:
        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])
        new_list.append(new_words)
    return new_list",570,Write a function to remove words from a given list of strings containing a character or string.,"['assert remove_words([\'Red color\', \'Orange#\', \'Green\', \'Orange @\', ""White""],[\'#\', \'color\', \'@\'])==[\'Red\', \'\', \'Green\', \'Orange\', \'White\']', ""assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']"", ""assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']""]",[],,,,,,
Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.,"def max_sum_pair_diff_lessthan_K(arr, N, K): 
	arr.sort() 
	dp = [0] * N 
	dp[0] = 0
	for i in range(1, N): 
		dp[i] = dp[i-1] 
		if (arr[i] - arr[i-1] < K): 
			if (i >= 2): 
				dp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); 
			else: 
				dp[i] = max(dp[i], arr[i] + arr[i-1]); 
	return dp[N - 1]",571,Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.,"['assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62', 'assert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25', 'assert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21']",[],"def max_sum_disjoint_pairs(arr, k):
    arr.sort(reverse=True)  # Sort the array in descending order
    max_sum = 0
    count = 0

    for num in arr:
        if count < k:
            max_sum += num
            count += 1
        else:
            break

    return max_sum",,,,,
Write a python function to remove two duplicate numbers from a given number of lists.,"def two_unique_nums(nums):
  return [i for i in nums if nums.count(i)==1]",572,Write a python function to remove two duplicate numbers from a given number of lists.,"['assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]', 'assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]', 'assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]']",[],,,,,,
Write a python function to calculate the product of the unique numbers of a given list.,"def unique_product(list_data):
    temp = list(set(list_data))
    p = 1
    for i in temp:
        p *= i
    return p",573,Write a python function to calculate the product of the unique numbers of a given list.,"['assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000', 'assert unique_product([1, 2, 3, 1,]) == 6', 'assert unique_product([7, 8, 9, 0, 1, 1]) == 0']",[],"def product_of_unique_numbers(numbers):
    unique_numbers = set(numbers)  # Get the unique numbers from the list
    product = 1
    for num in unique_numbers:
        product *= num  # Multiply the product by each unique number
    return product",,,,,
Write a function to find the surface area of a cylinder.,"def surfacearea_cylinder(r,h):
  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))
  return surfacearea",574,Write a function to find the surface area of a cylinder.,"['assert surfacearea_cylinder(10,5)==942.45', 'assert surfacearea_cylinder(4,5)==226.18800000000002', 'assert surfacearea_cylinder(4,10)==351.848']",[],"import math

def cylinder_surface_area(radius, height):
    """"""
    Calculates the surface area of a cylinder.
    
    :param radius: The radius of the cylinder.
    :param height: The height of the cylinder.
    :return: The surface area of the cylinder.
    """"""
    base_area = math.pi * radius ** 2
    lateral_area = 2 * math.pi * radius * height
    total_area = 2 * base_area + lateral_area
    return total_area",,,,,
Write a python function to find nth number in a sequence which is not a multiple of a given number.,"def count_no (A,N,L,R): 
    count = 0
    for i in range (L,R + 1): 
        if (i % A != 0): 
            count += 1
        if (count == N): 
            break
    return (i) ",575,Write a python function to find nth number in a sequence which is not a multiple of a given number.,"['assert count_no(2,3,1,10) == 5', 'assert count_no(3,6,4,20) == 11', 'assert count_no(5,10,4,20) == 16']",[],"def find_nth_non_multiple(n, divisor):
    count = 0
    num = 1
    
    while count < n:
        if num % divisor != 0:
            count += 1
        num += 1
    
    return num - 1",,,,,
Write a python function to check whether an array is subarray of another or not.,"def is_Sub_Array(A,B,n,m): 
    i = 0; j = 0; 
    while (i < n and j < m):  
        if (A[i] == B[j]): 
            i += 1; 
            j += 1; 
            if (j == m): 
                return True;  
        else: 
            i = i - j + 1; 
            j = 0;       
    return False; ",576,Write a python function to check whether an array is subarray of another or not.,"['assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False', 'assert is_Sub_Array([1,2,1],[1,2,1],3,3) == True', 'assert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False']",[],"def is_subarray(arr1, arr2):
    n1, n2 = len(arr1), len(arr2)
    
    # If arr1 is longer than arr2, it cannot be a subarray
    if n1 > n2:
        return False
    
    # Iterate over arr2 to find a potential starting point for arr1
    for i in range(n2 - n1 + 1):
        # Check if the current subarray of arr2 matches arr1
        if arr1 == arr2[i:i+n1]:
            return True
    
    # No matching subarray found
    return False",,,,,
Write a python function to find the last digit in factorial of a given number.,"def last_Digit_Factorial(n): 
    if (n == 0): return 1
    elif (n <= 2): return n  
    elif (n == 3): return 6
    elif (n == 4): return 4 
    else: 
      return 0",577,Write a python function to find the last digit in factorial of a given number.,"['assert last_Digit_Factorial(4) == 4', 'assert last_Digit_Factorial(21) == 0', 'assert last_Digit_Factorial(30) == 0']",[],"def last_digit_factorial(n):
    result = 1
    while n > 0:
        result = (result * (n % 10)) % 10
        n //= 10
    return result",,,,,
Write a function to interleave lists of the same length.,"def interleave_lists(list1,list2,list3):
    result = [el for pair in zip(list1, list2, list3) for el in pair]
    return result",578,Write a function to interleave lists of the same length.,"['assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]', 'assert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]', 'assert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]']",[],"def interleave_lists(*lists):
    if not all(len(lst) == len(lists[0]) for lst in lists):
        raise ValueError(""All lists must have the same length"")
    
    result = []
    for i in range(len(lists[0])):
        for lst in lists:
            result.append(lst[i])
    
    return result",,,,,
Write a function to find the dissimilar elements in the given two tuples.,"def find_dissimilar(test_tup1, test_tup2):
  res = tuple(set(test_tup1) ^ set(test_tup2))
  return (res) ",579,Write a function to find the dissimilar elements in the given two tuples.,"['assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)', 'assert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)', 'assert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)']",[],"def find_dissimilar_elements(tuple1, tuple2):
    set1 = set(tuple1)
    set2 = set(tuple2)
    dissimilar = set1.symmetric_difference(set2)
    return tuple(dissimilar)",,,,,
Write a function to extract the even elements in the nested mixed tuple.,"def even_ele(test_tuple, even_fnc): 
	res = tuple() 
	for ele in test_tuple: 
		if isinstance(ele, tuple): 
			res += (even_ele(ele, even_fnc), ) 
		elif even_fnc(ele): 
			res += (ele, ) 
	return res 
def extract_even(test_tuple):
  res = even_ele(test_tuple, lambda x: x % 2 == 0)
  return (res) ",580,Write a function to extract the even elements in the nested mixed tuple.,"['assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)', 'assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))', 'assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)']",[],"def extract_even_elements(nested_tuple):
    result = []
    
    for item in nested_tuple:
        if isinstance(item, int) and item % 2 == 0:
            result.append(item)
        elif isinstance(item, tuple):
            result.extend(extract_even_elements(item))
    
    return result",,,,,
Write a python function to find the surface area of the square pyramid.,"def surface_Area(b,s): 
    return 2 * b * s + pow(b,2) ",581,Write a python function to find the surface area of the square pyramid.,"['assert surface_Area(3,4) == 33', 'assert surface_Area(4,5) == 56', 'assert surface_Area(1,2) == 5']",[],,,,,,
Write a function to check if a dictionary is empty or not.,"def my_dict(dict1):
  if bool(dict1):
     return False
  else:
     return True",582,Write a function to check if a dictionary is empty or not.,"['assert my_dict({10})==False', 'assert my_dict({11})==False', 'assert my_dict({})==True']",[],"def is_dictionary_empty(dictionary):
    return len(dictionary) == 0",,,,,
Write a function for nth catalan number.,"def catalan_number(num):
    if num <=1:
         return 1   
    res_num = 0
    for i in range(num):
        res_num += catalan_number(i) * catalan_number(num-i-1)
    return res_num",583,Write a function for nth catalan number.,"['assert catalan_number(10)==16796', 'assert catalan_number(9)==4862', 'assert catalan_number(7)==429']",[],"def catalan_number(n):
    if n == 0:
        return 1
    
    catalan = [0] * (n + 1)
    catalan[0] = 1
    
    for i in range(1, n + 1):
        catalan[i] = 0
        for j in range(i):
            catalan[i] += catalan[j] * catalan[i - j - 1]
    
    return catalan[n]",,,,,
Write a function to find all adverbs and their positions in a given sentence by using regex.,"import re
def find_adverbs(text):
  for m in re.finditer(r""\w+ly"", text):
    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))",584,Write a function to find all adverbs and their positions in a given sentence by using regex.,"['assert find_adverbs(""Clearly, he has no excuse for such behavior."") == \'0-7: Clearly\'', 'assert find_adverbs(""Please handle the situation carefuly"") == \'28-36: carefuly\'', 'assert find_adverbs(""Complete the task quickly"") == \'18-25: quickly\'']",[],"import re

def find_adverbs(sentence):
    # Define a regex pattern to match adverbs
    # This pattern assumes that adverbs are typically formed by adding '-ly' to adjectives
    # It may not capture all adverbs, but it should capture a majority of them
    adverb_pattern = r'\b\w+ly\b'
    
    # Find all matches of the adverb pattern in the sentence
    matches = re.finditer(adverb_pattern, sentence)
    
    # Initialize an empty list to store the adverbs and their positions
    adverbs_with_positions = []
    
    # Iterate over the matches and store the adverbs and their positions
    for match in matches:
        adverb = match.group()
        start_position = match.start()
        end_position = match.end()
        adverbs_with_positions.append((adverb, (start_position, end_position)))
    
    return adverbs_with_positions",,,,,
Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.,"import heapq
def expensive_items(items,n):
  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])
  return expensive_items",585,Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.,"[""assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]"", ""assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]"", ""assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]""]",[],"import heapq

def find_n_expensive_items(dataset, n):
    # Create a min heap to store the n most expensive items
    heap = []
    
    # Iterate over the items in the dataset
    for item in dataset:
        # Extract the name and price from the item
        name = item['name']
        price = item['price']
        
        # If the heap is not full, add the item to the heap
        if len(heap) < n:
            heapq.heappush(heap, (price, name))
        # If the heap is full, compare the current item with the least expensive item in the heap
        else:
            least_expensive_price, _ = heap[0]
            if price > least_expensive_price:
                # Remove the least expensive item from the heap
                heapq.heappop(heap)
                # Add the current item to the heap
                heapq.heappush(heap, (price, name))
    
    # Extract the names of the n most expensive items from the heap
    expensive_items = [item[1] for item in heap]
    
    return expensive_items",,,,,
Write a python function to split the array and add the first part to the end.,"def split_Arr(a,n,k):  
   b = a[:k] 
   return (a[k::]+b[::]) ",586,Write a python function to split the array and add the first part to the end.,"['assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]', 'assert split_Arr([1,2,3,4],4,1) == [2,3,4,1]', 'assert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]']",[],"def split_and_add(arr, split_index):
    first_part = arr[:split_index]
    second_part = arr[split_index:]
    result = second_part + first_part
    return result",,,,,
Write a function to convert a list to a tuple.,"def list_tuple(listx):
  tuplex = tuple(listx)
  return tuplex",587,Write a function to convert a list to a tuple.,"['assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)', 'assert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)', 'assert list_tuple([58,44,56])==(58,44,56)']",[],"def list_to_tuple(lst):
    return tuple(lst)",,,,,
Write a python function to find the difference between largest and smallest value in a given array.,"def big_diff(nums):
     diff= max(nums)-min(nums)
     return diff",588,Write a python function to find the difference between largest and smallest value in a given array.,"['assert big_diff([1,2,3,4]) == 3', 'assert big_diff([4,5,12]) == 8', 'assert big_diff([9,2,3]) == 7']",[],"def find_difference(arr):
    if not arr:
        return 0  # Return 0 if the array is empty

    min_val = float('inf')
    max_val = float('-inf')

    for num in arr:
        min_val = min(min_val, num)
        max_val = max(max_val, num)

    return max_val - min_val",,,,,
Write a function to find perfect squares between two given numbers.,"def perfect_squares(a, b):
    lists=[]
    for i in range (a,b+1):
        j = 1;
        while j*j <= i:
            if j*j == i:
                 lists.append(i)  
            j = j+1
        i = i+1
    return lists",589,Write a function to find perfect squares between two given numbers.,"['assert perfect_squares(1,30)==[1, 4, 9, 16, 25]', 'assert perfect_squares(50,100)==[64, 81, 100]', 'assert perfect_squares(100,200)==[100, 121, 144, 169, 196]']",[],"import math

def find_perfect_squares(start, end):
    perfect_squares = []
    for num in range(start, end + 1):
        sqrt = int(math.sqrt(num))
        if sqrt * sqrt == num:
            perfect_squares.append(num)
    return perfect_squares",,,,,
Write a function to convert polar coordinates to rectangular coordinates.,"import cmath
def polar_rect(x,y):
 cn = complex(x,y)
 cn=cmath.polar(cn)
 cn1 = cmath.rect(2, cmath.pi)
 return (cn,cn1)",590,Write a function to convert polar coordinates to rectangular coordinates.,"['assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))', 'assert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))', 'assert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))']",[],"import math

def polar_to_rectangular(r, theta):
    x = r * math.cos(theta)
    y = r * math.sin(theta)
    return x, y",,,,,
Write a python function to interchange the first and last elements in a list.,"def swap_List(newList): 
    size = len(newList) 
    temp = newList[0] 
    newList[0] = newList[size - 1] 
    newList[size - 1] = temp  
    return newList ",591,Write a python function to interchange the first and last elements in a list.,"['assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]', 'assert swap_List([1, 2, 3]) == [3, 2, 1]', 'assert swap_List([4, 5, 6]) == [6, 5, 4]']",[],,,,,,
Write a python function to find sum of product of binomial co-efficients.,"def binomial_Coeff(n,k): 
    C = [0] * (k + 1); 
    C[0] = 1; # nC0 is 1 
    for i in range(1,n + 1):  
        for j in range(min(i, k),0,-1): 
            C[j] = C[j] + C[j - 1]; 
    return C[k]; 
def sum_Of_product(n): 
    return binomial_Coeff(2 * n,n - 1); ",592,Write a python function to find sum of product of binomial co-efficients.,"['assert sum_Of_product(3) == 15', 'assert sum_Of_product(4) == 56', 'assert sum_Of_product(1) == 1']",[],,,,,,
Write a function to remove leading zeroes from an ip address.,"import re
def removezero_ip(ip):
 string = re.sub('\.[0]*', '.', ip)
 return string",593,Write a function to remove leading zeroes from an ip address.,"['assert removezero_ip(""216.08.094.196"")==(\'216.8.94.196\') ', 'assert removezero_ip(""12.01.024"")==(\'12.1.24\') ', 'assert removezero_ip(""216.08.094.0196"")==(\'216.8.94.196\') ']",[],"def remove_leading_zeroes_from_ip(ip_address):
    parts = ip_address.split('.')
    processed_parts = []
    
    for part in parts:
        if part.startswith('0') and len(part) > 1:
            processed_part = part.lstrip('0')
        else:
            processed_part = part
        processed_parts.append(processed_part)
    
    return '.'.join(processed_parts)",,,,,
Write a function to find the difference of first even and odd number of a given list.,"def diff_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even-first_odd)",594,Write a function to find the difference of first even and odd number of a given list.,"['assert diff_even_odd([1,3,5,7,4,1,6,8])==3', 'assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1', 'assert diff_even_odd([1,5,7,9,10])==9']",[],"def find_even_odd_difference(lst):
    even_numbers = [num for num in lst if num % 2 == 0]
    odd_numbers = [num for num in lst if num % 2 != 0]
    
    if not even_numbers or not odd_numbers:
        return None  # Return None if there are no even or odd numbers in the list
    
    first_even = even_numbers[0]
    first_odd = odd_numbers[0]
    
    return abs(first_even - first_odd)",,,,,
Write a python function to count minimum number of swaps required to convert one binary string to another.,"def min_Swaps(str1,str2) : 
    count = 0
    for i in range(len(str1)) :  
        if str1[i] != str2[i] : 
            count += 1
    if count % 2 == 0 : 
        return (count // 2) 
    else : 
        return (""Not Possible"") ",595,Write a python function to count minimum number of swaps required to convert one binary string to another.,"['assert min_Swaps(""1101"",""1110"") == 1', 'assert min_Swaps(""111"",""000"") == ""Not Possible""', 'assert min_Swaps(""111"",""110"") == ""Not Possible""']",[],"def min_swaps_to_convert_binary_strings(str1, str2):
    if len(str1) != len(str2):
        raise ValueError(""Both strings must have the same length"")

    # Count the frequency of each digit in str1
    freq1 = [0] * 2
    for digit in str1:
        freq1[int(digit)] += 1

    # Count the frequency of each digit in str2
    freq2 = [0] * 2
    for digit in str2:
        freq2[int(digit)] += 1

    # If the frequencies of 0s and 1s don't match, it's not possible to convert
    if freq1 != freq2:
        return -1

    # Initialize a variable to keep track of the number of swaps
    swaps = 0

    # Initialize pointers for both strings
    i = 0
    j = 0

    # Iterate through the strings simultaneously
    while i < len(str1) and j < len(str2):
        # If the characters match, move both pointers
        if str1[i] == str2[j]:
            i += 1
            j += 1
        # If the characters don't match, find the next matching character in str1
        # and swap it with the current character
        else:
            mismatch_i = i + 1
            while mismatch_i < len(str1) and str1[mismatch_i] != str2[j]:
                mismatch_i += 1

            # If no matching character is found, it's not possible to convert
            if mismatch_i == len(str1):
                return -1

            # Swap the characters
            str1[i], str1[mismatch_i] = str1[mismatch_i], str1[i]
            swaps += 1

            # Move both pointers
            i += 1
            j += 1

    return swaps",,,,,
Write a function to find the size of the given tuple.,"import sys 
def tuple_size(tuple_list):
  return (sys.getsizeof(tuple_list)) ",596,Write a function to find the size of the given tuple.,"['assert tuple_size((""A"", 1, ""B"", 2, ""C"", 3) ) == sys.getsizeof((""A"", 1, ""B"", 2, ""C"", 3))', 'assert tuple_size((1, ""Raju"", 2, ""Nikhil"", 3, ""Deepanshu"") ) == sys.getsizeof((1, ""Raju"", 2, ""Nikhil"", 3, ""Deepanshu""))', 'assert tuple_size(((1, ""Lion""), ( 2, ""Tiger""), (3, ""Fox""), (4, ""Wolf""))  ) == sys.getsizeof(((1, ""Lion""), ( 2, ""Tiger""), (3, ""Fox""), (4, ""Wolf"")))']",[],,,,,,
Write a function to find kth element from the given two sorted arrays.,"def find_kth(arr1, arr2, m, n, k):
	sorted1 = [0] * (m + n)
	i = 0
	j = 0
	d = 0
	while (i < m and j < n):
		if (arr1[i] < arr2[j]):
			sorted1[d] = arr1[i]
			i += 1
		else:
			sorted1[d] = arr2[j]
			j += 1
		d += 1
	while (i < m):
		sorted1[d] = arr1[i]
		d += 1
		i += 1
	while (j < n):
		sorted1[d] = arr2[j]
		d += 1
		j += 1
	return sorted1[k - 1]",597,Write a function to find kth element from the given two sorted arrays.,"['assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6', 'assert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256', 'assert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8']",[],"def find_kth_element(nums1, nums2, k):
    # Initialize indices for both arrays
    index1, index2 = 0, 0

    # Initialize the kth smallest element
    kth_smallest = None

    # While both indices are within the array bounds
    while index1 < len(nums1) and index2 < len(nums2):
        # Compare the elements at the current indices
        if nums1[index1] < nums2[index2]:
            # If the element from nums1 is smaller, increment its index
            index1 += 1
        else:
            # If the element from nums2 is smaller or equal, increment its index
            index2 += 1

        # Decrement k since we have skipped one element
        k -= 1

        # If k becomes 0, we have found the kth smallest element
        if k == 0:
            # Check if we have reached the end of one of the arrays
            if index1 == len(nums1):
                kth_smallest = nums2[index2 - 1]
            elif index2 == len(nums2):
                kth_smallest = nums1[index1 - 1]
            else:
                # If not, the kth smallest element is the minimum of the current elements
                kth_smallest = min(nums1[index1 - 1], nums2[index2 - 1])
            break

    # If we have reached the end of one of the arrays, find the kth element in the other array
    while index1 < len(nums1) and k > 0:
        index1 += 1
        k -= 1
        if k == 0:
            kth_smallest = nums1[index1 - 1]
            break

    while index2 < len(nums2) and k > 0:
        index2 += 1
        k -= 1
        if k == 0:
            kth_smallest = nums2[index2 - 1]
            break

    return kth_smallest",,,,,
Write a function to check whether the given number is armstrong or not.,"def armstrong_number(number):
 sum = 0
 times = 0
 temp = number
 while temp > 0:
           times = times + 1
           temp = temp // 10
 temp = number
 while temp > 0:
           reminder = temp % 10
           sum = sum + (reminder ** times)
           temp //= 10
 if number == sum:
           return True
 else:
           return False",598,Write a function to check whether the given number is armstrong or not.,"['assert armstrong_number(153)==True', 'assert armstrong_number(259)==False', 'assert armstrong_number(4458)==False']",[],"def is_armstrong(number):
    # Convert the number to a string to iterate over its digits
    digits = str(number)
    
    # Calculate the sum of the digits raised to the power of the number of digits
    armstrong_sum = sum(int(digit) ** len(digits) for digit in digits)
    
    # Return True if the sum is equal to the original number, False otherwise
    return armstrong_sum == number",,,,,
Write a function to find sum and average of first n natural numbers.,"def sum_average(number):
 total = 0
 for value in range(1, number + 1):
    total = total + value
 average = total / number
 return (total,average)",599,Write a function to find sum and average of first n natural numbers.,"['assert sum_average(10)==(55, 5.5)', 'assert sum_average(15)==(120, 8.0)', 'assert sum_average(20)==(210, 10.5)']",[],"def sum_and_average(n):
    total_sum = sum(range(1, n + 1))
    average = total_sum / n
    return total_sum, average",,,,,
Write a python function to check whether the given number is even or not using bitwise operator.,"def is_Even(n) : 
    if (n^1 == n+1) :
        return True; 
    else :
        return False; ",600,Write a python function to check whether the given number is even or not using bitwise operator.,"['assert is_Even(1) == False', 'assert is_Even(2) == True', 'assert is_Even(3) == False']",[],,,,,,
Write a function to find the longest chain which can be formed from the given set of pairs.,"class Pair(object): 
	def __init__(self, a, b): 
		self.a = a 
		self.b = b 
def max_chain_length(arr, n): 
	max = 0
	mcl = [1 for i in range(n)] 
	for i in range(1, n): 
		for j in range(0, i): 
			if (arr[i].a > arr[j].b and
				mcl[i] < mcl[j] + 1): 
				mcl[i] = mcl[j] + 1
	for i in range(n): 
		if (max < mcl[i]): 
			max = mcl[i] 
	return max",601,Write a function to find the longest chain which can be formed from the given set of pairs.,"['assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3', 'assert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4', 'assert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5']",[],"def find_longest_chain(pairs):
    # Create a dictionary to store the pairs
    pair_dict = {}
    for pair in pairs:
        start, end = pair
        if start not in pair_dict:
            pair_dict[start] = []
        pair_dict[start].append(end)

    # Initialize variables
    longest_chain = 0
    visited = set()

    # Recursive function to find the longest chain
    def dfs(node):
        nonlocal longest_chain

        # Mark the current node as visited
        visited.add(node)

        # Initialize the length of the current chain
        chain_length = 1

        # Iterate over the connected nodes
        for neighbor in pair_dict.get(node, []):
            if neighbor not in visited:
                # Recursively explore the connected node
                child_chain_length = dfs(neighbor)

                # Update the chain length if necessary
                chain_length = max(chain_length, 1 + child_chain_length)

        # Update the longest chain if necessary
        longest_chain = max(longest_chain, chain_length)

        # Return the length of the current chain
        return chain_length

    # Iterate over all nodes and perform DFS
    for node in pair_dict:
        if node not in visited:
            dfs(node)

    return longest_chain",,,,,
Write a python function to find the first repeated character in a given string.,"def first_repeated_char(str1):
  for index,c in enumerate(str1):
    if str1[:index+1].count(c) > 1:
      return c 
  return ""None""",602,Write a python function to find the first repeated character in a given string.,"['assert first_repeated_char(""abcabc"") == ""a""', 'assert first_repeated_char(""abc"") == ""None""', 'assert first_repeated_char(""123123"") == ""1""']",[],"def find_first_repeated_char(string):
    char_count = {}
    for char in string:
        if char in char_count:
            return char
        char_count[char] = 1
    return None",,,,,
Write a function to get a lucid number smaller than or equal to n.,"def get_ludic(n):
	ludics = []
	for i in range(1, n + 1):
		ludics.append(i)
	index = 1
	while(index != len(ludics)):
		first_ludic = ludics[index]
		remove_index = index + first_ludic
		while(remove_index < len(ludics)):
			ludics.remove(ludics[remove_index])
			remove_index = remove_index + first_ludic - 1
		index += 1
	return ludics",603,Write a function to get a lucid number smaller than or equal to n.,"['assert get_ludic(10) == [1, 2, 3, 5, 7]', 'assert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]', 'assert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]']",[],"def get_lucid_number(n):
    if n < 1:
        return []

    lucid = [1]
    next_lucid = 2

    while next_lucid <= n:
        if all(next_lucid % x != 0 for x in lucid):
            lucid.append(next_lucid)
        next_lucid += 1

    return lucid
assert get_lucid_number(10) == [1, 2, 3, 5, 7]
assert get_lucid_number(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]
assert get_lucid_number(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]",,,,,
Write a function to reverse words in a given string.,"def reverse_words(s):
        return ' '.join(reversed(s.split()))",604,Write a function to reverse words in a given string.,"['assert reverse_words(""python program"")==(""program python"")', 'assert reverse_words(""java language"")==(""language java"")', 'assert reverse_words(""indian man"")==(""man indian"")']",[],,,,,,
Write a function to check if the given integer is a prime number.,"def prime_num(num):
  if num >=1:
   for i in range(2, num//2):
     if (num % i) == 0:
                return False
     else:
                return True
  else:
          return False",605,Write a function to check if the given integer is a prime number.,"['assert prime_num(13)==True', 'assert prime_num(7)==True', 'assert prime_num(-1010)==False']",[],"def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True",,,,,
Write a function to convert degrees to radians.,"import math
def radian_degree(degree):
 radian = degree*(math.pi/180)
 return radian",606,Write a function to convert degrees to radians.,"['assert radian_degree(90)==1.5707963267948966', 'assert radian_degree(60)==1.0471975511965976', 'assert radian_degree(120)==2.0943951023931953']",[],"import math

def degrees_to_radians(degrees):
    return math.radians(degrees)",,,,,
Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.,"import re
pattern = 'fox'
text = 'The quick brown fox jumps over the lazy dog.'
def find_literals(text, pattern):
  match = re.search(pattern, text)
  s = match.start()
  e = match.end()
  return (match.re.pattern, s, e)",607,Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.,"[""assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)"", ""assert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)"", ""assert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)""]",[],"import re

def find_literal_string(text, pattern):
    # Escape special characters in the pattern to treat it as a literal string
    escaped_pattern = re.escape(pattern)
    
    # Create a regular expression pattern with word boundaries
    regex_pattern = r'\b' + escaped_pattern + r'\b'
    
    # Search for the pattern in the text
    match = re.search(regex_pattern, text)
    
    # If a match is found, return its start and end indices
    if match:
        start_index = match.start()
        end_index = match.end()
        return start_index, end_index
    
    # If no match is found, return None
    return None",,,,,
Write a python function to find nth bell number.,"def bell_Number(n): 
    bell = [[0 for i in range(n+1)] for j in range(n+1)] 
    bell[0][0] = 1
    for i in range(1, n+1):
        bell[i][0] = bell[i-1][i-1]
        for j in range(1, i+1): 
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] 
    return bell[n][0] ",608,Write a python function to find nth bell number.,"['assert bell_Number(2) == 2', 'assert bell_Number(3) == 5', 'assert bell_Number(4) == 15']",[],"def bell_number(n):
    if n == 0:
        return 1
    
    bell = [1] * (n + 1)
    
    for i in range(2, n + 1):
        for j in range(i):
            bell[i] += bell[j]
    
    return bell[n]",,,,,
Write a python function to find minimum possible value for the given periodic function.,"def floor_Min(A,B,N):
    x = max(B - 1,N)
    return (A*x) // B",609,Write a python function to find minimum possible value for the given periodic function.,"['assert floor_Min(10,20,30) == 15', 'assert floor_Min(1,2,1) == 0', 'assert floor_Min(11,10,9) == 9']",[],"def find_minimum_value(periods, values):
    if not periods or not values or len(periods) != len(values):
        return None

    # Create a dictionary to store the periods and their corresponding values
    period_dict = dict(zip(periods, values))

    # Find the smallest period
    min_period = min(period_dict.keys())

    # Find the minimum value within the smallest period
    min_value = min(values[:len(values) // len(periods)])

    return min_value",,,,,
Write a python function to remove the k'th element from a given list.,"def remove_kth_element(list1, L):
    return  list1[:L-1] + list1[L:]",610,Write a python function to remove the k'th element from a given list.,"['assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]', 'assert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]', 'assert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]']",[],"def remove_kth_element(lst, k):
    if k < 0 or k >= len(lst):
        raise ValueError(""k is out of range"")
    return lst[:k] + lst[k+1:]",,,,,
Write a function to find the maximum of nth column from the given tuple list.,"def max_of_nth(test_list, N):
  res = max([sub[N] for sub in test_list])
  return (res) ",611,Write a function to find the maximum of nth column from the given tuple list.,"['assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19', 'assert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10', 'assert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11']",[],"def find_max_nth_column(tuple_list, n):
    if not tuple_list or not 0 < n <= len(tuple_list[0]):
        return None

    max_value = float('-inf')
    for row in tuple_list:
        if len(row) >= n:
            max_value = max(max_value, row[n-1])

    return max_value",,,,,
Write a python function to merge the first and last elements separately in a list of lists.,"def merge(lst):  
    return [list(ele) for ele in list(zip(*lst))] ",612,Write a python function to merge the first and last elements separately in a list of lists.,"[""assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]"", 'assert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]', ""assert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]""]",[],"def merge_first_last(lst_of_lists):
    merged_list = []
    for sublist in lst_of_lists:
        if len(sublist) >= 2:
            merged_sublist = [sublist[0], sublist[-1]] + sublist[1:-1]
            merged_list.append(merged_sublist)
        else:
            merged_list.append(sublist)
    return merged_list",,,,,
Write a function to find the maximum value in record list as tuple attribute in the given tuple list.,"def maximum_value(test_list):
  res = [(key, max(lst)) for key, lst in test_list]
  return (res) ",613,Write a function to find the maximum value in record list as tuple attribute in the given tuple list.,"[""assert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]"", ""assert maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]"", ""assert maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]""]",[],"def find_maximum_value(tuple_list):
    max_values = {}
    
    for key_tuple in tuple_list:
        key, value_list = key_tuple[0], key_tuple[1]
        max_value = max(value_list)
        max_values[key] = max_value
    
    return max_values",,,,,
Write a function to find the cumulative sum of all the values that are present in the given tuple list.,"def cummulative_sum(test_list):
  res = sum(map(sum, test_list))
  return (res)",614,Write a function to find the cumulative sum of all the values that are present in the given tuple list.,"['assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30', 'assert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37', 'assert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44']",[],"def cumulative_sum_tuple_list(tuple_list):
    cumulative_sum = 0
    for sublist in tuple_list:
        for value in sublist:
            if isinstance(value, int):
                cumulative_sum += value
    return cumulative_sum",,,,,
Write a function to find average value of the numbers in a given tuple of tuples.,"def average_tuple(nums):
    result = [sum(x) / len(x) for x in zip(*nums)]
    return result",615,Write a function to find average value of the numbers in a given tuple of tuples.,"['assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]', 'assert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]', 'assert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]']",[],"def average_tuple_of_tuples(tup):
    total = 0
    count = 0

    for inner_tup in tup:
        for num in inner_tup:
            total += num
            count += 1

    return total / count",,,,,
Write a function to perfom the modulo of tuple elements in the given two tuples.,"def tuple_modulo(test_tup1, test_tup2):
  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) 
  return (res) ",616,Write a function to perfom the modulo of tuple elements in the given two tuples.,"['assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)', 'assert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)', 'assert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)']",[],"def tuple_modulo(tuple1, tuple2):
    if len(tuple1) != len(tuple2):
        raise ValueError(""Both tuples must have the same length"")
    
    result = []
    for a, b in zip(tuple1, tuple2):
        result.append(a % b)
    
    return tuple(result)",,,,,
"Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.","def min_Jumps(a, b, d): 
    temp = a 
    a = min(a, b) 
    b = max(temp, b) 
    if (d >= b): 
        return (d + b - 1) / b 
    if (d == 0): 
        return 0
    if (d == a): 
        return 1
    else:
        return 2",617,"Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.","['assert min_Jumps(3,4,11)==3.5', 'assert min_Jumps(3,4,0)==0', 'assert min_Jumps(11,14,11)==1']",[],"def min_jumps(length, max_jump):
    # Create a list to represent the 2D plane, initialized with zeros
    plane = [0] * length

    # Set the starting position as 1 to indicate we have started from the origin
    plane[0] = 1

    # Number of jumps required to reach the target point
    jumps = 0

    # Iterate until we reach the target point or exceed the maximum possible jumps
    while plane[-1] == 0 and jumps < length:
        # Iterate over the current plane and update the next positions
        for i in range(length):
            if plane[i] != 0:
                # Check for valid jumps in the range [i+1, i+max_jump+1]
                for j in range(i + 1, min(i + max_jump + 1, length)):
                    plane[j] += plane[i]

        # Increment the number of jumps
        jumps += 1

    # Return the number of jumps if the target point is reached, else return -1
    return jumps if plane[-1] != 0 else -1",,,,,
Write a function to divide two lists using map and lambda function.,"def div_list(nums1,nums2):
  result = map(lambda x, y: x / y, nums1, nums2)
  return list(result)",618,Write a function to divide two lists using map and lambda function.,"['assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]', 'assert div_list([3,2],[1,4])==[3.0, 0.5]', 'assert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]']",[],"def divide_lists(list1, list2):
    return list(map(lambda x, y: x / y, list1, list2))",,,,,
Write a function to move all the numbers in it to the given string.,"def move_num(test_str):
  res = ''
  dig = ''
  for ele in test_str:
    if ele.isdigit():
      dig += ele
    else:
      res += ele
  res += dig
  return (res) ",619,Write a function to move all the numbers in it to the given string.,"[""assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'"", ""assert move_num('Avengers124Assemble') == 'AvengersAssemble124'"", ""assert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'""]",[],"def move_numbers_to_front(s):
    letters = []
    numbers = []
    
    for char in s:
        if char.isdigit():
            numbers.append(char)
        else:
            letters.append(char)
    
    return ''.join(numbers) + ''.join(letters)",,,,,
Write a function to find the largest subset where each pair is divisible.,"def largest_subset(a, n):
	dp = [0 for i in range(n)]
	dp[n - 1] = 1; 
	for i in range(n - 2, -1, -1):
		mxm = 0;
		for j in range(i + 1, n):
			if a[j] % a[i] == 0 or a[i] % a[j] == 0:
				mxm = max(mxm, dp[j])
		dp[i] = 1 + mxm
	return max(dp)",620,Write a function to find the largest subset where each pair is divisible.,"['assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4', 'assert largest_subset([10, 5, 3, 15, 20], 5) == 3', 'assert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4']",[],"def largest_divisible_subset(nums):
    if not nums:
        return []

    nums.sort()  # Sort the numbers in ascending order
    n = len(nums)
    dp = [1] * n  # Initialize dp array with 1s
    parent = [-1] * n  # To keep track of the parent of each element in the subset

    max_size = 1  # Maximum size of the divisible subset
    max_idx = 0  # Index of the element with the maximum size subset

    for i in range(1, n):
        for j in range(i):
            if nums[i] % nums[j] == 0 and dp[j] + 1 > dp[i]:
                dp[i] = dp[j] + 1
                parent[i] = j

        if dp[i] > max_size:
            max_size = dp[i]
            max_idx = i

    # Reconstruct the largest divisible subset
    subset = []
    while max_idx != -1:
        subset.append(nums[max_idx])
        max_idx = parent[max_idx]
    subset.reverse()

    return subset",,,,,
Write a function to increment the numeric values in the given strings by k.,"def increment_numerics(test_list, K):
  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]
  return res ",621,Write a function to increment the numeric values in the given strings by k.,"['assert increment_numerics([""MSM"", ""234"", ""is"", ""98"", ""123"", ""best"", ""4""] , 6) == [\'MSM\', \'240\', \'is\', \'104\', \'129\', \'best\', \'10\']', 'assert increment_numerics([""Dart"", ""356"", ""is"", ""88"", ""169"", ""Super"", ""6""] , 12) == [\'Dart\', \'368\', \'is\', \'100\', \'181\', \'Super\', \'18\']', 'assert increment_numerics([""Flutter"", ""451"", ""is"", ""44"", ""96"", ""Magnificent"", ""12""] , 33) == [\'Flutter\', \'484\', \'is\', \'77\', \'129\', \'Magnificent\', \'45\']']",[],"def increment_numeric_values(strings, k):
    result = []
    for s in strings:
        if isinstance(s, str):
            # Split the string into individual characters
            chars = list(s)
            numeric_start = None
            
            # Iterate over the characters to find and increment numeric values
            for i in range(len(chars)):
                if chars[i].isdigit():
                    # Start of a numeric value found
                    if numeric_start is None:
                        numeric_start = i
                else:
                    # End of a numeric value found or no numeric value
                    if numeric_start is not None:
                        # Convert the numeric substring to an integer, increment it, and convert back to string
                        numeric_str = ''.join(chars[numeric_start:i])
                        incremented_num = int(numeric_str) + k
                        incremented_str = str(incremented_num)
                        
                        # Replace the original numeric substring with the incremented value
                        chars[numeric_start:i] = list(incremented_str)
                        numeric_start = None
                
            # Handle the case when the numeric value is at the end of the string
            if numeric_start is not None:
                numeric_str = ''.join(chars[numeric_start:])
                incremented_num = int(numeric_str) + k
                incremented_str = str(incremented_num)
                
                # Replace the original numeric substring with the incremented value
                chars[numeric_start:] = list(incremented_str)
            
            # Join the characters back into a string
            result.append(''.join(chars))
        else:
            # If the element is not a string, add it to the result as it is
            result.append(s)
    
    return result",,,,,
Write a function to find the median of two sorted arrays of same size.,"def get_median(arr1, arr2, n):
  i = 0
  j = 0
  m1 = -1
  m2 = -1
  count = 0
  while count < n + 1:
    count += 1
    if i == n:
      m1 = m2
      m2 = arr2[0]
      break
    elif j == n:
      m1 = m2
      m2 = arr1[0]
      break
    if arr1[i] <= arr2[j]:
      m1 = m2
      m2 = arr1[i]
      i += 1
    else:
      m1 = m2
      m2 = arr2[j]
      j += 1
  return (m1 + m2)/2",622,Write a function to find the median of two sorted arrays of same size.,"['assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0', 'assert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5', 'assert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0']",[],"def find_median_sorted_arrays(nums1, nums2):
    merged = sorted(nums1 + nums2)
    n = len(merged)
    if n % 2 == 0:
        return (merged[n // 2 - 1] + merged[n // 2]) / 2
    else:
        return merged[n // 2]",,,,,
Write a function to find the n-th power of individual elements in a list using lambda function.,"def nth_nums(nums,n):
 nth_nums = list(map(lambda x: x ** n, nums))
 return nth_nums",623,Write a function to find the n-th power of individual elements in a list using lambda function.,"['assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]', 'assert nth_nums([10,20,30],3)==([1000, 8000, 27000])', 'assert nth_nums([12,15],5)==([248832, 759375])']",[],"def power_elements(lst, n):
    return list(map(lambda x: x ** n, lst))",,,,,
Write a python function to convert the given string to upper case.,"def is_upper(string):
  return (string.upper())",624,Write a python function to convert the given string to upper case.,"['assert is_upper(""person"") ==""PERSON""', 'assert is_upper(""final"") == ""FINAL""', 'assert is_upper(""Valid"") == ""VALID""']",[],,,,,,
Write a python function to interchange first and last elements in a given list.,"def swap_List(newList): 
    size = len(newList) 
    temp = newList[0] 
    newList[0] = newList[size - 1] 
    newList[size - 1] = temp   
    return newList ",625,Write a python function to interchange first and last elements in a given list.,"['assert swap_List([1,2,3]) == [3,2,1]', 'assert swap_List([1,2,3,4,4]) == [4,2,3,4,1]', 'assert swap_List([4,5,6]) == [6,5,4]']",[],,,,,,
Write a python function to find the largest triangle that can be inscribed in the semicircle.,"def triangle_area(r) :  
    if r < 0 : 
        return -1
    return r * r ",626,Write a python function to find the largest triangle that can be inscribed in the semicircle.,"['assert triangle_area(0) == 0', 'assert triangle_area(-1) == -1', 'assert triangle_area(2) == 4']",[],"import math

def largest_inscribed_triangle(radius):
    """"""
    Find the area of the largest triangle that can be inscribed in a semicircle with the given radius.
    
    :param radius: The radius of the semicircle.
    :return: The area of the largest inscribed triangle.
    """"""
    # The largest triangle inscribed in a semicircle is an isosceles triangle
    # with the base equal to the diameter of the semicircle and the height equal to the radius.
    base = 2 * radius
    height = radius
    
    # Calculate the area of the triangle using the formula (base * height) / 2
    area = (base * height) / 2
    
    return area",,,,,
Write a python function to find the smallest missing number from the given array.,"def find_First_Missing(array,start,end): 
    if (start > end): 
        return end + 1
    if (start != array[start]): 
        return start; 
    mid = int((start + end) / 2) 
    if (array[mid] == mid): 
        return find_First_Missing(array,mid+1,end) 
    return find_First_Missing(array,start,mid) ",627,Write a python function to find the smallest missing number from the given array.,"['assert find_First_Missing([0,1,2,3],0,3) == 4', 'assert find_First_Missing([0,1,2,6,9],0,4) == 3', 'assert find_First_Missing([2,3,5,8,9],0,4) == 0']",[],"def find_smallest_missing_number(arr):
    # Create a set from the array to remove duplicates
    arr_set = set(arr)
    
    # Initialize the smallest missing number as 0
    smallest_missing = 0
    
    # Iterate through the range of possible numbers
    for num in range(min(arr), max(arr) + 2):
        # If the current number is not in the set, it's missing
        if num not in arr_set:
            smallest_missing = num
            break
    
    return smallest_missing",,,,,
Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.,"MAX=1000;
def replace_spaces(string):
  string=string.strip()
  i=len(string)
  space_count=string.count(' ')
  new_length = i + space_count*2
  if new_length > MAX:
    return -1
  index = new_length-1
  string=list(string)
  for f in range(i-2, new_length-2):
    string.append('0')
  for j in range(i-1, 0, -1):
    if string[j] == ' ':
      string[index] = '0'
      string[index-1] = '2'
      string[index-2] = '%'
      index=index-3
    else:
      string[index] = string[j]
      index -= 1
  return ''.join(string)",628,Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.,"['assert replace_spaces(""My Name is Dawood"") == \'My%20Name%20is%20Dawood\'', 'assert replace_spaces(""I am a Programmer"") == \'I%20am%20a%20Programmer\'', 'assert replace_spaces(""I love Coding"") == \'I%20love%20Coding\'']",[],"def replace_spaces(s):
    return ''.join(('%20' if char == ' ' else char for char in s))",,,,,
Write a python function to find even numbers from a mixed list.,"def Split(list): 
    ev_li = [] 
    for i in list: 
        if (i % 2 == 0): 
            ev_li.append(i)  
    return ev_li",629,Write a python function to find even numbers from a mixed list.,"['assert Split([1,2,3,4,5]) == [2,4]', 'assert Split([4,5,6,7,8,0,1]) == [4,6,8,0]', 'assert Split ([8,12,15,19]) == [8,12]']",[],"def find_even_numbers(mixed_list):
    even_numbers = []
    for item in mixed_list:
        if isinstance(item, int) and item % 2 == 0:
            even_numbers.append(item)
    return even_numbers",,,,,
Write a function to extract all the adjacent coordinates of the given coordinate tuple.,"def adjac(ele, sub = []): 
  if not ele: 
     yield sub 
  else: 
     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) 
                for idx in adjac(ele[1:], sub + [j])] 
def get_coordinates(test_tup):
  res = list(adjac(test_tup))
  return (res) ",630,Write a function to extract all the adjacent coordinates of the given coordinate tuple.,"['assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]', 'assert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]', 'assert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]']",[],,,,,,
Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.,"import re
text = 'Python Exercises'
def replace_spaces(text):
  text =text.replace ("" "", ""_"")
  return (text)
  text =text.replace (""_"", "" "")
  return (text)",631,Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.,"[""assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'"", ""assert replace_spaces('The Avengers') == 'The_Avengers'"", ""assert replace_spaces('Fast and Furious') == 'Fast_and_Furious'""]",[],,,,,,
Write a python function to move all zeroes to the end of the given list.,"def move_zero(num_list):
    a = [0 for i in range(num_list.count(0))]
    x = [ i for i in num_list if i != 0]
    x.extend(a)
    return (x)",632,Write a python function to move all zeroes to the end of the given list.,"['assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]', 'assert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]', 'assert move_zero([0,1,0,1,1]) == [1,1,1,0,0]']",[],"def move_zeros_to_end(lst):
    # Create two separate lists for non-zero and zero elements
    non_zero_elements = []
    zero_elements = []

    # Iterate over the input list
    for num in lst:
        if num != 0:
            non_zero_elements.append(num)
        else:
            zero_elements.append(num)

    # Concatenate the two lists to get the final result
    return non_zero_elements + zero_elements",,,,,
Write a python function to find the sum of xor of all pairs of numbers in the given array.,"def pair_OR_Sum(arr,n) : 
    ans = 0 
    for i in range(0,n) :    
        for j in range(i + 1,n) :   
            ans = ans + (arr[i] ^ arr[j])          
    return ans ",633,Write a python function to find the sum of xor of all pairs of numbers in the given array.,"['assert pair_OR_Sum([5,9,7,6],4) == 47', 'assert pair_OR_Sum([7,3,5],3) == 12', 'assert pair_OR_Sum([7,3],2) == 4']",[],,,,,,
Write a python function to find the sum of fourth power of first n even natural numbers.,"def even_Power_Sum(n): 
    sum = 0; 
    for i in range(1,n + 1): 
        j = 2*i; 
        sum = sum + (j*j*j*j); 
    return sum; ",634,Write a python function to find the sum of fourth power of first n even natural numbers.,"['assert even_Power_Sum(2) == 272', 'assert even_Power_Sum(3) == 1568', 'assert even_Power_Sum(4) == 5664']",[],,,,,,
Write a function to push all values into a heap and then pop off the smallest values one at a time.,"import heapq as hq
def heap_sort(iterable):
    h = []
    for value in iterable:
        hq.heappush(h, value)
    return [hq.heappop(h) for i in range(len(h))]",635,Write a function to push all values into a heap and then pop off the smallest values one at a time.,"['assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]', 'assert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]', 'assert heap_sort( [7, 1, 9, 5])==[1,5,7,9]']",[],"import heapq

def pop_smallest_from_heap(values):
    heap = []
    for value in values:
        heapq.heappush(heap, value)
    
    result = []
    while heap:
        result.append(heapq.heappop(heap))
    
    return result",,,,,
Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.,"def Check_Solution(a,b,c): 
    if (a == c): 
        return (""Yes""); 
    else: 
        return (""No""); ",636,Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.,"['assert Check_Solution(2,0,2) == ""Yes""', 'assert Check_Solution(2,-5,2) == ""Yes""', 'assert Check_Solution(1,2,3) == ""No""']",[],"def are_roots_reciprocal(a, b, c):
    # Calculate the discriminant
    discriminant = b**2 - 4*a*c

    # Check if the discriminant is positive (real roots)
    if discriminant < 0:
        return False  # No real roots, so they can't be reciprocal

    # Calculate the roots
    root1 = (-b + discriminant**0.5) / (2*a)
    root2 = (-b - discriminant**0.5) / (2*a)

    # Check if the roots are reciprocal of each other
    return root1 * root2 == 1",,,,,
Write a function to check whether the given amount has no profit and no loss,"def noprofit_noloss(actual_cost,sale_amount): 
  if(sale_amount == actual_cost):
    return True
  else:
    return False",637,Write a function to check whether the given amount has no profit and no loss,"['assert noprofit_noloss(1500,1200)==False', 'assert noprofit_noloss(100,100)==True', 'assert noprofit_noloss(2000,5000)==False']",[],"def has_no_profit_and_no_loss(amount):
    return amount == 0",,,,,
Write a function to calculate wind chill index.,"import math
def wind_chill(v,t):
 windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)
 return int(round(windchill, 0))",638,Write a function to calculate wind chill index.,"['assert wind_chill(120,35)==40', 'assert wind_chill(40,70)==86', 'assert wind_chill(10,100)==116']",[],"def calculate_wind_chill(temperature, wind_speed):
    """"""
    Calculate the wind chill index based on the temperature and wind speed.
    
    :param temperature: The temperature in Fahrenheit.
    :param wind_speed: The wind speed in miles per hour.
    :return: The wind chill index in Fahrenheit.
    """"""
    if temperature >= 50 or wind_speed <= 3:
        return ""Wind chill index is not applicable under these conditions.""
    else:
        return 35.74 + 0.6215 * temperature - 35.75 * (wind_speed ** 0.16) + 0.4275 * temperature * (wind_speed ** 0.16)

# Example usage:
print(calculate_wind_chill(12, 35))  # Output: 40
print(calculate_wind_chill(40, 70))  # Output: 86
print(calculate_wind_chill(10, 100))  # Output: 116",,,,,
Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.,"def sample_nam(sample_names):
  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))
  return len(''.join(sample_names))",639,Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.,"[""assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16"", 'assert sample_nam([""php"", ""res"", ""Python"", ""abcd"", ""Java"", ""aaa""])==10', 'assert sample_nam([""abcd"", ""Python"", ""abba"", ""aba""])==6']",[],"def sum_lengths_of_names(names):
    filtered_names = [name for name in names if not name[0].islower()]
    return sum(len(name) for name in filtered_names)",,,,,
Write a function to remove the parenthesis area in a string.,"import re
def remove_parenthesis(items):
 for item in items:
    return (re.sub(r"" ?\([^)]+\)"", """", item))",640,Write a function to remove the parenthesis area in a string.,"['assert remove_parenthesis([""python (chrome)""])==(""python"")', 'assert remove_parenthesis([""string(.abc)""])==(""string"")', 'assert remove_parenthesis([""alpha(num)""])==(""alpha"")']",[],"import re

def remove_parenthesis_area(string):
    # Find all occurrences of parenthesized areas and replace them with an empty string
    pattern = r'\([^()]*\)'
    result = re.sub(pattern, '', string)
    return result",,,,,
Write a function to find the nth nonagonal number.,"def is_nonagonal(n): 
	return int(n * (7 * n - 5) / 2) ",641,Write a function to find the nth nonagonal number.,"['assert is_nonagonal(10) == 325', 'assert is_nonagonal(15) == 750', 'assert is_nonagonal(18) == 1089']",[],"def nonagonal_number(n):
    return n * (7 * n - 5) // 2",,,,,
Write a function to remove similar rows from the given tuple matrix.,"def remove_similar_row(test_list):
  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))
  return (res) ",642,Write a function to remove similar rows from the given tuple matrix.,"['assert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}', 'assert remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}', 'assert remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}']",[],,,,,,
"Write a function that matches a word containing 'z', not at the start or end of the word.","import re
def text_match_wordz_middle(text):
        patterns = '\Bz\B'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')",643,"Write a function that matches a word containing 'z', not at the start or end of the word.","['assert text_match_wordz_middle(""pythonzabc."")==(\'Found a match!\')', 'assert text_match_wordz_middle(""xyzabc."")==(\'Found a match!\')', 'assert text_match_wordz_middle(""  lang  ."")==(\'Not matched!\')']",[],"def match_word_with_z(words):
    for word in words:
        if 'z' in word and word[0] != 'z' and word[-1] != 'z':
            return True
    return False",,,,,
Write a python function to reverse an array upto a given position.,"def reverse_Array_Upto_K(input, k): 
  return (input[k-1::-1] + input[k:]) ",644,Write a python function to reverse an array upto a given position.,"['assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]', 'assert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]', 'assert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]']",[],,,,,,
Write a function to find the product of it’s kth index in the given tuples.,"def get_product(val) : 
	res = 1
	for ele in val: 
		res *= ele 
	return res 
def find_k_product(test_list, K):
  res = get_product([sub[K] for sub in test_list])
  return (res) ",645,Write a function to find the product of it’s kth index in the given tuples.,"['assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665', 'assert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280', 'assert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210']",[],"def find_kth_product(tuples, k):
    # Initialize the product variable
    product = 1
    
    # Iterate over each tuple in the given list of tuples
    for tup in tuples:
        # Check if the tuple has enough elements to reach the kth index
        if len(tup) > k:
            # Get the element at the kth index and multiply it with the current product
            product *= tup[k]
        else:
            # If the tuple doesn't have enough elements, return 0 or handle the error as needed
            return 0
    
    # Return the final product
    return product",,,,,
Write a python function to count number of cubes of size k in a cube of size n.,"def No_of_cubes(N,K):
    No = 0
    No = (N - K + 1)
    No = pow(No, 3)
    return No",646,Write a python function to count number of cubes of size k in a cube of size n.,"['assert No_of_cubes(2,1) == 8', 'assert No_of_cubes(5,2) == 64', 'assert No_of_cubes(1,1) == 1']",[],"def count_cubes(n, k):
    """"""
    Count the number of cubes of size k in a cube of size n.
    
    :param n: Size of the outer cube
    :param k: Size of the inner cubes
    :return: Number of cubes of size k in the cube of size n
    """"""
    if n < k:
        return 0
    
    # Calculate the number of cubes in each dimension
    num_cubes_per_dim = (n - k + 1) // k
    
    # Calculate the total number of cubes
    total_cubes = num_cubes_per_dim ** 3
    
    return total_cubes",,,,,
Write a function to split a string at uppercase letters.,"import re
def split_upperstring(text):
 return (re.findall('[A-Z][^A-Z]*', text))",647,Write a function to split a string at uppercase letters.,"['assert split_upperstring(""PythonProgramLanguage"")==[\'Python\',\'Program\',\'Language\']', 'assert split_upperstring(""PythonProgram"")==[\'Python\',\'Program\']', 'assert split_upperstring(""ProgrammingLanguage"")==[\'Programming\',\'Language\']']",[],,,,,,
Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.,"from itertools import zip_longest, chain, tee
def exchange_elements(lst):
    lst1, lst2 = tee(iter(lst), 2)
    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))",648,Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.,"['assert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] ', 'assert exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] ', 'assert exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] ']",[],"def exchange_elements(lst, n):
    if len(lst) < n:
        return lst  # Return the original list if it has fewer than n elements
    
    for i in range(0, len(lst) - n, n):
        lst[i], lst[i + 1] = lst[i + 1], lst[i]
    
    return lst",,,,,
Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.,"def sum_Range_list(nums, m, n):                                                                                                                                                                                                
    sum_range = 0                                                                                                                                                                                                         
    for i in range(m, n+1, 1):                                                                                                                                                                                        
        sum_range += nums[i]                                                                                                                                                                                                  
    return sum_range   ",649,Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.,"['assert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29', 'assert sum_Range_list([1,2,3,4,5],1,2) == 5', 'assert sum_Range_list([1,0,1,2,5,6],4,5) == 11']",[],"def sum_range_list(lst, start_index, end_index):
    # Ensure the indices are within the list bounds
    start_index = max(0, start_index)
    end_index = min(len(lst) - 1, end_index)
    
    # Calculate the sum of numbers in the specified range
    return sum(lst[start_index:end_index + 1])",,,,,
Write a python function to check whether the given two arrays are equal or not.,"def are_Equal(arr1,arr2,n,m):
    if (n != m):
        return False
    arr1.sort()
    arr2.sort()
    for i in range(0,n - 1):
        if (arr1[i] != arr2[i]):
            return False
    return True",650,Write a python function to check whether the given two arrays are equal or not.,"['assert are_Equal([1,2,3],[3,2,1],3,3) == True', 'assert are_Equal([1,1,1],[2,2,2],3,3) == False', 'assert are_Equal([8,9],[4,5,6],2,3) == False']",[],,,,,,
Write a function to check if one tuple is a subset of another tuple.,"def check_subset(test_tup1, test_tup2):
  res = set(test_tup2).issubset(test_tup1)
  return (res) ",651,Write a function to check if one tuple is a subset of another tuple.,"['assert check_subset((10, 4, 5, 6), (5, 10)) == True', 'assert check_subset((1, 2, 3, 4), (5, 6)) == False', 'assert check_subset((7, 8, 9, 10), (10, 8)) == True']",[],"def is_subset(tuple1, tuple2):
    set1 = set(tuple1)
    set2 = set(tuple2)
    return set1.issubset(set2)",,,,,
Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.,"def matrix_to_list(test_list):
  temp = [ele for sub in test_list for ele in sub]
  res = list(zip(*temp))
  return (str(res))",652,Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.,"[""assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'"", ""assert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'"", ""assert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'""]",[],"def flatten_tuple_matrix(matrix):
    # Get the number of rows and columns in the matrix
    num_rows = len(matrix)
    if num_rows == 0:
        return ()
    num_cols = len(matrix[0])

    # Initialize an empty list to store the flattened tuples
    flattened = []

    # Iterate over each column
    for col in range(num_cols):
        # Extract the elements from each row for the current column
        col_elements = [row[col] for row in matrix]
        # Append the tuple of column elements to the flattened list
        flattened.append(tuple(col_elements))

    # Return the flattened list as a tuple
    return tuple(flattened)",,,,,
Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.,"from collections import defaultdict
def grouping_dictionary(l):
    d = defaultdict(list)
    for k, v in l:
        d[k].append(v)
    return d",653,Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.,"[""assert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})"", ""assert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})"", ""assert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})""]",[],"from collections import defaultdict

def group_key_value_pairs(pairs):
    grouped_dict = defaultdict(list)
    for key, value in pairs:
        grouped_dict[key].append(value)
    return dict(grouped_dict)",,,,,
Write a function to find the perimeter of a rectangle.,"def rectangle_perimeter(l,b):
  perimeter=2*(l+b)
  return perimeter",654,Write a function to find the perimeter of a rectangle.,"['assert rectangle_perimeter(10,20)==60', 'assert rectangle_perimeter(10,5)==30', 'assert rectangle_perimeter(4,2)==12']",[],"def rectangle_perimeter(length, width):
    return 2 * (length + width)",,,,,
Write a python function to find the sum of fifth power of n natural numbers.,"def fifth_Power_Sum(n) : 
    sm = 0 
    for i in range(1,n+1) : 
        sm = sm + (i*i*i*i*i) 
    return sm ",655,Write a python function to find the sum of fifth power of n natural numbers.,"['assert fifth_Power_Sum(2) == 33', 'assert fifth_Power_Sum(4) == 1300', 'assert fifth_Power_Sum(3) == 276']",[],"def fifth_power_sum(n):
    return sum(i**5 for i in range(1, n+1))",,,,,
Write a python function to find the minimum sum of absolute differences of two arrays.,"def find_Min_Sum(a,b,n): 
    a.sort() 
    b.sort() 
    sum = 0  
    for i in range(n): 
        sum = sum + abs(a[i] - b[i]) 
    return sum",656,Write a python function to find the minimum sum of absolute differences of two arrays.,"['assert find_Min_Sum([3,2,1],[2,1,3],3) == 0', 'assert find_Min_Sum([1,2,3],[4,5,6],3) == 9', 'assert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6']",[],"def min_sum_of_absolute_differences(arr1, arr2, k):
    arr1.sort()  # Sort the first array in ascending order
    n1, n2 = len(arr1), len(arr2)
    prefix_sums = [[0] * (k + 1) for _ in range(n1 + 1)]
    
    # Compute prefix sums for all possible combinations of elements from arr1
    for i in range(1, n1 + 1):
        for j in range(k + 1):
            prefix_sums[i][j] = prefix_sums[i - 1][j]
            if j >= 1:
                prefix_sums[i][j] += arr1[i - 1] * min(j, i)
    
    # Find the minimum sum of absolute differences
    min_sum = float('inf')
    for i in range(n2 + 1):
        for j in range(k + 1):
            if i == 0 or j == 0:
                continue
            remaining = k - j
            if remaining >= 0:
                # Compute the current sum of absolute differences
                current_sum = prefix_sums[min(n1, i + remaining)][j]
                if i < n2:
                    current_sum -= prefix_sums[max(0, i - remaining)][j]
                min_sum = min(min_sum, current_sum)
    
    return min_sum",,,,,
Write a python function to find the first digit in factorial of a given number.,"import math 
def first_Digit(n) : 
    fact = 1
    for i in range(2,n + 1) : 
        fact = fact * i 
        while (fact % 10 == 0) :  
            fact = int(fact / 10) 
    while (fact >= 10) : 
        fact = int(fact / 10) 
    return math.floor(fact) ",657,Write a python function to find the first digit in factorial of a given number.,"['assert first_Digit(5) == 1', 'assert first_Digit(10) == 3', 'assert first_Digit(7) == 5']",[],"def first_digit_in_factorial(n):
    factorial = 1
    while n > 0:
        factorial *= n
        n -= 1
    
    # Find the first digit of the factorial
    first_digit = str(factorial)[0]
    return int(first_digit)",,,,,
Write a function to find the item with maximum occurrences in a given list.,"def max_occurrences(list1):
    max_val = 0
    result = list1[0] 
    for i in list1:
        occu = list1.count(i)
        if occu > max_val:
            max_val = occu
            result = i 
    return result",658,Write a function to find the item with maximum occurrences in a given list.,"['assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2', 'assert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1', 'assert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1']",[],,,,,,
Write a python function to print duplicants from a list of integers.,"def Repeat(x): 
    _size = len(x) 
    repeated = [] 
    for i in range(_size): 
        k = i + 1
        for j in range(k, _size): 
            if x[i] == x[j] and x[i] not in repeated: 
                repeated.append(x[i]) 
    return repeated ",659,Write a python function to print duplicants from a list of integers.,"['assert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]', 'assert Repeat([-1, 1, -1, 8]) == [-1]', 'assert Repeat([1, 2, 3, 1, 2,]) == [1, 2]']",[],"def print_duplicants(numbers):
    count_dict = {}
    duplicants = []

    for num in numbers:
        if num in count_dict:
            count_dict[num] += 1
        else:
            count_dict[num] = 1

    for num, count in count_dict.items():
        if count > 1:
            duplicants.append(num)

    print(duplicants)",,,,,
Write a python function to choose points from two ranges such that no point lies in both the ranges.,"def find_Points(l1,r1,l2,r2): 
    x = min(l1,l2) if (l1 != l2) else -1
    y = max(r1,r2) if (r1 != r2) else -1
    return (x,y)",660,Write a python function to choose points from two ranges such that no point lies in both the ranges.,"['assert find_Points(5,10,1,5) == (1,10)', 'assert find_Points(3,5,7,9) == (3,9)', 'assert find_Points(1,5,2,8) == (1,8)']",[],"def choose_points(range1, range2):
    start1, end1 = range1
    start2, end2 = range2
    
    # Ensure the ranges are sorted in ascending order
    if start1 > end1:
        start1, end1 = end1, start1
    if start2 > end2:
        start2, end2 = end2, start2
    
    # Check if the ranges overlap
    if start1 <= end2 and start2 <= end1:
        # Overlapping ranges, find the intersection
        overlap_start = max(start1, start2)
        overlap_end = min(end1, end2)
        
        # Remove the intersection from both ranges
        points1 = set(range(start1, overlap_start)) | set(range(overlap_end + 1, end1 + 1))
        points2 = set(range(start2, overlap_start)) | set(range(overlap_end + 1, end2 + 1))
    else:
        # Non-overlapping ranges, use both ranges as points
        points1 = set(range(start1, end1 + 1))
        points2 = set(range(start2, end2 + 1))
    
    # Combine the points from both ranges
    all_points = points1 | points2
    
    return sorted(all_points)",,,,,
Write a function to find the maximum sum that can be formed which has no three consecutive elements present.,"def max_sum_of_three_consecutive(arr, n): 
	sum = [0 for k in range(n)] 
	if n >= 1: 
		sum[0] = arr[0] 
	if n >= 2: 
		sum[1] = arr[0] + arr[1] 
	if n > 2: 
		sum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) 
	for i in range(3, n): 
		sum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) 
	return sum[n-1]",661,Write a function to find the maximum sum that can be formed which has no three consecutive elements present.,"['assert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101', 'assert max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) == 5013', 'assert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27']",[],"def max_sum_without_three_consecutive(nums, k):
    n = len(nums)
    
    # Initialize dp array to store the maximum sum for each position
    dp = [0] * (n + 1)
    
    # Iterate over each position in the nums list
    for i in range(1, n + 1):
        # Consider two cases: either take the current element or skip it
        # Take the current element if it doesn't violate the three consecutive rule
        if i >= 3 and nums[i - 1] == nums[i - 2] == nums[i - 3]:
            dp[i] = dp[i - 1]
        else:
            dp[i] = max(dp[i - 1], dp[i - k] + nums[i - 1])
    
    return dp[n]",,,,,
Write a function to sort a list in a dictionary.,"def sorted_dict(dict1):
  sorted_dict = {x: sorted(y) for x, y in dict1.items()}
  return sorted_dict",662,Write a function to sort a list in a dictionary.,"[""assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}"", ""assert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}"", ""assert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}""]",[],"def sort_dict_lists(dictionary):
    """"""
    Sorts the lists within a given dictionary.
    
    Args:
        dictionary (dict): The dictionary containing lists as values.
        
    Returns:
        dict: The dictionary with sorted lists.
    """"""
    sorted_dict = {}
    for key, value in dictionary.items():
        sorted_dict[key] = sorted(value)
    return sorted_dict",,,,,
Write a function to find the largest possible value of k such that k modulo x is y.,"import sys 
def find_max_val(n, x, y): 
	ans = -sys.maxsize 
	for k in range(n + 1): 
		if (k % x == y): 
			ans = max(ans, k) 
	return (ans if (ans >= 0 and
					ans <= n) else -1) ",663,Write a function to find the largest possible value of k such that k modulo x is y.,"['assert find_max_val(15, 10, 5) == 15', 'assert find_max_val(187, 10, 5) == 185', 'assert find_max_val(16, 11, 1) == 12']",[],"def find_max_k(x, y):
    return (x - 1) if y == 0 else (x - y) + (x - 1) * (y // x)",,,,,
Write a python function to find the average of even numbers till a given even number.,"def average_Even(n) : 
    if (n% 2!= 0) : 
        return (""Invalid Input"") 
        return -1  
    sm = 0
    count = 0
    while (n>= 2) : 
        count = count+1
        sm = sm+n 
        n = n-2
    return sm // count ",664,Write a python function to find the average of even numbers till a given even number.,"['assert average_Even(2) == 2', 'assert average_Even(4) == 3', 'assert average_Even(100) == 51']",[],"def average_even_numbers(n):
    if n % 2 != 0:
        raise ValueError(""Input must be an even number."")
    
    even_sum = 0
    count = 0
    
    for i in range(2, n + 1, 2):
        even_sum += i
        count += 1
    
    average = even_sum / count
    return average",,,,,
Write a python function to shift first element to the end of given list.,"def move_last(num_list):
    a = [num_list[0] for i in range(num_list.count(num_list[0]))]
    x = [ i for i in num_list if i != num_list[0]]
    x.extend(a)
    return (x)",665,Write a python function to shift first element to the end of given list.,"['assert move_last([1,2,3,4]) == [2,3,4,1]', 'assert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]', 'assert move_last([5,4,3,2,1]) == [4,3,2,1,5]']",[],"def shift_first_to_end(lst):
    if not lst:
        return lst
    first_element = lst[0]
    return lst[1:] + [first_element]",,,,,
Write a function to count occurrence of a character in a string.,"def count_char(string,char):
 count = 0
 for i in range(len(string)):
    if(string[i] == char):
        count = count + 1
 return count",666,Write a function to count occurrence of a character in a string.,"['assert count_char(""Python"",\'o\')==1', 'assert count_char(""little"",\'t\')==2', 'assert count_char(""assert"",\'s\')==2']",[],,,,,,
Write a python function to count number of vowels in the string.,"def Check_Vow(string, vowels): 
    final = [each for each in string if each in vowels] 
    return(len(final)) 
",667,Write a python function to count number of vowels in the string.,"[""assert Check_Vow('corner','AaEeIiOoUu') == 2"", ""assert Check_Vow('valid','AaEeIiOoUu') == 2"", ""assert Check_Vow('true','AaEeIiOoUu') ==2""]",[],,,,,,
Write a python function to replace multiple occurence of character by single.,"import re 
def replace(string, char): 
    pattern = char + '{2,}'
    string = re.sub(pattern, char, string) 
    return string ",668,Write a python function to replace multiple occurence of character by single.,"[""assert replace('peep','e') == 'pep'"", ""assert replace('Greek','e') == 'Grek'"", ""assert replace('Moon','o') == 'Mon'""]",[],,,,,,
Write a function to check whether the given ip address is valid or not using regex.,"import re 
regex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.( 
			25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.( 
			25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.( 
			25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''
def check_IP(Ip): 
	if(re.search(regex, Ip)): 
		return (""Valid IP address"") 
	else: 
		return (""Invalid IP address"") ",669,Write a function to check whether the given ip address is valid or not using regex.,"['assert check_IP(""192.168.0.1"") == \'Valid IP address\'', 'assert check_IP(""110.234.52.124"") == \'Valid IP address\'', 'assert check_IP(""366.1.2.2"") == \'Invalid IP address\'']",[],"import re

def is_valid_ip(ip_address):
    pattern = r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'
    return bool(re.match(pattern, ip_address))",,,,,
Write a python function to check whether a sequence of numbers has a decreasing trend or not.,"def decreasing_trend(nums):
    if (sorted(nums)== nums):
        return True
    else:
        return False",670,Write a python function to check whether a sequence of numbers has a decreasing trend or not.,"['assert decreasing_trend([-4,-3,-2,-1]) == True', 'assert decreasing_trend([1,2,3]) == True', 'assert decreasing_trend([3,2,1]) == False']",[],,,,,,
Write a python function to set the right most unset bit.,"import math 
def get_Pos_Of_Right_most_Set_Bit(n): 
    return int(math.log2(n&-n)+1)   
def set_Right_most_Unset_Bit(n): 
    if (n == 0): 
        return 1
    if ((n & (n + 1)) == 0):     
        return n 
    pos = get_Pos_Of_Right_most_Set_Bit(~n)      
    return ((1 << (pos - 1)) | n) ",671,Write a python function to set the right most unset bit.,"['assert set_Right_most_Unset_Bit(21) == 23', 'assert set_Right_most_Unset_Bit(11) == 15', 'assert set_Right_most_Unset_Bit(15) == 15']",[],,,,,,
Write a function to find maximum of three numbers.,"def max_of_three(num1,num2,num3): 
    if (num1 >= num2) and (num1 >= num3):
       lnum = num1
    elif (num2 >= num1) and (num2 >= num3):
       lnum = num2
    else:
       lnum = num3
    return lnum",672,Write a function to find maximum of three numbers.,"['assert max_of_three(10,20,30)==30', 'assert max_of_three(55,47,39)==55', 'assert max_of_three(10,49,30)==49']",[],"def max_of_three(num1, num2, num3):
    return max(num1, num2, num3)
assert max_of_three(10, 20, 30) == 30
assert max_of_three(55, 47, 39) == 55
assert max_of_three(10, 49, 30) == 49",,,,,
Write a python function to convert a list of multiple integers into a single integer.,"def convert(list): 
    s = [str(i) for i in list] 
    res = int("""".join(s))  
    return (res) ",673,Write a python function to convert a list of multiple integers into a single integer.,"['assert convert([1,2,3]) == 123', 'assert convert([4,5,6]) == 456', 'assert convert([7,8,9]) == 789']",[],,,,,,
Write a function to remove duplicate words from a given string using collections module.,"from collections import OrderedDict
def remove_duplicate(string):
  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())
  return result",674,Write a function to remove duplicate words from a given string using collections module.,"['assert remove_duplicate(""Python Exercises Practice Solution Exercises"")==(""Python Exercises Practice Solution"")', 'assert remove_duplicate(""Python Exercises Practice Solution Python"")==(""Python Exercises Practice Solution"")', 'assert remove_duplicate(""Python Exercises Practice Solution Practice"")==(""Python Exercises Practice Solution"")']",[],,,,,,
"Write a function to add two integers. however, if the sum is between the given range it will return 20.","def sum_nums(x, y,m,n):
    sum_nums= x + y
    if sum_nums in range(m, n):
        return 20
    else:
        return sum_nums",675,"Write a function to add two integers. however, if the sum is between the given range it will return 20.","['assert sum_nums(2,10,11,20)==20', 'assert sum_nums(15,17,1,10)==32', 'assert sum_nums(10,15,5,30)==20']",[],"def add_numbers_with_condition(num1, num2, range_start, range_end):
    sum_result = num1 + num2
    if range_start <= sum_result <= range_end:
        return 20
    else:
        return sum_result",,,,,
Write a function to remove everything except alphanumeric characters from the given string by using regex.,"import re
def remove_extra_char(text1):
  pattern = re.compile('[\W_]+')
  return (pattern.sub('', text1))",676,Write a function to remove everything except alphanumeric characters from the given string by using regex.,"[""assert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'"", ""assert remove_extra_char('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'"", ""assert remove_extra_char('**//Google Firebase// - 478. ') == 'GoogleFirebase478'""]",[],"import re

def remove_non_alphanumeric(string):
    # Use regex to remove non-alphanumeric characters
    cleaned_string = re.sub(r'[^a-zA-Z0-9]', '', string)
    return cleaned_string",,,,,
Write a function to check if the triangle is valid or not.,"def validity_triangle(a,b,c):
 total = a + b + c
 if total == 180:
    return True
 else:
    return False",677,Write a function to check if the triangle is valid or not.,"['assert validity_triangle(60,50,90)==False', 'assert validity_triangle(45,75,60)==True', 'assert validity_triangle(30,50,100)==True']",[],"def is_valid_triangle(a, b, c):
    """"""
    Check if a triangle is valid given its three sides.
    
    :param a: Length of side a
    :param b: Length of side b
    :param c: Length of side c
    :return: True if the triangle is valid, False otherwise
    """"""
    # Check if any side is negative
    if a < 0 or b < 0 or c < 0:
        return False
    
    # Check if the sum of any two sides is greater than the third side
    if a + b <= c or a + c <= b or b + c <= a:
        return False
    
    # If all conditions pass, the triangle is valid
    return True",,,,,
Write a python function to remove spaces from a given string.,"def remove_spaces(str1):
  str1 = str1.replace(' ','')
  return str1",678,Write a python function to remove spaces from a given string.,"['assert remove_spaces(""a b c"") == ""abc""', 'assert remove_spaces(""1 2 3"") == ""123""', 'assert remove_spaces("" b c"") == ""bc""']",[],"def remove_spaces(string):
    return ''.join(string.split())
def remove_spaces_only(string):
    return ''.join(string.split(' '))",,,,,
Write a function to access dictionary key’s element by index.,"def access_key(ditionary,key):
  return list(ditionary)[key]",679,Write a function to access dictionary key’s element by index.,"[""assert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'"", ""assert access_key({'python':10, 'java': 20, 'C++':30},2)== 'C++'"", ""assert access_key({'program':15,'computer':45},1)== 'computer'""]",[],"def access_dict_key_by_index(dictionary, index):
    keys = list(dictionary.keys())
    if index < 0 or index >= len(keys):
        raise IndexError(""Index out of range"")
    return dictionary[keys[index]]",,,,,
Write a python function to check whether a sequence of numbers has an increasing trend or not.,"def increasing_trend(nums):
    if (sorted(nums)== nums):
        return True
    else:
        return False",680,Write a python function to check whether a sequence of numbers has an increasing trend or not.,"['assert increasing_trend([1,2,3,4]) == True', 'assert increasing_trend([4,3,2,1]) == False', 'assert increasing_trend([0,1,4,9]) == True']",[],"def assert_increasing_trend(sequence):
    return all(x < y for x, y in zip(sequence, sequence[1:]))",,,,,
Write a python function to find the smallest prime divisor of a number.,"def smallest_Divisor(n): 
    if (n % 2 == 0): 
        return 2; 
    i = 3;  
    while (i*i <= n): 
        if (n % i == 0): 
            return i; 
        i += 2; 
    return n; ",681,Write a python function to find the smallest prime divisor of a number.,"['assert smallest_Divisor(10) == 2', 'assert smallest_Divisor(25) == 5', 'assert smallest_Divisor(31) == 31']",[],"def smallest_prime_divisor(n):
    if n % 2 == 0:
        return 2

    for i in range(3, int(n**0.5) + 1, 2):
        if n % i == 0:
            return i

    return n",,,,,
Write a function to multiply two lists using map and lambda function.,"def mul_list(nums1,nums2):
  result = map(lambda x, y: x * y, nums1, nums2)
  return list(result)",682,Write a function to multiply two lists using map and lambda function.,"['assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]', 'assert mul_list([1,2],[3,4])==[3,8]', 'assert mul_list([90,120],[50,70])==[4500,8400]']",[],"def multiply_lists(list1, list2):
    return list(map(lambda x, y: x * y, list1, list2))",,,,,
Write a python function to check whether the given number can be represented by sum of two squares or not.,"def sum_Square(n) : 
    i = 1 
    while i*i <= n : 
        j = 1
        while (j*j <= n) : 
            if (i*i+j*j == n) : 
                return True
            j = j+1
        i = i+1     
    return False",683,Write a python function to check whether the given number can be represented by sum of two squares or not.,"['assert sum_Square(25) == True', 'assert sum_Square(24) == False', 'assert sum_Square(17) == True']",[],,,,,,
Write a python function to count occurences of a character in a repeated string.,"def count_Char(str,x): 
    count = 0
    for i in range(len(str)):  
        if (str[i] == x) : 
            count += 1
    n = 10
    repititions = n // len(str)  
    count = count * repititions  
    l = n % len(str)  
    for i in range(l): 
        if (str[i] == x):  
            count += 1
    return count  ",684,Write a python function to count occurences of a character in a repeated string.,"['assert count_Char(""abcac"",\'a\') == 4', 'assert count_Char(""abca"",\'c\') == 2', 'assert count_Char(""aba"",\'a\') == 7']",[],"def count_character_occurrences(string, character):
    count = 0
    for char in string:
        if char == character:
            count += 1
    return count",,,,,
Write a python function to find sum of prime numbers between 1 to n.,"def sum_Of_Primes(n): 
    prime = [True] * (n + 1)  
    p = 2
    while p * p <= n: 
        if prime[p] == True:  
            i = p * 2
            while i <= n: 
                prime[i] = False
                i += p 
        p += 1    
    sum = 0
    for i in range (2,n + 1): 
        if(prime[i]): 
            sum += i 
    return sum",685,Write a python function to find sum of prime numbers between 1 to n.,"['assert sum_Of_Primes(10) == 17', 'assert sum_Of_Primes(20) == 77', 'assert sum_Of_Primes(5) == 10']",[],"def sum_of_primes(n):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num ** 0.5) + 1):
            if num % i == 0:
                return False
        return True

    prime_sum = 0
    for num in range(2, n + 1):
        if is_prime(num):
            prime_sum += num

    return prime_sum",,,,,
Write a function to find the frequency of each element in the given list.,"from collections import defaultdict 
def freq_element(test_tup):
  res = defaultdict(int)
  for ele in test_tup:
    res[ele] += 1
  return (str(dict(res))) ",686,Write a function to find the frequency of each element in the given list.,"[""assert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'"", ""assert freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'"", ""assert freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'""]",[],,,,,,
Write a function to find the greatest common divisor (gcd) of two integers by using recursion.,"def recur_gcd(a, b):
	low = min(a, b)
	high = max(a, b)
	if low == 0:
		return high
	elif low == 1:
		return 1
	else:
		return recur_gcd(low, high%low)",687,Write a function to find the greatest common divisor (gcd) of two integers by using recursion.,"['assert recur_gcd(12,14) == 2', 'assert recur_gcd(13,17) == 1', 'assert recur_gcd(9, 3) == 3']",[],,,,,,
Write a function to get the length of a complex number.,"import cmath
def len_complex(a,b):
  cn=complex(a,b)
  length=abs(cn)
  return length",688,Write a function to get the length of a complex number.,"['assert len_complex(3,4)==5.0', 'assert len_complex(9,10)==13.45362404707371', 'assert len_complex(7,9)==11.40175425099138']",[],"import cmath

def get_complex_length(complex_num):
    return abs(complex_num)",,,,,
## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block,"def min_jumps(arr, n):
	jumps = [0 for i in range(n)]
	if (n == 0) or (arr[0] == 0):
		return float('inf')
	jumps[0] = 0
	for i in range(1, n):
		jumps[i] = float('inf')
		for j in range(i):
			if (i <= j + arr[j]) and (jumps[j] != float('inf')):
				jumps[i] = min(jumps[i], jumps[j] + 1)
				break
	return jumps[n-1]",689,## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block,"['assert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3', 'assert min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3', 'assert min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10']",[],"def min_jumps(nums):
    if not nums or len(nums) == 1:
        return 0

    max_reach = 0
    end = 0
    steps = 0

    for i in range(len(nums) - 1):
        max_reach = max(max_reach, i + nums[i])
        if i == end:
            end = max_reach
            steps += 1
            if end >= len(nums) - 1:
                break

    return steps",,,,,
Write a function to multiply consecutive numbers of a given list.,"def mul_consecutive_nums(nums):
    result = [b*a for a, b in zip(nums[:-1], nums[1:])]
    return result",690,Write a function to multiply consecutive numbers of a given list.,"['assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]', 'assert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]', 'assert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]']",[],"def multiply_consecutive_numbers(lst):
    result = []
    product = 1
    for num in lst:
        product *= num
        result.append(product)
    return result",,,,,
Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.,"from itertools import groupby 
def group_element(test_list):
  res = dict()
  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):
    res[key] = [ele[0] for ele in val] 
  return (res)
",691,Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.,"['assert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}', 'assert group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}', 'assert group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}']",[],"def group_elements(tuples_list):
    grouped_dict = {}
    
    for tup in tuples_list:
        key = tup[1]
        value = tup[0]
        
        if key in grouped_dict:
            grouped_dict[key].append(value)
        else:
            grouped_dict[key] = [value]
    
    return grouped_dict",,,,,
Write a python function to find the last two digits in factorial of a given number.,"def last_Two_Digits(N): 
    if (N >= 10): 
        return
    fac = 1
    for i in range(1,N + 1): 
        fac = (fac * i) % 100
    return (fac) ",692,Write a python function to find the last two digits in factorial of a given number.,"['assert last_Two_Digits(7) == 40', 'assert last_Two_Digits(5) == 20', 'assert last_Two_Digits(2) == 2']",[],"def last_two_digits_factorial(n):
    result = 1
    for i in range(1, n + 1):
        result = (result * i) % 100  # Modulo 100 to keep only the last two digits
    return result",,,,,
Write a function to remove multiple spaces in a string by using regex.,"import re
def remove_multiple_spaces(text1):
  return (re.sub(' +',' ',text1))",693,Write a function to remove multiple spaces in a string by using regex.,"[""assert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'"", ""assert remove_multiple_spaces('Quad      Core') == 'Quad Core'"", ""assert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in'""]",[],,,,,,
Write a function to extract unique values from the given dictionary values.,"def extract_unique(test_dict):
  res = list(sorted({ele for val in test_dict.values() for ele in val}))
  return res",694,Write a function to extract unique values from the given dictionary values.,"[""assert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]"", ""assert extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]"", ""assert extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]""]",[],"def extract_unique_values(dictionary):
    unique_values = set()
    for values in dictionary.values():
        unique_values.update(values)
    return sorted(list(unique_values))",,,,,
Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.,"def check_greater(test_tup1, test_tup2):
  res = all(x < y for x, y in zip(test_tup1, test_tup2))
  return (res) ",695,Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.,"['assert check_greater((10, 4, 5), (13, 5, 18)) == True', 'assert check_greater((1, 2, 3), (2, 1, 4)) == False', 'assert check_greater((4, 5, 6), (5, 6, 7)) == True']",[],"def check_elements_greater_than_index(tuple1, tuple2):
    if len(tuple1) != len(tuple2):
        return False
    
    for i, (elem1, elem2) in enumerate(zip(tuple1, tuple2)):
        if elem2 <= i:
            return False
    
    return True",,,,,
Write a function to zip two given lists of lists.,"def zip_list(list1,list2):  
 result = list(map(list.__add__, list1, list2)) 
 return result",696,Write a function to zip two given lists of lists.,"['assert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]', 'assert zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]', ""assert zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]""]",[],"def zip_lists_of_lists(list1, list2):
    return [list(a) + list(b) for a, b in zip(list1, list2)]",,,,,
Write a function to find number of even elements in the given list using lambda function.,"def count_even(array_nums):
   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))
   return count_even",697,Write a function to find number of even elements in the given list using lambda function.,"['assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3', 'assert count_even([10,15,14,13,-18,12,-20])==5', 'assert count_even([1, 2, 4, 8, 9])==3']",[],"def count_even_elements(lst):
    return len(list(filter(lambda x: x % 2 == 0, lst)))",,,,,
Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.,"def sort_dict_item(test_dict):
  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}
  return  (res) 
",698,Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.,"['assert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}', 'assert sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}', 'assert sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}']",[],"def sort_dict_by_tuple_product(dictionary):
    sorted_items = sorted(dictionary.items(), key=lambda item: item[0][0] * item[0][1])
    return dict(sorted_items)",,,,,
Write a python function to find the minimum number of swaps required to convert one binary string to another.,"def min_Swaps(str1,str2) : 
    count = 0
    for i in range(len(str1)) : 
        if str1[i] != str2[i] : 
            count += 1
    if count % 2 == 0 : 
        return (count // 2) 
    else : 
        return (""Not Possible"") ",699,Write a python function to find the minimum number of swaps required to convert one binary string to another.,"['assert min_Swaps(""1101"",""1110"") == 1', 'assert min_Swaps(""1111"",""0100"") == ""Not Possible""', 'assert min_Swaps(""1110000"",""0001101"") == 3']",[],"def min_swaps_to_convert_binary_strings(str1, str2):
    if len(str1) != len(str2):
        raise ValueError(""Both strings must have the same length"")

    if str1 == str2:
        return 0

    ones_in_str1 = [i for i, c in enumerate(str1) if c == '1']
    ones_in_str2 = [i for i, c in enumerate(str2) if c == '1']

    if len(ones_in_str1) != len(ones_in_str2):
        return -1  # Number of ones in both strings is different, impossible to convert

    # Calculate the number of swaps required for each '1' in str1 to be in the correct position in str2
    swaps = 0
    for i in range(len(ones_in_str1)):
        if ones_in_str1[i] != ones_in_str2[i]:
            # Find the correct position for the '1' in str1 in str2
            correct_position = ones_in_str2[i]
            while str1[correct_position] != '1':
                # Swap the '1' with the next character in str1 until it reaches the correct position
                next_one_index = ones_in_str1[ones_in_str1.index(correct_position) + 1]
                str1 = list(str1)
                str1[correct_position], str1[next_one_index] = str1[next_one_index], str1[correct_position]
                str1 = ''.join(str1)
                swaps += 1
                correct_position = next_one_index

    return swaps",,,,,
Write a function to count the number of elements in a list which are within a specific range.,"def count_range_in_list(li, min, max):
	ctr = 0
	for x in li:
		if min <= x <= max:
			ctr += 1
	return ctr",700,Write a function to count the number of elements in a list which are within a specific range.,"['assert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6', ""assert count_range_in_list(['a','b','c','d','e','f'],'a','e')==5"", 'assert count_range_in_list([7,8,9,15,17,19,45],15,20)==3']",[],"def count_elements_in_range(lst, start, end):
    count = 0
    for num in lst:
        if start <= num < end:
            count += 1
    return count",,,,,
Write a function to find the equilibrium index of the given array.,"def equilibrium_index(arr):
  total_sum = sum(arr)
  left_sum=0
  for i, num in enumerate(arr):
    total_sum -= num
    if left_sum == total_sum:
      return i
    left_sum += num
  return -1",701,Write a function to find the equilibrium index of the given array.,"['assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3', 'assert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3', 'assert equilibrium_index([1, 2, 3]) == -1']",[],"def find_equilibrium_index(arr):
    left_sum = 0
    right_sum = sum(arr)

    for i, num in enumerate(arr):
        right_sum -= num
        if left_sum == right_sum:
            return i
        left_sum += num

    return -1  # Return -1 if no equilibrium index is found",,,,,
Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.,"def find_ind(key, i, n, 
			k, arr):
	ind = -1
	start = i + 1
	end = n - 1;
	while (start < end):
		mid = int(start +
				(end - start) / 2)
		if (arr[mid] - key <= k):
			ind = mid
			start = mid + 1
		else:
			end = mid
	return ind
def removals(arr, n, k):
	ans = n - 1
	arr.sort()
	for i in range(0, n):
		j = find_ind(arr[i], i, 
					n, k, arr)
		if (j != -1):
			ans = min(ans, n -
						(j - i + 1))
	return ans",702,Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.,"['assert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5', 'assert removals([1, 5, 6, 2, 8], 5, 2) == 3', 'assert removals([1, 2, 3 ,4, 5, 6], 6, 3) == 2']",[],"def min_removals(arr, k):
    if not arr or len(arr) < 2:
        return 0

    arr.sort()
    n = len(arr)
    left = 0
    right = 0
    result = float('inf')

    while right < n:
        if arr[right] - arr[left] <= k:
            result = min(result, right - left)
            right += 1
        else:
            left += 1

    return n - result if result != float('inf') else -1",,,,,
Write a function to check whether the given key is present in the dictionary or not.,"def is_key_present(d,x):
  if x in d:
    return True
  else:
     return False",703,Write a function to check whether the given key is present in the dictionary or not.,"['assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True', 'assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True', 'assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False']",[],"def is_key_present(dictionary, key):
    return key in dictionary",,,,,
Write a function to calculate the harmonic sum of n-1.,"def harmonic_sum(n):
  if n < 2:
    return 1
  else:
    return 1 / n + (harmonic_sum(n - 1))",704,Write a function to calculate the harmonic sum of n-1.,"['assert harmonic_sum(10)==2.9289682539682538', 'assert harmonic_sum(4)==2.083333333333333', 'assert harmonic_sum(7)==2.5928571428571425 ']",[],"def harmonic_sum(n):
    sum = 0
    for i in range(1, n):
        sum += 1 / i
    return sum",,,,,
Write a function to sort a list of lists by length and value.,"def sort_sublists(list1):
      list1.sort()  
      list1.sort(key=len)
      return  list1",705,Write a function to sort a list of lists by length and value.,"['assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]', 'assert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]', 'assert sort_sublists([[""python""],[""java"",""C"",""C++""],[""DBMS""],[""SQL"",""HTML""]])==[[\'DBMS\'], [\'python\'], [\'SQL\', \'HTML\'], [\'java\', \'C\', \'C++\']]']",[],"def sort_list_of_lists(lst):
    return sorted(lst, key=lambda x: (len(x), tuple(x)))",,,,,
Write a function to find whether an array is subset of another array.,"def is_subset(arr1, m, arr2, n): 
	hashset = set() 
	for i in range(0, m): 
		hashset.add(arr1[i]) 
	for i in range(0, n): 
		if arr2[i] in hashset: 
			continue
		else: 
			return False
	return True		",706,Write a function to find whether an array is subset of another array.,"['assert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True', 'assert is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True', 'assert is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False']",[],"def is_subset(arr1, arr2):
    # Convert both arrays to sets for efficient membership testing
    set1 = set(arr1)
    set2 = set(arr2)
    
    # Check if set1 is a subset of set2
    return set1.issubset(set2)",,,,,
Write a python function to count the total set bits from 1 to n.,"def count_Set_Bits(n) :  
    n += 1; 
    powerOf2 = 2;   
    cnt = n // 2;  
    while (powerOf2 <= n) : 
        totalPairs = n // powerOf2;  
        cnt += (totalPairs // 2) * powerOf2;  
        if (totalPairs & 1) : 
            cnt += (n % powerOf2) 
        else : 
            cnt += 0
        powerOf2 <<= 1;    
    return cnt;  ",707,Write a python function to count the total set bits from 1 to n.,"['assert count_Set_Bits(16) == 33', 'assert count_Set_Bits(2) == 2', 'assert count_Set_Bits(14) == 28']",[],,,,,,
Write a python function to convert a string to a list.,"def Convert(string): 
    li = list(string.split("" "")) 
    return li ",708,Write a python function to convert a string to a list.,"[""assert Convert('python program') == ['python','program']"", ""assert Convert('Data Analysis') ==['Data','Analysis']"", ""assert Convert('Hadoop Training') == ['Hadoop','Training']""]",[],,,,,,
Write a function to count unique keys for each value present in the tuple.,"from collections import defaultdict 
def get_unique(test_list):
  res = defaultdict(list)
  for sub in test_list:
    res[sub[1]].append(sub[0])
  res = dict(res)
  res_dict = dict()
  for key in res:
    res_dict[key] = len(list(set(res[key])))
  return (str(res_dict)) ",709,Write a function to count unique keys for each value present in the tuple.,"[""assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'"", ""assert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'"", ""assert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'""]",[],"def count_unique_keys_per_value(tup):
    key_value_counts = {}
    
    for sublist in tup:
        if len(sublist) == 2:
            key, value = sublist
            if value in key_value_counts:
                key_value_counts[value].add(key)
            else:
                key_value_counts[value] = {key}
    
    return key_value_counts",,,,,
Write a function to access the initial and last data of the given tuple record.,"def front_and_rear(test_tup):
  res = (test_tup[0], test_tup[-1])
  return (res) ",710,Write a function to access the initial and last data of the given tuple record.,"['assert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)', 'assert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)', 'assert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)']",[],"def get_initial_and_last_data(record):
    if not isinstance(record, tuple) or len(record) != 2:
        raise ValueError(""Invalid record format. Expected a tuple with two elements."")
    
    initial_data, rear_data = record
    if not isinstance(initial_data, tuple) or not isinstance(rear_data, tuple):
        raise ValueError(""Invalid record format. Both elements should be tuples."")
    
    initial_value = initial_data[0]
    last_value = rear_data[-1]
    
    return initial_value, last_value",,,,,
Write a python function to check whether the product of digits of a number at even and odd places is equal or not.,"def product_Equal(n): 
    if n < 10: 
        return False
    prodOdd = 1; prodEven = 1
    while n > 0: 
        digit = n % 10
        prodOdd *= digit 
        n = n//10
        if n == 0: 
            break; 
        digit = n % 10
        prodEven *= digit 
        n = n//10
    if prodOdd == prodEven: 
        return True
    return False",711,Write a python function to check whether the product of digits of a number at even and odd places is equal or not.,"['assert product_Equal(2841) == True', 'assert product_Equal(1234) == False', 'assert product_Equal(1212) == False']",[],,,,,,
Write a function to remove duplicates from a list of lists.,"import itertools
def remove_duplicate(list1):
 list.sort(list1)
 remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))
 return remove_duplicate",712,Write a function to remove duplicates from a list of lists.,"['assert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] ', 'assert remove_duplicate([""a"", ""b"", ""a"", ""c"", ""c""] )==[""a"", ""b"", ""c""]', 'assert remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]']",[],"def remove_duplicates(lst):
    seen = set()
    result = []
    for sublist in lst:
        # Convert the sublist to a tuple to make it hashable and suitable for set operations
        sublist_tuple = tuple(sublist)
        if sublist_tuple not in seen:
            seen.add(sublist_tuple)
            result.append(list(sublist_tuple))
    return result",,,,,
Write a function to check if the given tuple contains all valid values or not.,"def check_valid(test_tup):
  res = not any(map(lambda ele: not ele, test_tup))
  return (res) ",713,Write a function to check if the given tuple contains all valid values or not.,"['assert check_valid((True, True, True, True) ) == True', 'assert check_valid((True, False, True, True) ) == False', 'assert check_valid((True, True, True, True) ) == True']",[],,,,,,
Write a python function to count the number of distinct power of prime factor of given number.,"def count_Fac(n):  
    m = n 
    count = 0
    i = 2
    while((i * i) <= m): 
        total = 0
        while (n % i == 0): 
            n /= i 
            total += 1 
        temp = 0
        j = 1
        while((temp + j) <= total): 
            temp += j 
            count += 1
            j += 1 
        i += 1
    if (n != 1): 
        count += 1 
    return count ",714,Write a python function to count the number of distinct power of prime factor of given number.,"['assert count_Fac(24) == 3', 'assert count_Fac(12) == 2', 'assert count_Fac(4) == 1']",[],,,,,,
Write a function to convert the given string of integers into a tuple.,"def str_to_tuple(test_str):
  res = tuple(map(int, test_str.split(', ')))
  return (res) ",715,Write a function to convert the given string of integers into a tuple.,"['assert str_to_tuple(""1, -5, 4, 6, 7"") == (1, -5, 4, 6, 7)', 'assert str_to_tuple(""1, 2, 3, 4, 5"") == (1, 2, 3, 4, 5)', 'assert str_to_tuple(""4, 6, 9, 11, 13, 14"") == (4, 6, 9, 11, 13, 14)']",[],,,,,,
Write a function to find the perimeter of a rombus.,"def rombus_perimeter(a):
  perimeter=4*a
  return perimeter",716,Write a function to find the perimeter of a rombus.,"['assert rombus_perimeter(10)==40', 'assert rombus_perimeter(5)==20', 'assert rombus_perimeter(4)==16']",[],"def rhombus_perimeter(side_length):
    """"""
    Calculate the perimeter of a rhombus given its side length.
    
    :param side_length: The length of one side of the rhombus.
    :return: The perimeter of the rhombus.
    """"""
    return 4 * side_length",,,,,
Write a function to calculate the standard deviation.,"import math
import sys
def sd_calc(data):
    n = len(data)
    if n <= 1:
        return 0.0
    mean, sd = avg_calc(data), 0.0
    for el in data:
        sd += (float(el) - mean)**2
    sd = math.sqrt(sd / float(n-1))
    return sd
def avg_calc(ls):
    n, mean = len(ls), 0.0
    if n <= 1:
        return ls[0]
    for el in ls:
        mean = mean + float(el)
    mean = mean / float(n)
    return mean",717,Write a function to calculate the standard deviation.,"['assert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979', 'assert sd_calc([1,2,3,4,5,6,7])==2.160246899469287', 'assert sd_calc([5,9,10,15,6,4])==4.070217029430577']",[],"import math

def calculate_standard_deviation(data):
    n = len(data)
    if n == 0:
        return 0

    mean = sum(data) / n
    variance = sum((x - mean) ** 2 for x in data) / n
    standard_deviation = math.sqrt(variance)

    return standard_deviation",,,,,
Write a function to create a list taking alternate elements from another given list.,"def alternate_elements(list1):
    result=[]
    for item in list1[::2]:
        result.append(item)
    return result ",718,Write a function to create a list taking alternate elements from another given list.,"['assert alternate_elements([""red"", ""black"", ""white"", ""green"", ""orange""])==[\'red\', \'white\', \'orange\']', 'assert alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]', 'assert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]']",[],"def alternate_elements(lst):
    return lst[::2]",,,,,
Write a function that matches a string that has an a followed by zero or more b's.,"import re
def text_match(text):
        patterns = 'ab*?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')",719,Write a function that matches a string that has an a followed by zero or more b's.,"['assert text_match(""ac"")==(\'Found a match!\')', 'assert text_match(""dc"")==(\'Not matched!\')', 'assert text_match(""abba"")==(\'Found a match!\')']",[],"import re

def match_ab_string(string):
    pattern = re.compile(r'^a(b*)$')
    match = pattern.match(string)
    return bool(match)
print(match_ab_string(""a""))       # True
print(match_ab_string(""ab""))      # True
print(match_ab_string(""abb""))     # True
print(match_ab_string(""abbb""))    # True
print(match_ab_string(""b""))       # False
print(match_ab_string(""aba""))     # False
print(match_ab_string(""aab""))     # False",,,,,
Write a function to add a dictionary to the tuple.,"def add_dict_to_tuple(test_tup, test_dict):
  test_tup = list(test_tup)
  test_tup.append(test_dict)
  test_tup = tuple(test_tup)
  return (test_tup) ",720,Write a function to add a dictionary to the tuple.,"['assert add_dict_to_tuple((4, 5, 6), {""MSAM"" : 1, ""is"" : 2, ""best"" : 3} ) == (4, 5, 6, {\'MSAM\': 1, \'is\': 2, \'best\': 3})', 'assert add_dict_to_tuple((1, 2, 3), {""UTS"" : 2, ""is"" : 3, ""Worst"" : 4} ) == (1, 2, 3, {\'UTS\': 2, \'is\': 3, \'Worst\': 4})', 'assert add_dict_to_tuple((8, 9, 10), {""POS"" : 3, ""is"" : 4, ""Okay"" : 5} ) == (8, 9, 10, {\'POS\': 3, \'is\': 4, \'Okay\': 5})']",[],"def add_dict_to_tuple(tuple_val, dict_val):
    return tuple_val + (dict_val,)",,,,,
Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.,"M = 100
def maxAverageOfPath(cost, N): 
	dp = [[0 for i in range(N + 1)] for j in range(N + 1)] 
	dp[0][0] = cost[0][0] 
	for i in range(1, N): 
		dp[i][0] = dp[i - 1][0] + cost[i][0] 
	for j in range(1, N): 
		dp[0][j] = dp[0][j - 1] + cost[0][j] 
	for i in range(1, N): 
		for j in range(1, N): 
			dp[i][j] = max(dp[i - 1][j], 
						dp[i][j - 1]) + cost[i][j] 
	return dp[N - 1][N - 1] / (2 * N - 1)",721,Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.,"['assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2', 'assert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2', 'assert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 ']",[],"import itertools

def find_max_average_path(matrix):
    n = len(matrix)
    max_average = float('-inf')
    max_path = []

    # Generate all possible paths from the first row to the last row
    paths = []
    for row in range(n):
        if row == 0:
            paths.append([0])
        else:
            new_paths = []
            for path in paths:
                if path[-1] + 1 < n:
                    new_paths.append(path + [path[-1] + 1])
                if path[-1] - 1 >= 0:
                    new_paths.append(path + [path[-1] - 1])
            paths = new_paths

    # Calculate the average for each path and find the maximum average
    for path in paths:
        path_sum = sum(matrix[row][path[row]] for row in range(n))
        path_average = path_sum / n
        if path_average > max_average:
            max_average = path_average
            max_path = path

    return max_path, max_average

# Example usage
matrix1 = [
    [1, 2, 3],
    [6, 5, 4],
    [7, 3, 9]
]
path1, average1 = find_max_average_path(matrix1)
print(""Path:"", path1, ""Average:"", average1)

matrix2 = [
    [2, 3, 4],
    [7, 6, 5],
    [8, 4, 10]
]
path2, average2 = find_max_average_path(matrix2)
print(""Path:"", path2, ""Average:"", average2)

matrix3 = [
    [3, 4, 5],
    [8, 7, 6],
    [9, 5, 11]
]
path3, average3 = find_max_average_path(matrix3)
print(""Path:"", path3, ""Average:"", average3)",,,,,
Write a function to filter the height and width of students which are stored in a dictionary.,"def filter_data(students,h,w):
    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}
    return result    ",722,Write a function to filter the height and width of students which are stored in a dictionary.,"[""assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}"", ""assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}"", ""assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}""]",[],"def filter_students(student_data, min_height, min_width):
    filtered_students = {}
    for name, (height, width) in student_data.items():
        if height >= min_height and width >= min_width:
            filtered_students[name] = (height, width)
    return filtered_students
student_data = {
    'Cierra Vega': (6.2, 70),
    'Alden Cantrell': (5.9, 65),
    'Kierra Gentry': (6.0, 68),
    'Pierre Cox': (5.8, 66)
}

filtered_data_1 = filter_students(student_data, 6.0, 70)
assert filtered_data_1 == {'Cierra Vega': (6.2, 70)}

filtered_data_2 = filter_students(student_data, 5.9, 67)
assert filtered_data_2 == {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68)}

filtered_data_3 = filter_students(student_data, 5.7, 64)
assert filtered_data_3 == {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}",,,,,
Write a function to count the same pair in two given lists using map function.,"from operator import eq
def count_same_pair(nums1, nums2):
    result = sum(map(eq, nums1, nums2))
    return result",723,Write a function to count the same pair in two given lists using map function.,"['assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4', 'assert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11', 'assert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1']",[],"def count_same_pair(list1, list2):
    pairs1 = list(map(tuple, zip(list1, list1[1:])))
    pairs2 = list(map(tuple, zip(list2, list2[1:])))
    common_pairs = set(pairs1) & set(pairs2)
    return len(common_pairs)",,,,,
Write a function to calculate the sum of all digits of the base to the specified power.,"def power_base_sum(base, power):
    return sum([int(i) for i in str(pow(base, power))])",724,Write a function to calculate the sum of all digits of the base to the specified power.,"['assert power_base_sum(2,100)==115', 'assert power_base_sum(8,10)==37', 'assert power_base_sum(8,15)==62']",[],"def power_base_sum(base, power):
    result = base ** power
    digit_sum = sum(int(digit) for digit in str(result))
    return digit_sum",,,,,
Write a function to extract values between quotation marks of the given string by using regex.,"import re
def extract_quotation(text1):
  return (re.findall(r'""(.*?)""', text1))",725,Write a function to extract values between quotation marks of the given string by using regex.,"['assert extract_quotation(\'Cortex ""A53"" Based ""multi"" tasking ""Processor""\') == [\'A53\', \'multi\', \'Processor\']', 'assert extract_quotation(\'Cast your ""favorite"" entertainment ""apps""\') == [\'favorite\', \'apps\']', 'assert extract_quotation(\'Watch content ""4k Ultra HD"" resolution with ""HDR 10"" Support\') == [\'4k Ultra HD\', \'HDR 10\']']",[],"import re

def extract_quoted_values(s):
    pattern = r'""([^""]*)""'  # Regular expression pattern to match quoted values
    matches = re.findall(pattern, s)
    return matches",,,,,
Write a function to multiply the adjacent elements of the given tuple.,"def multiply_elements(test_tup):
  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ",726,Write a function to multiply the adjacent elements of the given tuple.,"['assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)', 'assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)', 'assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)']",[],"def multiply_adjacent_elements(tup):
    result = []
    for i in range(len(tup) - 1):
        result.append(tup[i] * tup[i + 1])
    return tuple(result)",,,,,
Write a function to remove all characters except letters and numbers using regex,"import re 
def remove_char(S):
  result = re.sub('[\W_]+', '', S) 
  return result",727,Write a function to remove all characters except letters and numbers using regex,"['assert remove_char(""123abcjw:, .@! eiw"") == \'123abcjweiw\'', 'assert remove_char(""Hello1234:, ! Howare33u"") == \'Hello1234Howare33u\'', 'assert remove_char(""Cool543Triks@:, Make@987Trips"") == \'Cool543TriksMake987Trips\' ']",[],"import re

def remove_non_alphanumeric(text):
    pattern = r'[^a-zA-Z0-9]'
    cleaned_text = re.sub(pattern, '', text)
    return cleaned_text",,,,,
Write a function to sum elements in two lists.,"def sum_list(lst1,lst2):
  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] 
  return res_list",728,Write a function to sum elements in two lists.,"['assert sum_list([10,20,30],[15,25,35])==[25,45,65]', 'assert sum_list([1,2,3],[5,6,7])==[6,8,10]', 'assert sum_list([15,20,30],[15,45,75])==[30,65,105]']",[],"def sum_lists(list1, list2):
    return [a + b for a, b in zip(list1, list2)]",,,,,
Write a function to add two lists using map and lambda function.,"def add_list(nums1,nums2):
  result = map(lambda x, y: x + y, nums1, nums2)
  return list(result)",729,Write a function to add two lists using map and lambda function.,"['assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]', 'assert add_list([1,2],[3,4])==[4,6]', 'assert add_list([10,20],[50,70])==[60,90]']",[],"def add_lists(list1, list2):
    return list(map(lambda x, y: x + y, list1, list2))",,,,,
Write a function to remove consecutive duplicates of a given list.,"from itertools import groupby
def consecutive_duplicates(nums):
    return [key for key, group in groupby(nums)] ",730,Write a function to remove consecutive duplicates of a given list.,"['assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]', 'assert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]', ""assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']""]",[],"def remove_consecutive_duplicates(lst):
    if not lst:
        return []

    result = [lst[0]]
    for i in range(1, len(lst)):
        if lst[i] != lst[i-1]:
            result.append(lst[i])

    return result",,,,,
Write a function to find the lateral surface area of a cone.,"import math
def lateralsurface_cone(r,h):
  l = math.sqrt(r * r + h * h)
  LSA = math.pi * r  * l
  return LSA",731,Write a function to find the lateral surface area of a cone.,"['assert lateralsurface_cone(5,12)==204.20352248333654', 'assert lateralsurface_cone(10,15)==566.3586699569488', 'assert lateralsurface_cone(19,17)==1521.8090132193388']",[],"import math

def lateral_surface_area_cone(radius, slant_height):
    """"""
    Calculate the lateral surface area of a cone.
    
    :param radius: The radius of the cone's base.
    :param slant_height: The slant height of the cone.
    :return: The lateral surface area of the cone.
    """"""
    return math.pi * radius * slant_height",,,,,
"Write a function to replace all occurrences of spaces, commas, or dots with a colon.","import re
def replace_specialchar(text):
 return (re.sub(""[ ,.]"", "":"", text))",732,"Write a function to replace all occurrences of spaces, commas, or dots with a colon.","[""assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')"", ""assert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')"", ""assert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')""]",[],"def replace_chars_with_colon(input_string):
    return input_string.replace("" "", "":"").replace("","", "":"").replace(""."", "":"")",,,,,
Write a function to find the index of the first occurrence of a given number in a sorted array.,"def find_first_occurrence(A, x):
    (left, right) = (0, len(A) - 1)
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if x == A[mid]:
            result = mid
            right = mid - 1
        elif x < A[mid]:
            right = mid - 1
        else:
            left = mid + 1
    return result",733,Write a function to find the index of the first occurrence of a given number in a sorted array.,"['assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1', 'assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2', 'assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4']",[],,,,,,
Write a python function to find sum of products of all possible subarrays.,"def sum_Of_Subarray_Prod(arr,n):
    ans = 0
    res = 0
    i = n - 1
    while (i >= 0):
        incr = arr[i]*(1 + res)
        ans += incr
        res = incr
        i -= 1
    return (ans)",734,Write a python function to find sum of products of all possible subarrays.,"['assert sum_Of_Subarray_Prod([1,2,3],3) == 20', 'assert sum_Of_Subarray_Prod([1,2],2) == 5', 'assert sum_Of_Subarray_Prod([1,2,3,4],4) == 84']",[],"def sum_of_subarray_products(arr, k):
    n = len(arr)
    prefix_product = [1] * (n + 1)
    suffix_product = [1] * (n + 1)
    total_sum = 0

    # Calculate prefix product array
    for i in range(1, n + 1):
        prefix_product[i] = prefix_product[i - 1] * arr[i - 1]

    # Calculate suffix product array
    for i in range(n - 1, -1, -1):
        suffix_product[i] = suffix_product[i + 1] * arr[i]

    # Calculate sum of products of all subarrays
    for i in range(n):
        for j in range(i + 1, n + 1):
            total_sum += prefix_product[i] * suffix_product[j]

    # Multiply the result by the given factor k
    total_sum *= k

    return total_sum",,,,,
Write a python function to toggle bits of the number except the first and the last bit.,"def set_middle_bits(n):  
    n |= n >> 1; 
    n |= n >> 2; 
    n |= n >> 4; 
    n |= n >> 8; 
    n |= n >> 16;  
    return (n >> 1) ^ 1
def toggle_middle_bits(n): 
    if (n == 1): 
        return 1
    return n ^ set_middle_bits(n) ",735,Write a python function to toggle bits of the number except the first and the last bit.,"['assert toggle_middle_bits(9) == 15', 'assert toggle_middle_bits(10) == 12', 'assert toggle_middle_bits(11) == 13']",[],"def toggle_bits(n):
    # Convert the number to binary string representation
    binary_str = bin(n)[2:]
    
    # Find the length of the binary string
    length = len(binary_str)
    
    # Toggle the bits except the first and the last bit
    toggled_bits = binary_str[0] + ''.join('1' if bit == '0' else '0' for bit in binary_str[1:-1]) + binary_str[-1]
    
    # Convert the toggled bits back to an integer
    toggled_num = int(toggled_bits, 2)
    
    return toggled_num",,,,,
Write a function to locate the left insertion point for a specified value in sorted order.,"import bisect
def left_insertion(a, x):
    i = bisect.bisect_left(a, x)
    return i",736,Write a function to locate the left insertion point for a specified value in sorted order.,"['assert left_insertion([1,2,4,5],6)==4', 'assert left_insertion([1,2,4,5],3)==2', 'assert left_insertion([1,2,4,5],7)==4']",[],,,,,,
Write a function to check whether the given string is starting with a vowel or not using regex.,"import re 
regex = '^[aeiouAEIOU][A-Za-z0-9_]*'
def check_str(string): 
	if(re.search(regex, string)): 
		return (""Valid"") 
	else: 
		return (""Invalid"") ",737,Write a function to check whether the given string is starting with a vowel or not using regex.,"['assert check_str(""annie"") == \'Valid\'', 'assert check_str(""dawood"") == \'Invalid\'', 'assert check_str(""Else"") == \'Valid\'']",[],,,,,,
Write a function to calculate the geometric sum of n-1.,"def geometric_sum(n):
  if n < 0:
    return 0
  else:
    return 1 / (pow(2, n)) + geometric_sum(n - 1)",738,Write a function to calculate the geometric sum of n-1.,"['assert geometric_sum(7) == 1.9921875', 'assert geometric_sum(4) == 1.9375', 'assert geometric_sum(8) == 1.99609375']",[],"def geometric_sum(n, r):
    """"""
    Calculate the geometric sum of n-1 terms with a common ratio r.
    
    Parameters:
    n (int): Number of terms (excluding the first term)
    r (float): Common ratio
    
    Returns:
    float: Geometric sum of n-1 terms
    """"""
    if n <= 0:
        return 0
    elif r == 1:
        return n
    else:
        return (1 - r**n) / (1 - r)",,,,,
Write a python function to find the index of smallest triangular number with n digits.,"import math 
def find_Index(n): 
    x = math.sqrt(2 * math.pow(10,(n - 1))); 
    return round(x); ",739,Write a python function to find the index of smallest triangular number with n digits.,"['assert find_Index(2) == 4', 'assert find_Index(3) == 14', 'assert find_Index(4) == 45']",[],,,,,,
Write a function to convert the given tuple to a key-value dictionary using adjacent elements.,"def tuple_to_dict(test_tup):
  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))
  return (res) ",740,Write a function to convert the given tuple to a key-value dictionary using adjacent elements.,"['assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}', 'assert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}', 'assert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}']",[],"def tuple_to_dict(tup):
    if len(tup) % 2 != 0:
        raise ValueError(""Tuple length must be even to form key-value pairs."")

    dictionary = {}
    for i in range(0, len(tup), 2):
        key = tup[i]
        value = tup[i + 1]
        dictionary[key] = value

    return dictionary",,,,,
Write a python function to check whether all the characters are same or not.,"def all_Characters_Same(s) :
    n = len(s)
    for i in range(1,n) :
        if s[i] != s[0] :
            return False
    return True",741,Write a python function to check whether all the characters are same or not.,"['assert all_Characters_Same(""python"") == False', 'assert all_Characters_Same(""aaa"") == True', 'assert all_Characters_Same(""data"") == False']",[],,,,,,
Write a function to caluclate the area of a tetrahedron.,"import math
def area_tetrahedron(side):
  area = math.sqrt(3)*(side*side)
  return area",742,Write a function to caluclate the area of a tetrahedron.,"['assert area_tetrahedron(3)==15.588457268119894', 'assert area_tetrahedron(20)==692.8203230275509', 'assert area_tetrahedron(10)==173.20508075688772']",[],"import math

def calculate_tetrahedron_area(side_length):
    """"""
    Calculate the area of a tetrahedron given its side length.
    
    :param side_length: The length of each side of the tetrahedron.
    :return: The area of the tetrahedron.
    """"""
    # Calculate the height of the tetrahedron using Pythagorean theorem
    height = math.sqrt((side_length**2) / (math.sqrt(2))
    
    # Calculate the base area of the tetrahedron (which is an equilateral triangle)
    base_area = (math.sqrt(3) / 4) * (side_length**2)
    
    # Calculate the area of the tetrahedron by multiplying the base area by the height
    area = (4 * base_area) / 3
    
    return area",,,,,
Write a function to rotate a given list by specified number of items to the right direction.,"def rotate_right(list1,m,n):
  result =  list1[-(m):]+list1[:-(n)]
  return result",743,Write a function to rotate a given list by specified number of items to the right direction.,"['assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]', 'assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]', 'assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]']",[],"def rotate_list_right(lst, num_rotations):
    """"""
    Rotate the given list to the right by the specified number of rotations.

    :param lst: The list to be rotated.
    :param num_rotations: The number of rotations to apply.
    :return: The rotated list.
    """"""
    # Calculate the effective number of rotations, considering the length of the list
    num_rotations %= len(lst)

    # If the number of rotations is zero or the list is empty, return the original list
    if num_rotations == 0 or not lst:
        return lst

    # Rotate the list by slicing and concatenating
    rotated_lst = lst[-num_rotations:] + lst[:-num_rotations]
    return rotated_lst",,,,,
Write a function to check if the given tuple has any none value or not.,"def check_none(test_tup):
  res = any(map(lambda ele: ele is None, test_tup))
  return (res) ",744,Write a function to check if the given tuple has any none value or not.,"['assert check_none((10, 4, 5, 6, None)) == True', 'assert check_none((7, 8, 9, 11, 14)) == False', 'assert check_none((1, 2, 3, 4, None)) == True']",[],"def check_none_in_tuple(tup):
    return any(value is None for value in tup)",,,,,
Write a function to find numbers within a given range where every number is divisible by every digit it contains.,"def divisible_by_digits(startnum, endnum):
    return [n for n in range(startnum, endnum+1) \
                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]",745,Write a function to find numbers within a given range where every number is divisible by every digit it contains.,"['assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]', 'assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]', 'assert divisible_by_digits(20,25)==[22, 24]']",[],"def find_divisible_numbers(start, end):
    def is_divisible_by_digits(num):
        digits = set(str(num))
        for digit in digits:
            if num % int(digit) != 0:
                return False
        return True

    divisible_numbers = []
    for num in range(start, end + 1):
        if is_divisible_by_digits(num):
            divisible_numbers.append(num)

    return divisible_numbers",,,,,
Write a function to find area of a sector.,"def sector_area(r,a):
    pi=22/7
    if a >= 360:
        return None
    sectorarea = (pi*r**2) * (a/360)
    return sectorarea",746,Write a function to find area of a sector.,"['assert sector_area(4,45)==6.285714285714286', 'assert sector_area(9,45)==31.82142857142857', 'assert sector_area(9,360)==None']",[],"import math

def sector_area(radius, angle):
    """"""
    Calculate the area of a sector given its radius and central angle in degrees.
    
    :param radius: The radius of the circle.
    :param angle: The central angle of the sector in degrees.
    :return: The area of the sector.
    """"""
    if not isinstance(radius, (int, float)) or not isinstance(angle, (int, float)):
        raise ValueError(""Radius and angle must be numeric values."")
    
    if radius <= 0:
        raise ValueError(""Radius must be a positive value."")
    
    if angle < 0 or angle > 360:
        raise ValueError(""Angle must be a value between 0 and 360 degrees."")
    
    # Convert the angle to radians
    angle_radians = math.radians(angle)
    
    # Calculate the area of the sector
    area = 0.5 * radius ** 2 * angle_radians
    
    return area",,,,,
Write a function to find the longest common subsequence for the given three string sequence.,"def lcs_of_three(X, Y, Z, m, n, o): 
	L = [[[0 for i in range(o+1)] for j in range(n+1)] 
		for k in range(m+1)] 
	for i in range(m+1): 
		for j in range(n+1): 
			for k in range(o+1): 
				if (i == 0 or j == 0 or k == 0): 
					L[i][j][k] = 0
				elif (X[i-1] == Y[j-1] and
					X[i-1] == Z[k-1]): 
					L[i][j][k] = L[i-1][j-1][k-1] + 1
				else: 
					L[i][j][k] = max(max(L[i-1][j][k], 
					L[i][j-1][k]), 
									L[i][j][k-1]) 
	return L[m][n][o]",747,Write a function to find the longest common subsequence for the given three string sequence.,"[""assert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2"", ""assert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 "", ""assert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3""]",[],"def longest_common_subsequence(seq1, seq2, seq3):
    len1, len2, len3 = len(seq1), len(seq2), len(seq3)
    
    # Initialize a 3D matrix to store the lengths of longest common subsequences
    dp = [[[0] * (len3 + 1) for _ in range(len2 + 1)] for _ in range(len1 + 1)]
    
    # Fill the matrix using dynamic programming
    for i in range(1, len1 + 1):
        for j in range(1, len2 + 1):
            for k in range(1, len3 + 1):
                if seq1[i - 1] == seq2[j - 1] == seq3[k - 1]:
                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1
                else:
                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])
    
    # Backtrack to construct the longest common subsequence
    lcs = []
    i, j, k = len1, len2, len3
    while i > 0 and j > 0 and k > 0:
        if seq1[i - 1] == seq2[j - 1] == seq3[k - 1]:
            lcs.append(seq1[i - 1])
            i -= 1
            j -= 1
            k -= 1
        elif dp[i - 1][j][k] > dp[i][j - 1][k] and dp[i - 1][j][k] > dp[i][j][k - 1]:
            i -= 1
        elif dp[i][j - 1][k] > dp[i - 1][j][k] and dp[i][j - 1][k] > dp[i][j][k - 1]:
            j -= 1
        else:
            k -= 1
    
    # Reverse the list to get the correct order of the subsequence
    lcs.reverse()
    
    return ''.join(lcs)",,,,,
Write a function to put spaces between words starting with capital letters in a given string by using regex.,"import re
def capital_words_spaces(str1):
  return re.sub(r""(\w)([A-Z])"", r""\1 \2"", str1)",748,Write a function to put spaces between words starting with capital letters in a given string by using regex.,"['assert capital_words_spaces(""Python"") == \'Python\'', 'assert capital_words_spaces(""PythonProgrammingExamples"") == \'Python Programming Examples\'', 'assert capital_words_spaces(""GetReadyToBeCodingFreak"") == \'Get Ready To Be Coding Freak\'']",[],,,,,,
Write a function to sort a given list of strings of numbers numerically.,"def sort_numeric_strings(nums_str):
    result = [int(x) for x in nums_str]
    result.sort()
    return result",749,Write a function to sort a given list of strings of numbers numerically.,"[""assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]"", ""assert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]"", ""assert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]""]",[],"def sort_numeric_strings(strings):
    return sorted(strings, key=lambda x: int(x) if x.isdigit() else float(x))",,,,,
Write a function to add the given tuple to the given list.,"def add_tuple(test_list, test_tup):
  test_list += test_tup
  return (test_list) ",750,Write a function to add the given tuple to the given list.,"['assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]', 'assert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]', 'assert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]']",[],"def add_tuple_to_list(lst, tpl):
    lst.extend(tpl)
    return lst",,,,,
Write a function to check if the given array represents min heap or not.,"def check_min_heap(arr, i):
    if 2 * i + 2 > len(arr):
        return True
    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)
    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] 
                                      and check_min_heap(arr, 2 * i + 2))
    return left_child and right_child",751,Write a function to check if the given array represents min heap or not.,"['assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True', 'assert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True', 'assert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False']",[],"def is_min_heap(arr):
    def is_min_heap_recursive(arr, index, heap_size):
        if index >= heap_size:
            return True

        left_child_index = 2 * index + 1
        right_child_index = 2 * index + 2

        # Check if the current node is less than or equal to its children
        if (left_child_index < heap_size and arr[index] > arr[left_child_index]) or \
                (right_child_index < heap_size and arr[index] > arr[right_child_index]):
            return False

        # Recursively check the left and right subtrees
        return is_min_heap_recursive(arr, left_child_index, heap_size) and \
               is_min_heap_recursive(arr, right_child_index, heap_size)

    # Check if the array is empty or has only one element
    if len(arr) == 0 or len(arr) == 1:
        return True

    # Get the number of elements in the heap (excluding the sentinel value)
    heap_size = len(arr) - 1

    # Recursively check the min heap property from the root node
    return is_min_heap_recursive(arr, 0, heap_size)",,,,,
Write a function to find the nth jacobsthal number.,"def jacobsthal_num(n): 
	dp = [0] * (n + 1) 
	dp[0] = 0
	dp[1] = 1
	for i in range(2, n+1): 
		dp[i] = dp[i - 1] + 2 * dp[i - 2] 
	return dp[n]",752,Write a function to find the nth jacobsthal number.,"['assert jacobsthal_num(5) == 11', 'assert jacobsthal_num(2) == 1', 'assert jacobsthal_num(4) == 5']",[],"def jacobsthal(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        a, b = 0, 1
        for _ in range(2, n + 1):
            a, b = b, a + b
        return b",,,,,
Write a function to find minimum k records from tuple list.,"def min_k(test_list, K):
  res = sorted(test_list, key = lambda x: x[1])[:K]
  return (res) ",753,Write a function to find minimum k records from tuple list.,"[""assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]"", ""assert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]"", ""assert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]""]",[],"def find_min_k_records(records, k):
    # Sort the records based on the second element in ascending order
    sorted_records = sorted(records, key=lambda x: x[1])
    
    # Return the first k records from the sorted list
    return sorted_records[:k]",,,,,
Write a function to find common index elements from three lists.,"def extract_index_list(l1, l2, l3):
    result = []
    for m, n, o in zip(l1, l2, l3):
        if (m == n == o):
            result.append(m)
    return result",754,Write a function to find common index elements from three lists.,"['assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]', 'assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]', 'assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]']",[],"def find_common_index_elements(list1, list2, list3):
    # Find the set of unique indices in each list
    indices1 = set(range(len(list1)))
    indices2 = set(range(len(list2)))
    indices3 = set(range(len(list3)))

    # Find the intersection of all three index sets
    common_indices = indices1 & indices2 & indices3

    # Get the elements from list1 that correspond to the common indices
    common_elements = [list1[index] for index in common_indices]

    return common_elements",,,,,
Write a function to find the second smallest number in a list.,"def second_smallest(numbers):
  if (len(numbers)<2):
    return
  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):
    return
  dup_items = set()
  uniq_items = []
  for x in numbers:
    if x not in dup_items:
      uniq_items.append(x)
      dup_items.add(x)
  uniq_items.sort()    
  return  uniq_items[1] ",755,Write a function to find the second smallest number in a list.,"['assert second_smallest([1, 2, -8, -2, 0, -2])==-2', 'assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5', 'assert second_smallest([2,2])==None']",[],"def find_second_smallest(numbers):
    if len(numbers) < 2:
        return None  # Return None if the list has fewer than 2 elements
    
    smallest = float('inf')
    second_smallest = float('inf')
    
    for num in numbers:
        if num < smallest:
            second_smallest = smallest
            smallest = num
        elif smallest < num < second_smallest:
            second_smallest = num
    
    if second_smallest == float('inf'):
        return None  # Return None if there is no second smallest number
    
    return second_smallest",,,,,
Write a function that matches a string that has an a followed by zero or one 'b'.,"import re
def text_match_zero_one(text):
        patterns = 'ab?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')",756,Write a function that matches a string that has an a followed by zero or one 'b'.,"['assert text_match_zero_one(""ac"")==(\'Found a match!\')', 'assert text_match_zero_one(""dc"")==(\'Not matched!\')', 'assert text_match_zero_one(""abbbba"")==(\'Found a match!\')']",[],"import re

def match_string(string):
    pattern = r'ab?$'
    if re.match(pattern, string):
        return True
    else:
        return False",,,,,
Write a function to count the pairs of reverse strings in the given string list.,"def count_reverse_pairs(test_list):
  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( 
	test_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) 
  return str(res)",757,Write a function to count the pairs of reverse strings in the given string list.,"['assert count_reverse_pairs([""julia"", ""best"", ""tseb"", ""for"", ""ailuj""])== \'2\'', 'assert count_reverse_pairs([""geeks"", ""best"", ""for"", ""skeeg""]) == \'1\'', 'assert count_reverse_pairs([""makes"", ""best"", ""sekam"", ""for"", ""rof""]) == \'2\' ']",[],"def count_reverse_pairs(string_list):
    count = 0
    string_set = set(string_list)
    
    for string in string_set:
        reversed_string = string[::-1]
        if reversed_string in string_set and string != reversed_string:
            count += 1
    
    return count",,,,,
Write a function to count number of unique lists within a list.,"def unique_sublists(list1):
    result ={}
    for l in  list1: 
        result.setdefault(tuple(l), list()).append(1) 
    for a, b in result.items(): 
        result[a] = sum(b)
    return result",758,Write a function to count number of unique lists within a list.,"['assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}', ""assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}"", 'assert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}']",[],"def count_unique_lists(lst):
    unique_lists = set(tuple(sublist) for sublist in lst if isinstance(sublist, list))
    return len(unique_lists)",,,,,
Write a function to check a decimal with a precision of 2.,"def is_decimal(num):
    import re
    dnumre = re.compile(r""""""^[0-9]+(\.[0-9]{1,2})?$"""""")
    result = dnumre.search(num)
    return bool(result)",759,Write a function to check a decimal with a precision of 2.,"[""assert is_decimal('123.11')==True"", ""assert is_decimal('e666.86')==False"", ""assert is_decimal('3.124587')==False""]",[],,,,,,
Write a python function to check whether an array contains only one distinct element or not.,"def unique_Element(arr,n):
    s = set(arr)
    if (len(s) == 1):
        return ('YES')
    else:
        return ('NO')",760,Write a python function to check whether an array contains only one distinct element or not.,"[""assert unique_Element([1,1,1],3) == 'YES'"", ""assert unique_Element([1,2,1,2],4) == 'NO'"", ""assert unique_Element([1,2,3,4,5],5) == 'NO'""]",[],,,,,,
Write a function to caluclate arc length of an angle.,"def arc_length(d,a):
    pi=22/7
    if a >= 360:
        return None
    arclength = (pi*d) * (a/360)
    return arclength",761,Write a function to caluclate arc length of an angle.,"['assert arc_length(9,45)==3.5357142857142856', 'assert arc_length(9,480)==None', 'assert arc_length(5,270)==11.785714285714285']",[],"import math

def calculate_arc_length(radius, angle_in_degrees):
    # Convert angle from degrees to radians
    angle_in_radians = math.radians(angle_in_degrees)
    
    # Calculate the arc length using the formula: arc length = radius * angle (in radians)
    arc_length = radius * angle_in_radians
    
    return arc_length",,,,,
Write a function to check whether the given month number contains 30 days or not.,"def check_monthnumber_number(monthnum3):
  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):
    return True
  else:
    return False",762,Write a function to check whether the given month number contains 30 days or not.,"['assert check_monthnumber_number(6)==True', 'assert check_monthnumber_number(2)==False', 'assert check_monthnumber_number(12)==False']",[],"def has_30_days(month_number):
    """"""
    Check if the given month number contains 30 days.
    
    :param month_number: The month number to check (1-12)
    :return: True if the month has 30 days, False otherwise
    """"""
    months_with_30_days = [4, 6, 9, 11]
    return month_number in months_with_30_days",,,,,
Write a python function to find the minimum difference between any two elements in a given array.,"def find_Min_Diff(arr,n): 
    arr = sorted(arr) 
    diff = 10**20 
    for i in range(n-1): 
        if arr[i+1] - arr[i] < diff: 
            diff = arr[i+1] - arr[i]  
    return diff ",763,Write a python function to find the minimum difference between any two elements in a given array.,"['assert find_Min_Diff((1,5,3,19,18,25),6) == 1', 'assert find_Min_Diff((4,3,2,6),4) == 1', 'assert find_Min_Diff((30,5,20,9),4) == 4']",[],"def find_min_difference(arr):
    if len(arr) < 2:
        return None  # Cannot find a difference with less than 2 elements

    arr.sort()  # Sort the array in ascending order
    min_diff = float('inf')  # Initialize minimum difference to positive infinity

    for i in range(1, len(arr)):
        diff = arr[i] - arr[i - 1]  # Calculate difference between adjacent elements
        min_diff = min(min_diff, diff)  # Update minimum difference if necessary

    return min_diff",,,,,
Write a python function to count numeric values in a given string.,"def number_ctr(str):
      number_ctr= 0
      for i in range(len(str)):
          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     
      return  number_ctr",764,Write a python function to count numeric values in a given string.,"[""assert number_ctr('program2bedone') == 1"", ""assert number_ctr('3wonders') ==1"", ""assert number_ctr('123') == 3""]",[],"def count_numeric_values(string):
    count = 0
    for char in string:
        if char.isdigit():
            count += 1
    return count",,,,,
Write a function to find nth polite number.,"import math 
def is_polite(n): 
	n = n + 1
	return (int)(n+(math.log((n + math.log(n, 2)), 2))) ",765,Write a function to find nth polite number.,"['assert is_polite(7) == 11', 'assert is_polite(4) == 7', 'assert is_polite(9) == 13']",[],,,,,,
Write a function to iterate over all pairs of consecutive items in a given list.,"def pair_wise(l1):
    temp = []
    for i in range(len(l1) - 1):
        current_element, next_element = l1[i], l1[i + 1]
        x = (current_element, next_element)
        temp.append(x)
    return temp",766,Write a function to iterate over all pairs of consecutive items in a given list.,"['assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]', 'assert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]', 'assert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]']",[],"def consecutive_pairs(lst):
    pairs = []
    for i in range(len(lst) - 1):
        pair = (lst[i], lst[i + 1])
        pairs.append(pair)
    return pairs",,,,,
Write a python function to count the number of pairs whose sum is equal to ‘sum’.,"def get_Pairs_Count(arr,n,sum):
    count = 0  
    for i in range(0,n):
        for j in range(i + 1,n):
            if arr[i] + arr[j] == sum:
                count += 1
    return count",767,Write a python function to count the number of pairs whose sum is equal to ‘sum’.,"['assert get_Pairs_Count([1,1,1,1],4,2) == 6', 'assert get_Pairs_Count([1,5,7,-1,5],5,6) == 3', 'assert get_Pairs_Count([1,-2,3],3,1) == 1']",[],,,,,,
Write a python function to check for odd parity of a given number.,"def check_Odd_Parity(x): 
    parity = 0
    while (x != 0): 
        x = x & (x - 1) 
        parity += 1
    if (parity % 2 == 1): 
        return True
    else: 
        return False",768,Write a python function to check for odd parity of a given number.,"['assert check_Odd_Parity(13) == True', 'assert check_Odd_Parity(21) == True', 'assert check_Odd_Parity(18) == False']",[],,,,,,
Write a python function to get the difference between two lists.,"def Diff(li1,li2):
    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))
 ",769,Write a python function to get the difference between two lists.,"['assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]', 'assert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]', 'assert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]']",[],"def list_difference(list1, list2):
    set1 = set(list1)
    set2 = set(list2)
    diff = set1.difference(set2)
    return list(diff)",,,,,
Write a python function to find the sum of fourth power of first n odd natural numbers.,"def odd_Num_Sum(n) : 
    j = 0
    sm = 0
    for i in range(1,n + 1) : 
        j = (2*i-1) 
        sm = sm + (j*j*j*j)   
    return sm ",770,Write a python function to find the sum of fourth power of first n odd natural numbers.,"['assert odd_Num_Sum(2) == 82', 'assert odd_Num_Sum(3) == 707', 'assert odd_Num_Sum(4) == 3108']",[],"def odd_num_sum_fourth_power(n):
    odd_sum = 0
    odd_num = 1
    
    for _ in range(n):
        odd_sum += odd_num ** 4
        odd_num += 2
    
    return odd_sum",,,,,
Write a function to check if the given expression is balanced or not.,"from collections import deque
def check_expression(exp):
    if len(exp) & 1:
        return False
    stack = deque()
    for ch in exp:
        if ch == '(' or ch == '{' or ch == '[':
            stack.append(ch)
        if ch == ')' or ch == '}' or ch == ']':
            if not stack:
                return False
            top = stack.pop()
            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):
                return False
    return not stack",771,Write a function to check if the given expression is balanced or not.,"['assert check_expression(""{()}[{}]"") == True', 'assert check_expression(""{()}[{]"") == False', 'assert check_expression(""{()}[{}][]({})"") == True']",[],,,,,,
Write a function to remove all the words with k length in the given string.,"def remove_length(test_str, K):
  temp = test_str.split()
  res = [ele for ele in temp if len(ele) != K]
  res = ' '.join(res)
  return (res) ",772,Write a function to remove all the words with k length in the given string.,"[""assert remove_length('The person is most value tet', 3) == 'person is most value'"", ""assert remove_length('If you told me about this ok', 4) == 'If you me about ok'"", ""assert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'""]",[],"def remove_words_of_length(string, k):
    words = string.split()
    filtered_words = [word for word in words if len(word) != k]
    return ' '.join(filtered_words)
'The is most tet'",,,,,
Write a function to find the occurrence and position of the substrings within a string.,"import re
def occurance_substring(text,pattern):
 for match in re.finditer(pattern, text):
    s = match.start()
    e = match.end()
    return (text[s:e], s, e)",773,Write a function to find the occurrence and position of the substrings within a string.,"[""assert occurance_substring('python programming, python language','python')==('python', 0, 6)"", ""assert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)"", ""assert occurance_substring('python programming,programming language','language')==('language', 31, 39)""]",[],"def find_substring_occurrences(main_string, substrings):
    occurrences = {}
    for substring in substrings:
        positions = []
        start_pos = 0
        while True:
            start_pos = main_string.find(substring, start_pos)
            if start_pos == -1:
                break
            positions.append(start_pos)
            start_pos += 1
        occurrences[substring] = positions
    return occurrences",,,,,
Write a function to check if the string is a valid email address or not using regex.,"import re 
regex = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$'
def check_email(email): 
	if(re.search(regex,email)): 
		return (""Valid Email"") 
	else: 
		return (""Invalid Email"") ",774,Write a function to check if the string is a valid email address or not using regex.,"['assert check_email(""ankitrai326@gmail.com"") == \'Valid Email\'', 'assert check_email(""my.ownsite@ourearth.org"") == \'Valid Email\'', 'assert check_email(""ankitaoie326.com"") == \'Invalid Email\'']",[],,,,,,
Write a python function to check whether every odd index contains odd numbers of a given list.,"def odd_position(nums):
	return all(nums[i]%2==i%2 for i in range(len(nums)))",775,Write a python function to check whether every odd index contains odd numbers of a given list.,"['assert odd_position([2,1,4,3,6,7,6,3]) == True', 'assert odd_position([4,1,2]) == True', 'assert odd_position([1,2,3]) == False']",[],,,,,,
Write a function to count those characters which have vowels as their neighbors in the given string.,"def count_vowels(test_str):
  res = 0
  vow_list = ['a', 'e', 'i', 'o', 'u']
  for idx in range(1, len(test_str) - 1):
    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):
      res += 1
  if test_str[0] not in vow_list and test_str[1] in vow_list:
    res += 1
  if test_str[-1] not in vow_list and test_str[-2] in vow_list:
    res += 1
  return (res) ",776,Write a function to count those characters which have vowels as their neighbors in the given string.,"[""assert count_vowels('bestinstareels') == 7"", ""assert count_vowels('partofthejourneyistheend') == 12"", ""assert count_vowels('amazonprime') == 5""]",[],"def count_vowel_neighbors(string):
    vowels = 'aeiouAEIOU'
    count = 0
    
    for i in range(1, len(string) - 1):
        if string[i - 1] in vowels and string[i + 1] in vowels:
            count += 1
    
    return count",,,,,
Write a python function to find the sum of non-repeated elements in a given array.,"def find_Sum(arr,n): 
    arr.sort() 
    sum = arr[0] 
    for i in range(0,n-1): 
        if (arr[i] != arr[i+1]): 
            sum = sum + arr[i+1]   
    return sum",777,Write a python function to find the sum of non-repeated elements in a given array.,"['assert find_Sum([1,2,3,1,1,4,5,6],8) == 21', 'assert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71', 'assert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78']",[],"def sum_of_non_repeated_elements(arr):
    element_count = {}
    sum_non_repeated = 0

    # Count the occurrences of each element
    for element in arr:
        if element in element_count:
            element_count[element] += 1
        else:
            element_count[element] = 1

    # Add the non-repeated elements to the sum
    for element, count in element_count.items():
        if count == 1:
            sum_non_repeated += element

    return sum_non_repeated",,,,,
Write a function to pack consecutive duplicates of a given list elements into sublists.,"from itertools import groupby
def pack_consecutive_duplicates(list1):
    return [list(group) for key, group in groupby(list1)]",778,Write a function to pack consecutive duplicates of a given list elements into sublists.,"['assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]', 'assert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]', ""assert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]""]",[],"def pack_duplicates(lst):
    result = []
    sublist = [lst[0]]
    
    for i in range(1, len(lst)):
        if lst[i] == sublist[-1]:
            sublist.append(lst[i])
        else:
            result.append(sublist)
            sublist = [lst[i]]
    
    result.append(sublist)
    return result",,,,,
Write a function to count the number of unique lists within a list.,"def unique_sublists(list1):
    result ={}
    for l in list1: 
        result.setdefault(tuple(l), list()).append(1) 
    for a, b in result.items(): 
        result[a] = sum(b)
    return result",779,Write a function to count the number of unique lists within a list.,"['assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}', ""assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}"", 'assert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}']",[],"def count_unique_lists(lst):
    unique_lists = set(tuple(sorted(sublist)) for sublist in lst if isinstance(sublist, list))
    return len(unique_lists)",,,,,
Write a function to find the combinations of sums with tuples in the given tuple list.,"from itertools import combinations 
def find_combinations(test_list):
  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]
  return (res) ",780,Write a function to find the combinations of sums with tuples in the given tuple list.,"['assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]', 'assert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]', 'assert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]']",[],"def find_combinations(tuple_list):
    def sum_combinations(tuples, target, current_sum=0, current_combination=()):
        if current_sum == target:
            return [current_combination]
        if current_sum > target:
            return []
        result = []
        for index, tuple_ in enumerate(tuples):
            remaining_tuples = tuples[index + 1:]
            new_combination = current_combination + tuple_
            result.extend(sum_combinations(remaining_tuples, target, current_sum + sum(tuple_), new_combination))
        return result

    combinations = []
    for i in range(1, len(tuple_list) + 1):
        for combination in itertools.combinations(tuple_list, i):
            target_sum = sum(sum(t) for t in combination)
            if target_sum not in (sum(c) for c in combinations):
                combinations.extend(sum_combinations(combination, target_sum))

    return combinations",,,,,
Write a python function to check whether the count of divisors is even or odd.,"import math 
def count_Divisors(n) : 
    count = 0
    for i in range(1, (int)(math.sqrt(n)) + 2) : 
        if (n % i == 0) : 
            if( n // i == i) : 
                count = count + 1
            else : 
                count = count + 2
    if (count % 2 == 0) : 
        return (""Even"") 
    else : 
        return (""Odd"") ",781,Write a python function to check whether the count of divisors is even or odd.,"['assert count_Divisors(10) == ""Even""', 'assert count_Divisors(100) == ""Odd""', 'assert count_Divisors(125) == ""Even""']",[],"def count_divisors_parity(n):
    count = 0
    for i in range(1, n + 1):
        if n % i == 0:
            count += 1
    return ""Even"" if count % 2 == 0 else ""Odd""",,,,,
Write a python function to find the sum of all odd length subarrays.,"def Odd_Length_Sum(arr):
    Sum = 0
    l = len(arr)
    for i in range(l):
        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])
    return Sum",782,Write a python function to find the sum of all odd length subarrays.,"['assert Odd_Length_Sum([1,2,4]) == 14', 'assert Odd_Length_Sum([1,2,1,2]) == 15', 'assert Odd_Length_Sum([1,7]) == 8']",[],,,,,,
Write a function to convert rgb color to hsv color.,"def rgb_to_hsv(r, g, b):
    r, g, b = r/255.0, g/255.0, b/255.0
    mx = max(r, g, b)
    mn = min(r, g, b)
    df = mx-mn
    if mx == mn:
        h = 0
    elif mx == r:
        h = (60 * ((g-b)/df) + 360) % 360
    elif mx == g:
        h = (60 * ((b-r)/df) + 120) % 360
    elif mx == b:
        h = (60 * ((r-g)/df) + 240) % 360
    if mx == 0:
        s = 0
    else:
        s = (df/mx)*100
    v = mx*100
    return h, s, v",783,Write a function to convert rgb color to hsv color.,"['assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)', 'assert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)', 'assert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)']",[],"import math

def rgb_to_hsv(r, g, b):
    # Normalize RGB values to the range [0, 1]
    r, g, b = r / 255.0, g / 255.0, b / 255.0

    # Calculate the maximum and minimum RGB values
    max_val = max(r, g, b)
    min_val = min(r, g, b)
    diff = max_val - min_val

    # Calculate hue
    if max_val == min_val:
        hue = 0.0
    elif max_val == r:
        hue = (60.0 * ((g - b) / diff) + 0.0
    elif max_val == g:
        hue = (60.0 * ((b - r) / diff)) + 120.0
    else:
        hue = (60.0 * ((r - g) / diff)) + 240.0

    # Adjust hue to be within [0, 360]
    hue = hue % 360.0
    if hue < 0.0:
        hue += 360.0

    # Calculate saturation
    if max_val == 0.0:
        saturation = 0.0
    else:
        saturation = diff / max_val

    # Calculate value
    value = max_val

    return hue, saturation, value",,,,,
Write a function to find the product of first even and odd number of a given list.,"def mul_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even*first_odd)",784,Write a function to find the product of first even and odd number of a given list.,"['assert mul_even_odd([1,3,5,7,4,1,6,8])==4', 'assert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2', 'assert mul_even_odd([1,5,7,9,10])==10']",[],"def product_of_first_even_odd(numbers):
    even_found = False
    odd_found = False
    even_num = None
    odd_num = None

    for num in numbers:
        if num % 2 == 0 and not even_found:
            even_found = True
            even_num = num
        elif num % 2 != 0 and not odd_found:
            odd_found = True
            odd_num = num

        if even_found and odd_found:
            break

    if even_num is not None and odd_num is not None:
        return even_num * odd_num
    else:
        return None  # Return None if no even or odd number is found",,,,,
Write a function to convert tuple string to integer tuple.,"def tuple_str_int(test_str):
  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))
  return (res) ",785,Write a function to convert tuple string to integer tuple.,"['assert tuple_str_int(""(7, 8, 9)"") == (7, 8, 9)', 'assert tuple_str_int(""(1, 2, 3)"") == (1, 2, 3)', 'assert tuple_str_int(""(4, 5, 6)"") == (4, 5, 6)']",[],,,,,,
Write a function to locate the right insertion point for a specified value in sorted order.,"import bisect
def right_insertion(a, x):
    i = bisect.bisect_right(a, x)
    return i",786,Write a function to locate the right insertion point for a specified value in sorted order.,"['assert right_insertion([1,2,4,5],6)==4', 'assert right_insertion([1,2,4,5],3)==2', 'assert right_insertion([1,2,4,5],7)==4']",[],,,,,,
Write a function that matches a string that has an a followed by three 'b'.,"import re
def text_match_three(text):
        patterns = 'ab{3}?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')",787,Write a function that matches a string that has an a followed by three 'b'.,"['assert text_match_three(""ac"")==(\'Not matched!\')', 'assert text_match_three(""dc"")==(\'Not matched!\')', 'assert text_match_three(""abbbba"")==(\'Found a match!\')']",[],"def match_string(s):
    return s.find('abbb') != -1",,,,,
Write a function to create a new tuple from the given string and list.,"def new_tuple(test_list, test_str):
  res = tuple(test_list + [test_str])
  return (res) ",788,Write a function to create a new tuple from the given string and list.,"['assert new_tuple([""WEB"", ""is""], ""best"") == (\'WEB\', \'is\', \'best\')', 'assert new_tuple([""We"", ""are""], ""Developers"") == (\'We\', \'are\', \'Developers\')', 'assert new_tuple([""Part"", ""is""], ""Wrong"") == (\'Part\', \'is\', \'Wrong\')']",[],"def create_tuple_from_string_and_list(string, list_data):
    # Convert the string to a list of characters
    char_list = list(string)
    
    # Initialize an empty list to store the elements of the tuple
    tuple_elements = []
    
    # Iterate over the characters in the char_list
    i = 0
    while i < len(char_list):
        # Check if the current character is a comma
        if char_list[i] == ',':
            # If it's a comma, check if the previous character is not a backslash
            if i > 0 and char_list[i-1] != '\\':
                # If it's not a backslash, append an empty string to tuple_elements
                tuple_elements.append('')
            # Move to the next character
            i += 1
        else:
            # If it's not a comma, start a new substring
            start_index = i
            
            # Find the index of the next comma or the end of the string
            while i < len(char_list) and char_list[i] != ',' and char_list[i] != ']':
                i += 1
            
            # Extract the substring from the start_index to the current index
            substring = ''.join(char_list[start_index:i])
            
            # If the substring contains a backslash, remove the backslash and the following character
            if '\\' in substring:
                substring = substring.replace('\\,', ',')
            
            # Append the substring to tuple_elements
            tuple_elements.append(substring)
    
    # Combine the tuple_elements with the list_data to create the final tuple
    final_tuple = tuple(tuple_elements + list_data)
    
    return final_tuple",,,,,
Write a function to calculate the perimeter of a regular polygon.,"from math import tan, pi
def perimeter_polygon(s,l):
  perimeter = s*l
  return perimeter",789,Write a function to calculate the perimeter of a regular polygon.,"['assert perimeter_polygon(4,20)==80', 'assert perimeter_polygon(10,15)==150', 'assert perimeter_polygon(9,7)==63']",[],"def calculate_perimeter(num_sides, side_length):
    """"""
    Calculate the perimeter of a regular polygon.
    
    :param num_sides: The number of sides in the polygon.
    :param side_length: The length of each side in the polygon.
    :return: The perimeter of the regular polygon.
    """"""
    return num_sides * side_length",,,,,
Write a python function to check whether every even index contains even numbers of a given list.,"def even_position(nums):
	return all(nums[i]%2==i%2 for i in range(len(nums)))",790,Write a python function to check whether every even index contains even numbers of a given list.,"['assert even_position([3,2,1]) == False', 'assert even_position([1,2,3]) == False', 'assert even_position([2,1,4]) == True']",[],,,,,,
Write a function to remove the nested record from the given tuple.,"def remove_nested(test_tup):
  res = tuple()
  for count, ele in enumerate(test_tup):
    if not isinstance(ele, tuple):
      res = res + (ele, )
  return (res) ",791,Write a function to remove the nested record from the given tuple.,"['assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)', 'assert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)', 'assert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)']",[],"def remove_nested_tuples(tup):
    result = []
    for item in tup:
        if isinstance(item, tuple):
            result.extend(remove_nested_tuples(item))
        else:
            result.append(item)
    return tuple(result)",,,,,
Write a python function to count the number of lists in a given number of lists.,"def count_list(input_list): 
    return len(input_list)",792,Write a python function to count the number of lists in a given number of lists.,"['assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4', 'assert count_list([[1,2],[2,3],[4,5]]) == 3', 'assert count_list([[1,0],[2,0]]) == 2']",[],"def count_lists_in_lists(lst):
    count = 0
    for item in lst:
        if isinstance(item, list):
            count += 1
            count += count_lists_in_lists(item)  # Recursively count lists within lists
    return count",,,,,
Write a python function to find the last position of an element in a sorted array.,"def last(arr,x,n):
    low = 0
    high = n - 1
    res = -1  
    while (low <= high):
        mid = (low + high) // 2 
        if arr[mid] > x:
            high = mid - 1
        elif arr[mid] < x:
            low = mid + 1
        else:
            res = mid
            low = mid + 1
    return res",793,Write a python function to find the last position of an element in a sorted array.,"['assert last([1,2,3],1,3) == 0', 'assert last([1,1,1,2,3,4],1,6) == 2', 'assert last([2,3,2,3,6,8,9],3,8) == 3']",[],"def find_last_position(arr, target):
    left, right = 0, len(arr) - 1
    last_position = -1

    while left <= right:
        mid = (left + right) // 2

        if arr[mid] == target:
            last_position = mid
            left = mid + 1  # Continue searching to the right to find the last position
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    return last_position",,,,,
"Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.","import re
def text_starta_endb(text):
        patterns = 'a.*?b$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')",794,"Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.","['assert text_starta_endb(""aabbbb"")==(\'Found a match!\')', 'assert text_starta_endb(""aabAbbbc"")==(\'Not matched!\')', 'assert text_starta_endb(""accddbbjjj"")==(\'Not matched!\')']",[],"import re

def match_string(s):
    pattern = r'a.*b$'
    return bool(re.match(pattern, s))
print(match_string('ab'))        # True
print(match_string('aabbb'))     # True
print(match_string('abc'))       # False (does not end in 'b')
print(match_string('ba'))        # False (does not start with 'a')
print(match_string('xyz'))       # False (does not start with 'a' and does not end in 'b')",,,,,
Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.,"import heapq
def cheap_items(items,n):
  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])
  return cheap_items",795,Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.,"[""assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]"", ""assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]"", ""assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]""]",[],"import heapq

def find_cheapest_items(dataset, n):
    # Create a min heap to store the items and their prices
    heap = []
    
    # Iterate over the dataset and add the items to the min heap
    for item in dataset:
        name = item['name']
        price = item['price']
        heapq.heappush(heap, (price, name))
    
    # Pop the n cheapest items from the min heap
    cheapest_items = []
    for _ in range(n):
        if heap:
            price, name = heapq.heappop(heap)
            cheapest_items.append({'name': name, 'price': price})
    
    return cheapest_items",,,,,
Write function to find the sum of all items in the given dictionary.,"def return_sum(dict):
  sum = 0
  for i in dict.values():
    sum = sum + i
  return sum",796,Write function to find the sum of all items in the given dictionary.,"[""assert return_sum({'a': 100, 'b':200, 'c':300}) == 600"", ""assert return_sum({'a': 25, 'b':18, 'c':45}) == 88"", ""assert return_sum({'a': 36, 'b':39, 'c':49}) == 124""]",[],"def sum_of_dictionary_items(dictionary):
    return sum(dictionary.values())",,,,,
Write a python function to find the sum of all odd natural numbers within the range l and r.,"def sum_Odd(n): 
    terms = (n + 1)//2
    sum1 = terms * terms 
    return sum1  
def sum_in_Range(l,r): 
    return sum_Odd(r) - sum_Odd(l - 1)",797,Write a python function to find the sum of all odd natural numbers within the range l and r.,"['assert sum_in_Range(2,5) == 8', 'assert sum_in_Range(5,7) == 12', 'assert sum_in_Range(7,13) == 40']",[],"def sum_odd_numbers(l, r):
    # Filter odd numbers in the range and calculate their sum
    return sum(num for num in range(l, r + 1) if num % 2 != 0)",,,,,
Write a python function to find the sum of an array.,"def _sum(arr):  
    sum=0
    for i in arr: 
        sum = sum + i      
    return(sum)  ",798,Write a python function to find the sum of an array.,"['assert _sum([1, 2, 3]) == 6', 'assert _sum([15, 12, 13, 10]) == 50', 'assert _sum([0, 1, 2]) == 3']",[],"def array_sum(arr):
    return sum(arr)",,,,,
Write a python function to left rotate the bits of a given number.,"INT_BITS = 32
def left_Rotate(n,d):   
    return (n << d)|(n >> (INT_BITS - d))  ",799,Write a python function to left rotate the bits of a given number.,"['assert left_Rotate(16,2) == 64', 'assert left_Rotate(10,2) == 40', 'assert left_Rotate(99,3) == 792']",[],"def left_rotate_bits(num, n):
    # Convert the number to binary string
    binary = bin(num)[2:]
    
    # Pad the binary string with leading zeros if necessary
    binary = binary.zfill(len(binary) + n)
    
    # Perform left rotation by slicing the string
    rotated_binary = binary[-n:] + binary[:-n]
    
    # Convert the rotated binary string back to an integer
    rotated_num = int(rotated_binary, 2)
    
    return rotated_num",,,,,
Write a function to remove all whitespaces from a string.,"import re
def remove_all_spaces(text):
 return (re.sub(r'\s+', '',text))",800,Write a function to remove all whitespaces from a string.,"[""assert remove_all_spaces('python  program')==('pythonprogram')"", ""assert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')"", ""assert remove_all_spaces('python                     program')==('pythonprogram')""]",[],,,,,,
Write a python function to count the number of equal numbers from three given integers.,"def test_three_equal(x,y,z):
  result= set([x,y,z])
  if len(result)==3:
    return 0
  else:
    return (4-len(result))",801,Write a python function to count the number of equal numbers from three given integers.,"['assert test_three_equal(1,1,1) == 3', 'assert test_three_equal(-1,-2,-3) == 0', 'assert test_three_equal(1,2,2) == 2']",[],"def count_equal_numbers(a, b, c):
    count = 0
    if a == b:
        count += 1
    if a == c:
        count += 1
    if b == c:
        count += 1
    return count",,,,,
Write a python function to count the number of rotations required to generate a sorted array.,"def count_Rotation(arr,n):   
    for i in range (1,n): 
        if (arr[i] < arr[i - 1]): 
            return i  
    return 0",802,Write a python function to count the number of rotations required to generate a sorted array.,"['assert count_Rotation([3,2,1],3) == 1', 'assert count_Rotation([4,5,1,2,3],5) == 2', 'assert count_Rotation([7,8,9,1,2,3],6) == 3']",[],,,,,,
Write a python function to check whether the given number is a perfect square or not.,"def is_Perfect_Square(n) :
    i = 1
    while (i * i<= n):
        if ((n % i == 0) and (n / i == i)):
            return True     
        i = i + 1
    return False",803,Write a python function to check whether the given number is a perfect square or not.,"['assert is_Perfect_Square(10) == False', 'assert is_Perfect_Square(36) == True', 'assert is_Perfect_Square(14) == False']",[],"import math

def is_perfect_square(num):
    root = int(math.sqrt(num))
    return root * root == num",,,,,
Write a python function to check whether the product of numbers is even or not.,"def is_Product_Even(arr,n): 
    for i in range(0,n): 
        if ((arr[i] & 1) == 0): 
            return True
    return False",804,Write a python function to check whether the product of numbers is even or not.,"['assert is_Product_Even([1,2,3],3) == True', 'assert is_Product_Even([1,2,1,4],4) == True', 'assert is_Product_Even([1,1],2) == False']",[],,,,,,
Write a function to find the list in a list of lists whose sum of elements is the highest.,"def max_sum_list(lists):
 return max(lists, key=sum)",805,Write a function to find the list in a list of lists whose sum of elements is the highest.,"['assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] ', 'assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] ', 'assert max_sum_list([[2,3,1]])==[2,3,1] ']",[],"def find_max_sum_list(lst_of_lists):
    max_sum = float('-inf')
    max_sum_list = None

    for sub_list in lst_of_lists:
        current_sum = sum(sub_list)
        if current_sum > max_sum:
            max_sum = current_sum
            max_sum_list = sub_list

    return max_sum_list",,,,,
Write a function to find maximum run of uppercase characters in the given string.,"def max_run_uppercase(test_str):
  cnt = 0
  res = 0
  for idx in range(0, len(test_str)):
    if test_str[idx].isupper():
      cnt += 1
    else:
      res = cnt
      cnt = 0
  if test_str[len(test_str) - 1].isupper():
    res = cnt
  return (res)",806,Write a function to find maximum run of uppercase characters in the given string.,"[""assert max_run_uppercase('GeMKSForGERksISBESt') == 5"", ""assert max_run_uppercase('PrECIOusMOVemENTSYT') == 6"", ""assert max_run_uppercase('GooGLEFluTTER') == 4""]",[],,,,,,
Write a python function to find the first odd number in a given list of numbers.,"def first_odd(nums):
  first_odd = next((el for el in nums if el%2!=0),-1)
  return first_odd",807,Write a python function to find the first odd number in a given list of numbers.,"['assert first_odd([1,3,5]) == 1', 'assert first_odd([2,4,1,3]) == 1', 'assert first_odd ([8,9,1]) == 9']",[],,,,,,
Write a function to check if the given tuples contain the k or not.,"def check_K(test_tup, K):
  res = False
  for ele in test_tup:
    if ele == K:
      res = True
      break
  return (res) ",808,Write a function to check if the given tuples contain the k or not.,"['assert check_K((10, 4, 5, 6, 8), 6) == True', 'assert check_K((1, 2, 3, 4, 5, 6), 7) == False', 'assert check_K((7, 8, 9, 44, 11, 12), 11) == True']",[],"def check_tuple_for_k(tup):
    for item in tup:
        if isinstance(item, str) and item.lower() == 'k':
            return True
    return False",,,,,
Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.,"def check_smaller(test_tup1, test_tup2):
  res = all(x > y for x, y in zip(test_tup1, test_tup2))
  return (res) ",809,Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.,"['assert check_smaller((1, 2, 3), (2, 3, 4)) == False', 'assert check_smaller((4, 5, 6), (3, 4, 5)) == True', 'assert check_smaller((11, 12, 13), (10, 11, 12)) == True']",[],"def check_tuple_elements(first_tuple, second_tuple):
    if len(first_tuple) != len(second_tuple):
        return False
    
    for i, element in enumerate(second_tuple):
        if element >= i:
            return False
    
    return True",,,,,
Write a function to iterate over elements repeating each as many times as its count.,"from collections import Counter
def count_variable(a,b,c,d):
  c = Counter(p=a, q=b, r=c, s=d)
  return list(c.elements())",810,Write a function to iterate over elements repeating each as many times as its count.,"[""assert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] "", ""assert count_variable(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] "", ""assert count_variable(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']""]",[],"def repeat_elements(lst):
    result = []
    i = 0
    while i < len(lst):
        element = lst[i]
        if isinstance(element, int):
            count = element
            element = lst[i+1]
            i += 2
            result.extend([element] * count)
        else:
            result.append(element)
            i += 1
    return result",,,,,
Write a function to check if two lists of tuples are identical or not.,"def check_identical(test_list1, test_list2):
  res = test_list1 == test_list2
  return (res) ",811,Write a function to check if two lists of tuples are identical or not.,"['assert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True', 'assert check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False', 'assert check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True']",[],"def are_lists_of_tuples_identical(list1, list2):
    if len(list1) != len(list2):
        return False
    
    for tuple1, tuple2 in zip(list1, list2):
        if tuple1 != tuple2:
            return False
    
    return True",,,,,
Write a function to abbreviate 'road' as 'rd.' in a given string.,"import re
def road_rd(street):
  return (re.sub('Road$', 'Rd.', street))",812,Write a function to abbreviate 'road' as 'rd.' in a given string.,"['assert road_rd(""ravipadu Road"")==(\'ravipadu Rd.\')', 'assert road_rd(""palnadu Road"")==(\'palnadu Rd.\')', 'assert road_rd(""eshwar enclave Road"")==(\'eshwar enclave Rd.\')']",[],,,,,,
Write a function to find length of the string.,"def string_length(str1):
    count = 0
    for char in str1:
        count += 1
    return count",813,Write a function to find length of the string.,"[""assert string_length('python')==6"", ""assert string_length('program')==7"", ""assert string_length('language')==8""]",[],,,,,,
Write a function to find the area of a rombus.,"def rombus_area(p,q):
  area=(p*q)/2
  return area",814,Write a function to find the area of a rombus.,"['assert rombus_area(10,20)==100', 'assert rombus_area(10,5)==25', 'assert rombus_area(4,2)==4']",[],"def rhombus_area(diagonal1, diagonal2):
    """"""
    Calculate the area of a rhombus given its two diagonals.
    
    :param diagonal1: Length of the first diagonal
    :param diagonal2: Length of the second diagonal
    :return: Area of the rhombus
    """"""
    return (diagonal1 * diagonal2) / 2",,,,,
"Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.","def sort_by_dnf(arr, n):
  low=0
  mid=0
  high=n-1
  while mid <= high:
    if arr[mid] == 0:
      arr[low], arr[mid] = arr[mid], arr[low]
      low = low + 1
      mid = mid + 1
    elif arr[mid] == 1:
      mid = mid + 1
    else:
      arr[mid], arr[high] = arr[high], arr[mid]
      high = high - 1
  return arr",815,"Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.","['assert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]', 'assert sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]', 'assert sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]']",[],"def sort_array(arr):
    # Initialize counts for 0, 1, and 2
    count_0, count_1, count_2 = 0, 0, 0

    # Count the occurrences of each number
    for num in arr:
        if num == 0:
            count_0 += 1
        elif num == 1:
            count_1 += 1
        else:
            count_2 += 1

    # Place the numbers back into the array in sorted order
    index = 0
    while count_0 > 0:
        arr[index] = 0
        index += 1
        count_0 -= 1

    while count_1 > 0:
        arr[index] = 1
        index += 1
        count_1 -= 1

    while count_2 > 0:
        arr[index] = 2
        index += 1
        count_2 -= 1

    return arr",,,,,
Write a function to clear the values of the given tuples.,"def clear_tuple(test_tup):
  temp = list(test_tup)
  temp.clear()
  test_tup = tuple(temp)
  return (test_tup) ",816,Write a function to clear the values of the given tuples.,"['assert clear_tuple((1, 5, 3, 6, 8)) == ()', 'assert clear_tuple((2, 1, 4 ,5 ,6)) == ()', 'assert clear_tuple((3, 2, 5, 6, 8)) == ()']",[],,,,,,
Write a function to find numbers divisible by m or n from a list of numbers using lambda function.,"def div_of_nums(nums,m,n):
 result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) 
 return result",817,Write a function to find numbers divisible by m or n from a list of numbers using lambda function.,"['assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]', 'assert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]', 'assert div_of_nums([10,15,14,13,18,12,20],10,5)==[10, 15, 20]']",[],"def find_divisible_numbers(numbers, m, n):
    return list(filter(lambda x: x % m == 0 or x % n == 0, numbers))",,,,,
Write a python function to count lower case letters in a given string.,"def lower_ctr(str):
      lower_ctr= 0
      for i in range(len(str)):
          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     
      return  lower_ctr",818,Write a python function to count lower case letters in a given string.,"[""assert lower_ctr('abc') == 3"", ""assert lower_ctr('string') == 6"", ""assert lower_ctr('Python') == 5""]",[],"def count_lowercase_letters(string):
    count = 0
    for char in string:
        if char.islower():
            count += 1
    return count",,,,,
Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.,"def count_duplic(lists):
    element = []
    frequency = []
    if not lists:
        return element
    running_count = 1
    for i in range(len(lists)-1):
        if lists[i] == lists[i+1]:
            running_count += 1
        else:
            frequency.append(running_count)
            element.append(lists[i])
            running_count = 1
    frequency.append(running_count)
    element.append(lists[i+1])
    return element,frequency
",819,Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.,"['assert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])', 'assert count_duplic([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])', 'assert count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])']",[],"def count_consecutive_duplicates(numbers):
    count = 1
    max_count = 1
    result = []

    for i in range(1, len(numbers)):
        if numbers[i] == numbers[i-1]:
            count += 1
            max_count = max(max_count, count)
        else:
            result.append((numbers[i-1], count))
            count = 1

    # Add the last sequence to the result
    result.append((numbers[-1], count))

    # Filter out sequences with count 1
    result = [(num, count) for num, count in result if count > 1]

    return result",,,,,
Write a function to check whether the given month number contains 28 days or not.,"def check_monthnum_number(monthnum1):
  if monthnum1 == 2:
    return True
  else:
    return False",820,Write a function to check whether the given month number contains 28 days or not.,"['assert check_monthnum_number(2)==True', 'assert check_monthnum_number(1)==False', 'assert check_monthnum_number(3)==False']",[],"def check_month_days(month_num):
    if month_num == 2:
        return True
    else:
        return False",,,,,
Write a function to merge two dictionaries into a single expression.,"import collections as ct
def merge_dictionaries(dict1,dict2):
    merged_dict = dict(ct.ChainMap({}, dict1, dict2))
    return merged_dict",821,Write a function to merge two dictionaries into a single expression.,"['assert merge_dictionaries({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }, { ""G"": ""Green"", ""W"": ""White"" })=={\'B\': \'Black\', \'R\': \'Red\', \'P\': \'Pink\', \'G\': \'Green\', \'W\': \'White\'}', 'assert merge_dictionaries({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" },{ ""O"": ""Orange"", ""W"": ""White"", ""B"": ""Black"" })=={\'O\': \'Orange\', \'P\': \'Pink\', \'B\': \'Black\', \'W\': \'White\', \'R\': \'Red\'}', 'assert merge_dictionaries({ ""G"": ""Green"", ""W"": ""White"" },{ ""O"": ""Orange"", ""W"": ""White"", ""B"": ""Black"" })=={\'W\': \'White\', \'O\': \'Orange\', \'G\': \'Green\', \'B\': \'Black\'}']",[],,,,,,
Write a function to return true if the password is valid.,"import re
def pass_validity(p):
 x = True
 while x:  
    if (len(p)<6 or len(p)>12):
        break
    elif not re.search(""[a-z]"",p):
        break
    elif not re.search(""[0-9]"",p):
        break
    elif not re.search(""[A-Z]"",p):
        break
    elif not re.search(""[$#@]"",p):
        break
    elif re.search(""\s"",p):
        break
    else:
        return True
        x=False
        break

 if x:
    return False",822,Write a function to return true if the password is valid.,"['assert pass_validity(""password"")==False', 'assert pass_validity(""Password@10"")==True', 'assert pass_validity(""password@10"")==False']",[],"def is_password_valid(password):
    # Define the rules for a valid password
    # Rule 1: Password should not contain any of the following characters: [, ', a, s, s, e, r, t, _, p, a, s, s, w, o, r, d
    invalid_chars = ['[', ""'"", 'a', 's', 's', 'e', 'r', 't', '_', 'p', 'a', 's', 's', 'w', 'o', 'r', 'd']
    if any(char in invalid_chars for char in password):
        return False

    # Rule 2: Password should contain the substring ""@10""
    if ""@10"" not in password:
        return False

    # Rule 3: Password should not contain the word ""False""
    if ""False"" in password:
        return False

    # If all rules are satisfied, the password is valid
    return True",,,,,
Write a function to check if the given string starts with a substring using regex.,"import re 
def check_substring(string, sample) : 
  if (sample in string): 
      y = ""\A"" + sample 
      x = re.search(y, string) 
      if x : 
          return (""string starts with the given substring"") 
      else : 
          return (""string doesnt start with the given substring"") 
  else : 
      return (""entered string isnt a substring"")",823,Write a function to check if the given string starts with a substring using regex.,"['assert check_substring(""dreams for dreams makes life fun"", ""makes"") == \'string doesnt start with the given substring\'', 'assert check_substring(""Hi there how are you Hi alex"", ""Hi"") == \'string starts with the given substring\'', 'assert check_substring(""Its been a long day"", ""been"") == \'string doesnt start with the given substring\'']",[],"import re

def starts_with_substring(string, substring):
    pattern = r'^' + re.escape(substring)
    return re.match(pattern, string) is not None",,,,,
Write a python function to remove even numbers from a given list.,"def remove_even(l):
    for i in l:
        if i % 2 == 0:
            l.remove(i)
    return l",824,Write a python function to remove even numbers from a given list.,"['assert remove_even([1,3,5,2]) == [1,3,5]', 'assert remove_even([5,6,7]) == [5,7]', 'assert remove_even([1,2,3,4]) == [1,3]']",[],,,,,,
Write a python function to access multiple elements of specified index from a given list.,"def access_elements(nums, list_index):
    result = [nums[i] for i in list_index]
    return result",825,Write a python function to access multiple elements of specified index from a given list.,"['assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]', 'assert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]', 'assert access_elements([1,0,2,3],[0,1]) == [1,0]']",[],"def access_elements(lst, indices):
    return [lst[i] for i in indices]",,,,,
Write a python function to find the type of triangle from the given sides.,"def check_Type_Of_Triangle(a,b,c): 
    sqa = pow(a,2) 
    sqb = pow(b,2) 
    sqc = pow(c,2) 
    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): 
        return (""Right-angled Triangle"") 
    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): 
        return (""Obtuse-angled Triangle"") 
    else: 
        return (""Acute-angled Triangle"") ",826,Write a python function to find the type of triangle from the given sides.,"['assert check_Type_Of_Triangle(1,2,3) == ""Obtuse-angled Triangle""', 'assert check_Type_Of_Triangle(2,2,2) == ""Acute-angled Triangle""', 'assert check_Type_Of_Triangle(1,0,1) == ""Right-angled Triangle""']",[],"def check_triangle_type(a, b, c):
    # Check if the given sides can form a triangle
    if a + b <= c or a + c <= b or b + c <= a:
        return ""Not a valid triangle""
    
    # Check if all sides are equal
    if a == b == c:
        return ""Equilateral triangle""
    
    # Check if two sides are equal
    if a == b or a == c or b == c:
        return ""Isosceles triangle""
    
    # If none of the above conditions are met, it's a scalene triangle
    return ""Scalene triangle""",,,,,
Write a function to sum a specific column of a list in a given list of lists.,"def sum_column(list1, C):
    result = sum(row[C] for row in list1)
    return result",827,Write a function to sum a specific column of a list in a given list of lists.,"['assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12', 'assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15', 'assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9']",[],"def sum_column(lst_of_lists, column_index):
    if not all(len(row) > column_index for row in lst_of_lists):
        raise IndexError(""Column index out of range"")
    
    return sum(row[column_index] for row in lst_of_lists)",,,,,
"Write a function to count alphabets,digits and special charactes in a given string.","def count_alpha_dig_spl(string):
  alphabets=digits = special = 0
  for i in range(len(string)):
    if(string[i].isalpha()):
        alphabets = alphabets + 1
    elif(string[i].isdigit()):
        digits = digits + 1
    else:
        special = special + 1
  return (alphabets,digits,special)   ",828,"Write a function to count alphabets,digits and special charactes in a given string.","['assert count_alpha_dig_spl(""abc!@#123"")==(3,3,3)', 'assert count_alpha_dig_spl(""dgsuy@#$%&1255"")==(5,4,5)', 'assert count_alpha_dig_spl(""fjdsif627348#%$^&"")==(6,6,5)']",[],"def count_characters(string):
    alphabet_count = 0
    digit_count = 0
    special_char_count = 0

    for char in string:
        if char.isalpha():
            alphabet_count += 1
        elif char.isdigit():
            digit_count += 1
        else:
            special_char_count += 1

    return alphabet_count, digit_count, special_char_count",,,,,
Write a function to find out the second most repeated (or frequent) string in the given sequence.,"from collections import Counter 
	
def second_frequent(input): 
	dict = Counter(input) 
	value = sorted(dict.values(), reverse=True)  
	second_large = value[1] 
	for (key, val) in dict.items(): 
		if val == second_large: 
			return (key) ",829,Write a function to find out the second most repeated (or frequent) string in the given sequence.,"[""assert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'"", ""assert second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'"", ""assert second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'""]",[],"from collections import Counter

def find_second_most_frequent(sequence):
    # Count the occurrences of each string in the sequence
    counts = Counter(sequence)
    
    # Filter out the strings that appear only once
    filtered_counts = {k: v for k, v in counts.items() if v > 1}
    
    # Sort the filtered counts in descending order
    sorted_counts = sorted(filtered_counts.items(), key=lambda x: x[1], reverse=True)
    
    # Return the second most frequent string
    if len(sorted_counts) >= 2:
        return sorted_counts[1][0]
    else:
        return None  # No second most frequent string found",,,,,
Write a function to round up a number to specific digits.,"import math
def round_up(a, digits):
    n = 10**-digits
    return round(math.ceil(a / n) * n, digits)",830,Write a function to round up a number to specific digits.,"['assert round_up(123.01247,0)==124', 'assert round_up(123.01247,1)==123.1', 'assert round_up(123.01247,2)==123.02']",[],"def round_up_to_digits(number, digits):
    factor = 10 ** (digits - int(str(number).split('.')[1].lstrip('0').rstrip('0') if '.' in str(number) else 0)
    return int(number * factor + 0.9999) / factor",,,,,
Write a python function to count equal element pairs from the given array.,"def count_Pairs(arr,n): 
    cnt = 0; 
    for i in range(n): 
        for j in range(i + 1,n): 
            if (arr[i] == arr[j]): 
                cnt += 1; 
    return cnt; ",831,Write a python function to count equal element pairs from the given array.,"['assert count_Pairs([1,1,1,1],4) == 6', 'assert count_Pairs([1,5,1],3) == 1', 'assert count_Pairs([3,2,1,7,8,9],6) == 0']",[],"def count_equal_pairs(arr):
    element_counts = {}
    pair_count = 0

    for element in arr:
        if element in element_counts:
            pair_count += element_counts[element]
            element_counts[element] += 1
        else:
            element_counts[element] = 1

    return pair_count",,,,,
Write a function to extract the maximum numeric value from a string by using regex.,"import re 
def extract_max(input): 
	numbers = re.findall('\d+',input) 
	numbers = map(int,numbers) 
	return max(numbers)",832,Write a function to extract the maximum numeric value from a string by using regex.,"[""assert extract_max('100klh564abc365bg') == 564"", ""assert extract_max('hello300how546mer231') == 546"", ""assert extract_max('its233beenalong343journey234') == 343""]",[],"import re

def extract_max_numeric_value(s):
    # Find all numeric values in the string using regex
    numbers = re.findall(r'\d+', s)
    
    # Convert the numeric values to integers
    numeric_values = [int(num) for num in numbers]
    
    # Return the maximum value if there are any numeric values, otherwise return None
    return max(numeric_values) if numeric_values else None",,,,,
Write a function to get dictionary keys as a list.,"def get_key(dict): 
    list = [] 
    for key in dict.keys(): 
        list.append(key)           
    return list",833,Write a function to get dictionary keys as a list.,"[""assert get_key({1:'python',2:'java'})==[1,2]"", ""assert get_key({10:'red',20:'blue',30:'black'})==[10,20,30]"", ""assert get_key({27:'language',39:'java',44:'little'})==[27,39,44]""]",[],"def get_keys_as_list(dictionary):
    return list(dictionary.keys())",,,,,
Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.,"def generate_matrix(n):
        if n<=0:
            return [] 
        matrix=[row[:] for row in [[0]*n]*n]        
        row_st=0
        row_ed=n-1        
        col_st=0
        col_ed=n-1
        current=1        
        while (True):
            if current>n*n:
                break
            for c in range (col_st, col_ed+1):
                matrix[row_st][c]=current
                current+=1
            row_st+=1
            for r in range (row_st, row_ed+1):
                matrix[r][col_ed]=current
                current+=1
            col_ed-=1
            for c in range (col_ed, col_st-1, -1):
                matrix[row_ed][c]=current
                current+=1
            row_ed-=1
            for r in range (row_ed, row_st-1, -1):
                matrix[r][col_st]=current
                current+=1
            col_st+=1
        return matrix",834,Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.,"['assert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] ', 'assert generate_matrix(2)==[[1,2],[4,3]]', 'assert generate_matrix(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]']",[],"def generate_spiral_matrix(n):
    # Initialize the matrix with zeros
    matrix = [[0] * n for _ in range(n)]
    
    # Variables to keep track of the boundaries of the current spiral
    top, bottom = 0, n - 1
    left, right = 0, n - 1
    
    # Variable to keep track of the current number to fill in the matrix
    num = 1
    
    while top <= bottom and left <= right:
        # Traverse top row from left to right
        for i in range(left, right + 1):
            matrix[top][i] = num
            num *= 2
        top += 1
        
        # Traverse right column from top to bottom
        for i in range(top, bottom + 1):
            matrix[i][right] = num
            num *= 2
        right -= 1
        
        # Traverse bottom row from right to left (if there's still a row to traverse)
        if top <= bottom:
            for i in range(right, left - 1, -1):
                matrix[bottom][i] = num
                num *= 2
            bottom -= 1
        
        # Traverse left column from bottom to top (if there's still a column to traverse)
        if left <= right:
            for i in range(bottom, top - 1, -1):
                matrix[i][left] = num
                num *= 2
            left += 1
    
    return matrix",,,,,
Write a python function to find the slope of a line.,"def slope(x1,y1,x2,y2): 
    return (float)(y2-y1)/(x2-x1)  ",835,Write a python function to find the slope of a line.,"['assert slope(4,2,2,5) == -1.5', 'assert slope(2,4,4,6) == 1', 'assert slope(1,2,4,2) == 0']",[],"def find_slope(x1, y1, x2, y2):
    return (y2 - y1) / (x2 - x1)",,,,,
Write a function to find length of the subarray having maximum sum.,"from sys import maxsize 
def max_sub_array_sum(a,size): 
	max_so_far = -maxsize - 1
	max_ending_here = 0
	start = 0
	end = 0
	s = 0
	for i in range(0,size): 
		max_ending_here += a[i] 
		if max_so_far < max_ending_here: 
			max_so_far = max_ending_here 
			start = s 
			end = i 
		if max_ending_here < 0: 
			max_ending_here = 0
			s = i+1
	return (end - start + 1)",836,Write a function to find length of the subarray having maximum sum.,"['assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5', 'assert max_sub_array_sum([1, -2, 1, 1, -2, 1],6) == 2', 'assert max_sub_array_sum([-1, -2, 3, 4, 5],5) == 3']",[],"def max_subarray_sum_length(nums):
    if not nums:
        return 0

    max_sum = float('-inf')
    max_length = 0
    current_sum = 0
    start_index = 0
    end_index = 0

    for i, num in enumerate(nums):
        current_sum += num

        if current_sum > max_sum:
            max_sum = current_sum
            max_length = i - start_index + 1

        if current_sum < 0:
            current_sum = 0
            start_index = i + 1

    return max_length",,,,,
Write a python function to find the cube sum of first n odd natural numbers.,"def cube_Sum(n): 
    sum = 0   
    for i in range(0,n) : 
        sum += (2*i+1)*(2*i+1)*(2*i+1) 
    return sum",837,Write a python function to find the cube sum of first n odd natural numbers.,"['assert cube_Sum(2) == 28', 'assert cube_Sum(3) == 153', 'assert cube_Sum(4) == 496']",[],"def cube_sum_of_odd_numbers(n):
    odd_sum = 0
    for i in range(1, 2*n, 2):  # Loop through odd numbers from 1 to 2n-1
        odd_sum += i ** 3  # Add the cube of each odd number to the sum
    return odd_sum",,,,,
Write a python function to find minimum number swaps required to make two binary strings equal.,"def min_Swaps(s1,s2) :  
    c0 = 0; c1 = 0;  
    for i in range(len(s1)) :  
        if (s1[i] == '0' and s2[i] == '1') : 
            c0 += 1;    
        elif (s1[i] == '1' and s2[i] == '0') : 
            c1 += 1;  
    result = c0 // 2 + c1 // 2;  
    if (c0 % 2 == 0 and c1 % 2 == 0) : 
        return result;  
    elif ((c0 + c1) % 2 == 0) : 
        return result + 2;  
    else : 
        return -1;  ",838,Write a python function to find minimum number swaps required to make two binary strings equal.,"['assert min_Swaps(""0011"",""1111"") == 1', 'assert min_Swaps(""00011"",""01001"") == 2', 'assert min_Swaps(""111"",""111"") == 0']",[],"def min_swaps_to_equalize_binary_strings(str1, str2):
    # Count the number of differences between str1 and str2
    diff_count = sum(a != b for a, b in zip(str1, str2))
    
    # If the number of differences is odd, it's impossible to make the strings equal
    if diff_count % 2 != 0:
        return -1
    
    # Divide the number of differences by 2 to get the number of swaps needed
    num_swaps = diff_count // 2
    
    return num_swaps",,,,,
Write a function to sort the tuples alphabetically by the first item of each tuple.,"def sort_tuple(tup): 
	n = len(tup) 
	for i in range(n): 
		for j in range(n-i-1): 
			if tup[j][0] > tup[j + 1][0]: 
				tup[j], tup[j + 1] = tup[j + 1], tup[j] 
	return tup",839,Write a function to sort the tuples alphabetically by the first item of each tuple.,"['assert sort_tuple([(""Amana"", 28), (""Zenat"", 30), (""Abhishek"", 29),(""Nikhil"", 21), (""B"", ""C"")]) == [(\'Abhishek\', 29), (\'Amana\', 28), (\'B\', \'C\'), (\'Nikhil\', 21), (\'Zenat\', 30)]', 'assert sort_tuple([(""aaaa"", 28), (""aa"", 30), (""bab"", 29), (""bb"", 21), (""csa"", ""C"")]) == [(\'aa\', 30), (\'aaaa\', 28), (\'bab\', 29), (\'bb\', 21), (\'csa\', \'C\')]', 'assert sort_tuple([(""Sarala"", 28), (""Ayesha"", 30), (""Suman"", 29),(""Sai"", 21), (""G"", ""H"")]) == [(\'Ayesha\', 30), (\'G\', \'H\'), (\'Sai\', 21), (\'Sarala\', 28), (\'Suman\', 29)]']",[],"def sort_tuples_by_first_item(tuples):
    return sorted(tuples, key=lambda x: x[0])",,,,,
Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.,"def Check_Solution(a,b,c):  
    if b == 0:  
        return (""Yes"")  
    else: 
        return (""No"")  ",840,Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.,"['assert Check_Solution(2,0,-1) == ""Yes""', 'assert Check_Solution(1,-5,6) == ""No""', 'assert Check_Solution(2,0,2) == ""Yes""']",[],"def check_opposite_roots(a, b, c):
    # Calculate the discriminant
    discriminant = b ** 2 - 4 * a * c

    # Check if the discriminant is zero (indicating equal roots)
    if discriminant == 0:
        # Calculate the root
        root = -b / (2 * a)
        # Check if the root is zero (indicating no roots of opposite signs)
        return root != 0
    else:
        # If the discriminant is not zero, the roots are not equal
        return False",,,,,
Write a function to count the number of inversions in the given array.,"def get_inv_count(arr, n): 
	inv_count = 0
	for i in range(n): 
		for j in range(i + 1, n): 
			if (arr[i] > arr[j]): 
				inv_count += 1
	return inv_count ",841,Write a function to count the number of inversions in the given array.,"['assert get_inv_count([1, 20, 6, 4, 5], 5) == 5', 'assert get_inv_count([8, 4, 2, 1], 4) == 6', 'assert get_inv_count([3, 1, 2], 3) == 2']",[],"def count_inversions(arr):
    def merge_and_count(left, right):
        merged = []
        i = j = inversions = 0
        
        while i < len(left) and j < len(right):
            if left[i] <= right[j]:
                merged.append(left[i])
                i += 1
            else:
                merged.append(right[j])
                j += 1
                inversions += len(left) - i
        
        merged.extend(left[i:])
        merged.extend(right[j:])
        
        return merged, inversions
    
    def merge_sort_and_count(arr):
        if len(arr) <= 1:
            return arr, 0
        
        mid = len(arr) // 2
        left, inv_left = merge_sort_and_count(arr[:mid])
        right, inv_right = merge_sort_and_count(arr[mid:])
        merged, inv_merge = merge_and_count(left, right)
        
        return merged, inv_left + inv_right + inv_merge
    
    _, inversions = merge_sort_and_count(arr)
    return inversions",,,,,
Write a function to find the number which occurs for odd number of times in the given array.,"def get_odd_occurence(arr, arr_size):
  for i in range(0, arr_size):
    count = 0
    for j in range(0, arr_size):
      if arr[i] == arr[j]:
        count += 1
    if (count % 2 != 0):
      return arr[i]
  return -1",842,Write a function to find the number which occurs for odd number of times in the given array.,"['assert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5', 'assert get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3', 'assert get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) == 5']",[],,,,,,
Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.,"import heapq
def nth_super_ugly_number(n, primes):
    uglies = [1]
    def gen(prime):
        for ugly in uglies:
            yield ugly * prime
    merged = heapq.merge(*map(gen, primes))
    while len(uglies) < n:
        ugly = next(merged)
        if ugly != uglies[-1]:
            uglies.append(ugly)
    return uglies[-1]",843,Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.,"['assert nth_super_ugly_number(12,[2,7,13,19])==32', 'assert nth_super_ugly_number(10,[2,7,13,19])==26', 'assert nth_super_ugly_number(100,[2,7,13,19])==5408']",[],"import heapq

def nth_super_ugly_number(n, primes):
    ugly_numbers = [1]
    heap = [(p, 1) for p in primes]
    heapq.heapify(heap)

    while len(ugly_numbers) < n:
        p, idx = heapq.heappop(heap)
        next_ugly = ugly_numbers[idx] * p
        ugly_numbers.append(next_ugly)

        if idx + 1 < len(ugly_numbers):
            heapq.heappush(heap, (p, idx + 1))

    return ugly_numbers[-1]",,,,,
Write a python function to find the kth element in an array containing odd elements first and then even elements.,"def get_Number(n, k): 
    arr = [0] * n; 
    i = 0; 
    odd = 1; 
    while (odd <= n):   
        arr[i] = odd; 
        i += 1; 
        odd += 2;
    even = 2; 
    while (even <= n): 
        arr[i] = even; 
        i += 1;
        even += 2; 
    return arr[k - 1]; ",844,Write a python function to find the kth element in an array containing odd elements first and then even elements.,"['assert get_Number(8,5) == 2', 'assert get_Number(7,2) == 3', 'assert get_Number(5,2) == 3']",[],"def find_kth_element(arr, k):
    odd_count = 0
    even_count = 0
    
    for num in arr:
        if num % 2 != 0:
            odd_count += 1
            if odd_count == k:
                return num
        else:
            even_count += 1
            if even_count + odd_count == k:
                return num
    
    return None  # If the kth element doesn't exist in the array",,,,,
Write a python function to count the number of digits in factorial of a given number.,"import math 
def find_Digits(n): 
    if (n < 0): 
        return 0;
    if (n <= 1): 
        return 1; 
    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); 
    return math.floor(x) + 1; ",845,Write a python function to count the number of digits in factorial of a given number.,"['assert find_Digits(7) == 4', 'assert find_Digits(5) == 3', 'assert find_Digits(4) == 2']",[],,,,,,
Write a function to find the minimum number of platforms required for a railway/bus station.,"def find_platform(arr, dep, n): 
    arr.sort() 
    dep.sort() 
    plat_needed = 1
    result = 1
    i = 1
    j = 0
    while (i < n and j < n): 
        if (arr[i] <= dep[j]):           
            plat_needed+= 1
            i+= 1
        elif (arr[i] > dep[j]):           
            plat_needed-= 1
            j+= 1
        if (plat_needed > result):  
            result = plat_needed           
    return result",846,Write a function to find the minimum number of platforms required for a railway/bus station.,"['assert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3', 'assert find_platform([100,200,300,400],[700,800,900,1000],4)==4', 'assert find_platform([5,6,7,8],[4,3,2,1],4)==1']",[],"def find_min_platforms(arrivals, departures):
    # Create a sorted list of all events (arrivals and departures)
    events = sorted([(time, 'arrival') for time in arrivals] +
                     [(time, 'departure') for time in departures])
    
    # Initialize variables
    max_platforms = 0  # Maximum number of platforms used at any time
    current_platforms = 0  # Current number of platforms occupied
    
    for time, event in events:
        if event == 'arrival':
            # An arrival occurs, increment the number of platforms occupied
            current_platforms += 1
            # Update the maximum number of platforms if necessary
            max_platforms = max(max_platforms, current_platforms)
        else:
            # A departure occurs, decrement the number of platforms occupied
            current_platforms -= 1
    
    return max_platforms",,,,,
Write a python function to copy a list from a singleton tuple.,"def lcopy(xs):
  return xs[:]
",847,Write a python function to copy a list from a singleton tuple.,"['assert lcopy([1, 2, 3]) == [1, 2, 3]', 'assert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]', 'assert lcopy([4, 5, 6]) == [4, 5, 6]\n']",[],"def copy_list_from_singleton_tuple(tuple_with_list):
    return tuple_with_list[0]",,,,,
Write a function to find the area of a trapezium.,"def area_trapezium(base1,base2,height):
 area = 0.5 * (base1 + base2) * height
 return area",848,Write a function to find the area of a trapezium.,"['assert area_trapezium(6,9,4)==30', 'assert area_trapezium(10,20,30)==450', 'assert area_trapezium(15,25,35)==700']",[],"def area_of_trapezium(base1, base2, height):
    return 0.5 * (base1 + base2) * height",,,,,
Write a python function to find sum of all prime divisors of a given number.,"def Sum(N): 
    SumOfPrimeDivisors = [0]*(N + 1)   
    for i in range(2,N + 1) : 
        if (SumOfPrimeDivisors[i] == 0) : 
            for j in range(i,N + 1,i) : 
                SumOfPrimeDivisors[j] += i           
    return SumOfPrimeDivisors[N] ",849,Write a python function to find sum of all prime divisors of a given number.,"['assert Sum(60) == 10', 'assert Sum(39) == 16', 'assert Sum(40) == 7']",[],"def sum_of_prime_divisors(n):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num ** 0.5) + 1):
            if num % i == 0:
                return False
        return True

    divisors = []
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            if is_prime(i):
                divisors.append(i)
            if i != n // i:
                if is_prime(n // i):
                    divisors.append(n // i)

    return sum(divisors)",,,,,
Write a function to check if a triangle of positive area is possible with the given angles.,"def is_triangleexists(a,b,c): 
    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): 
        if((a + b)>= c or (b + c)>= a or (a + c)>= b): 
            return True 
        else:
            return False
    else:
        return False",850,Write a function to check if a triangle of positive area is possible with the given angles.,"['assert is_triangleexists(50,60,70)==True', 'assert is_triangleexists(90,45,45)==True', 'assert is_triangleexists(150,30,70)==False']",[],"def is_valid_triangle(angles):
    """"""
    Checks if a triangle of positive area is possible with the given angles.
    
    :param angles: A list or tuple of three angles in degrees.
    :return: True if a valid triangle is possible, False otherwise.
    """"""
    # Check if the input has exactly three angles
    if len(angles) != 3:
        return False
    
    # Convert the angles to radians
    angles_rad = [math.radians(angle) for angle in angles]
    
    # Check if the sum of the angles is equal to 180 degrees (π radians)
    if abs(sum(angles_rad) - math.pi) > 1e-9:
        return False
    
    # Check if all angles are positive
    if not all(angle > 0 for angle in angles_rad):
        return False
    
    # Check if no angle is equal to or greater than π radians (180 degrees)
    if any(angle >= math.pi for angle in angles_rad):
        return False
    
    # If all checks pass, a valid triangle is possible
    return True",,,,,
Write a python function to find sum of inverse of divisors.,"def Sum_of_Inverse_Divisors(N,Sum): 
    ans = float(Sum)*1.0 /float(N);  
    return round(ans,2); ",851,Write a python function to find sum of inverse of divisors.,"['assert Sum_of_Inverse_Divisors(6,12) == 2', 'assert Sum_of_Inverse_Divisors(9,13) == 1.44', 'assert Sum_of_Inverse_Divisors(1,4) == 4']",[],,,,,,
Write a python function to remove negative numbers from a list.,"def remove_negs(num_list): 
    for item in num_list: 
        if item < 0: 
           num_list.remove(item) 
    return num_list",852,Write a python function to remove negative numbers from a list.,"['assert remove_negs([1,-2,3,-4]) == [1,3]', 'assert remove_negs([1,2,3,-4]) == [1,2,3]', 'assert remove_negs([4,5,-6,7,-8]) == [4,5,7]']",[],,,,,,
Write a python function to find sum of odd factors of a number.,"import math
def sum_of_odd_Factors(n): 
    res = 1
    while n % 2 == 0: 
        n = n // 2 
    for i in range(3,int(math.sqrt(n) + 1)): 
        count = 0
        curr_sum = 1
        curr_term = 1
        while n % i == 0: 
            count+=1 
            n = n // i 
            curr_term *= i 
            curr_sum += curr_term    
        res *= curr_sum  
    if n >= 2: 
        res *= (1 + n) 
    return res ",853,Write a python function to find sum of odd factors of a number.,"['assert sum_of_odd_Factors(30) == 24', 'assert sum_of_odd_Factors(18) == 13', 'assert sum_of_odd_Factors(2) == 1']",[],"def sum_of_odd_factors(n):
    odd_factors_sum = 0
    for i in range(1, n + 1):
        if n % i == 0 and i % 2 != 0:
            odd_factors_sum += i
    return odd_factors_sum",,,,,
Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.,"import heapq as hq
def raw_heap(rawheap):
  hq.heapify(rawheap)
  return rawheap",854,Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.,"['assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]', 'assert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]', 'assert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]']",[],,,,,,
Write a python function to check for even parity of a given number.,"def check_Even_Parity(x): 
    parity = 0
    while (x != 0): 
        x = x & (x - 1) 
        parity += 1
    if (parity % 2 == 0): 
        return True
    else: 
        return False",855,Write a python function to check for even parity of a given number.,"['assert check_Even_Parity(10) == True', 'assert check_Even_Parity(11) == False', 'assert check_Even_Parity(18) == True']",[],"def check_even_parity(number):
    """"""
    Check if the given number has even parity.

    Parity is determined by the number of set bits (1s) in the binary representation of the number.
    Even parity means the number of set bits is even.

    :param number: The number to check for even parity.
    :return: True if the number has even parity, False otherwise.
    """"""
    # Count the number of set bits in the binary representation of the number
    set_bits = bin(number).count('1')
    
    # Check if the count of set bits is even
    return set_bits % 2 == 0",,,,,
Write a python function to find minimum adjacent swaps required to sort binary array.,"def find_Min_Swaps(arr,n) : 
    noOfZeroes = [0] * n 
    count = 0 
    noOfZeroes[n - 1] = 1 - arr[n - 1] 
    for i in range(n-2,-1,-1) : 
        noOfZeroes[i] = noOfZeroes[i + 1] 
        if (arr[i] == 0) : 
            noOfZeroes[i] = noOfZeroes[i] + 1
    for i in range(0,n) : 
        if (arr[i] == 1) : 
            count = count + noOfZeroes[i] 
    return count ",856,Write a python function to find minimum adjacent swaps required to sort binary array.,"['assert find_Min_Swaps([1,0,1,0],4) == 3', 'assert find_Min_Swaps([0,1,0],3) == 1', 'assert find_Min_Swaps([0,0,1,1,0],5) == 2']",[],"def min_swaps_to_sort_binary_array(arr):
    count = 0
    n = len(arr)
    
    # Count the number of 1s in the array
    ones_count = sum(arr)
    
    # Create a list of indices where 1s are present
    ones_indices = [i for i, num in enumerate(arr) if num == 1]
    
    # Iterate over the indices of 1s
    for i in range(ones_count):
        # If the current index is not equal to the expected index (based on sorted order)
        if ones_indices[i] != i:
            # Find the correct index for the current 1
            correct_index = ones_indices[i]
            
            # Swap the elements until the current 1 reaches its correct position
            while ones_indices[i] != i:
                # Swap the current 1 with the adjacent element
                arr[ones_indices[i]], arr[ones_indices[i] - 1] = arr[ones_indices[i] - 1], arr[ones_indices[i]]
                
                # Update the index of the swapped 1
                ones_indices[i] -= 1
                
                # Increment the count of swaps
                count += 1
    
    return count",,,,,
Write a function to list out the list of given strings individually using map function.,"def listify_list(list1):
  result = list(map(list,list1)) 
  return result ",857,Write a function to list out the list of given strings individually using map function.,"[""assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]"", ""assert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]"", ""assert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]""]",[],"def list_strings_individually(strings):
    return list(map(lambda s: [s], strings))",,,,,
Write a function to count number of lists in a given list of lists and square the count.,"def count_list(input_list): 
    return (len(input_list))**2",858,Write a function to count number of lists in a given list of lists and square the count.,"['assert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25', 'assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16', 'assert count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9']",[],"def count_and_square_lists(lst_of_lists):
    count = sum(isinstance(item, list) for item in lst_of_lists)
    return count ** 2",,,,,
Write a function to generate all sublists of a given list.,"from itertools import combinations
def sub_lists(my_list):
	subs = []
	for i in range(0, len(my_list)+1):
	  temp = [list(x) for x in combinations(my_list, i)]
	  if len(temp)>0:
	    subs.extend(temp)
	return subs",859,Write a function to generate all sublists of a given list.,"['assert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]', ""assert sub_lists(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]"", 'assert sub_lists([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]']",[],"def generate_sublists(lst):
    def backtrack(start, path):
        # Base case: Add the current path to the result if it's non-empty
        if path:
            result.append(path)
        
        # Recursive case: Explore all possible choices from the current start index
        for i in range(start, len(lst)):
            # Add the current element to the path and continue exploring
            backtrack(i + 1, path + [lst[i]])

    result = []
    backtrack(0, [])
    return result",,,,,
Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.,"import re 
regex = '[a-zA-z0-9]$'
def check_alphanumeric(string): 
	if(re.search(regex, string)): 
		return (""Accept"") 
	else: 
		return (""Discard"") ",860,Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.,"['assert check_alphanumeric(""dawood@"") == \'Discard\'', 'assert check_alphanumeric(""skdmsam326"") == \'Accept\'', 'assert check_alphanumeric(""cooltricks@"") == \'Discard\'']",[],,,,,,
Write a function to find all anagrams of a string in a given list of strings using lambda function.,"from collections import Counter 
def anagram_lambda(texts,str):
  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) 
  return result",861,Write a function to find all anagrams of a string in a given list of strings using lambda function.,"['assert anagram_lambda([""bcda"", ""abce"", ""cbda"", ""cbea"", ""adcb""],""abcd"")==[\'bcda\', \'cbda\', \'adcb\']', 'assert anagram_lambda([""recitals"","" python""], ""articles"" )==[""recitals""]', 'assert anagram_lambda(["" keep"","" abcdef"","" xyz""],"" peek"")==["" keep""]']",[],"def find_anagrams(string, word_list):
    string_sorted = sorted(string)
    anagrams = list(filter(lambda word: sorted(word) == string_sorted, word_list))
    return anagrams",,,,,
Write a function to find the occurrences of n most common words in a given text.,"from collections import Counter
import re
def n_common_words(text,n):
  words = re.findall('\w+',text)
  n_common_words= Counter(words).most_common(n)
  return list(n_common_words)",862,Write a function to find the occurrences of n most common words in a given text.,"['assert n_common_words(""python is a programming language"",1)==[(\'python\', 1)]', 'assert n_common_words(""python is a programming language"",1)==[(\'python\', 1)]', 'assert n_common_words(""python is a programming language"",5)==[(\'python\', 1),(\'is\', 1), (\'a\', 1), (\'programming\', 1), (\'language\', 1)]']",[],,,,,,
Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.,"def find_longest_conseq_subseq(arr, n): 
	ans = 0
	count = 0
	arr.sort() 
	v = [] 
	v.append(arr[0]) 
	for i in range(1, n): 
		if (arr[i] != arr[i - 1]): 
			v.append(arr[i]) 
	for i in range(len(v)): 
		if (i > 0 and v[i] == v[i - 1] + 1): 
			count += 1
		else: 
			count = 1
		ans = max(ans, count) 
	return ans ",863,Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.,"['assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3', 'assert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4', 'assert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5']",[],"def longest_consecutive_subsequence(nums):
    if not nums:
        return 0

    # Create a set of all the numbers in the input list
    num_set = set(nums)

    # Initialize the longest length and the current length
    longest_length = 0
    current_length = 1

    # Iterate over each number in the set
    for num in sorted(num_set):
        # If the next number is consecutive, increment the current length
        if num + 1 in num_set:
            current_length += 1
        else:
            # If not consecutive, update the longest length if necessary
            longest_length = max(longest_length, current_length)
            current_length = 1

    # Check the last subsequence length after the loop
    longest_length = max(longest_length, current_length)

    return longest_length",,,,,
Write a function to find palindromes in a given list of strings using lambda function.,"def palindrome_lambda(texts):
  result = list(filter(lambda x: (x == """".join(reversed(x))), texts))
  return result",864,Write a function to find palindromes in a given list of strings using lambda function.,"['assert palindrome_lambda([""php"", ""res"", ""Python"", ""abcd"", ""Java"", ""aaa""])==[\'php\', \'aaa\']', 'assert palindrome_lambda([""abcd"", ""Python"", ""abba"", ""aba""])==[\'abba\', \'aba\']', 'assert palindrome_lambda([""abcd"", ""abbccbba"", ""abba"", ""aba""])==[\'abbccbba\', \'abba\', \'aba\']']",[],"def find_palindromes(strings):
    palindromes = list(filter(lambda s: s == s[::-1], strings))
    return palindromes",,,,,
Write a function to print n-times a list using map function.,"def ntimes_list(nums,n):
    result = map(lambda x:n*x, nums) 
    return list(result)",865,Write a function to print n-times a list using map function.,"['assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]', 'assert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]', 'assert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]']",[],"def print_list_n_times(lst, n):
    # Use map to create a new list with each element multiplied by n
    repeated_list = list(map(lambda x: [x] * n, lst))
    
    # Flatten the nested list into a single list
    flattened_list = [item for sublist in repeated_list for item in sublist]
    
    # Print the flattened list
    print(flattened_list)",,,,,
Write a function to check whether the given month name contains 31 days or not.,"def check_monthnumb(monthname2):
  if(monthname2==""January"" or monthname2==""March""or monthname2==""May"" or monthname2==""July"" or monthname2==""Augest"" or monthname2==""October"" or monthname2==""December""):
    return True
  else:
    return False",866,Write a function to check whether the given month name contains 31 days or not.,"['assert check_monthnumb(""February"")==False', 'assert check_monthnumb(""January"")==True', 'assert check_monthnumb(""March"")==True']",[],"def check_31_days(month_name):
    months_with_31_days = ['January', 'March', 'May', 'July', 'August', 'October', 'December']
    month_name = month_name.strip()  # Remove leading/trailing whitespace
    return month_name in months_with_31_days",,,,,
Write a python function to add a minimum number such that the sum of array becomes even.,"def min_Num(arr,n):  
    odd = 0
    for i in range(n): 
        if (arr[i] % 2): 
            odd += 1 
    if (odd % 2): 
        return 1
    return 2",867,Write a python function to add a minimum number such that the sum of array becomes even.,"['assert min_Num([1,2,3,4,5,6,7,8,9],9) == 1', 'assert min_Num([1,2,3,4,5,6,7,8],8) == 2', 'assert min_Num([1,2,3],3) == 2']",[],,,,,,
Write a python function to find the length of the last word in a given string.,"def length_Of_Last_Word(a): 
    l = 0
    x = a.strip() 
    for i in range(len(x)): 
        if x[i] == "" "": 
            l = 0
        else: 
            l += 1
    return l ",868,Write a python function to find the length of the last word in a given string.,"['assert length_Of_Last_Word(""python language"") == 8', 'assert length_Of_Last_Word(""PHP"") == 3', 'assert length_Of_Last_Word("""") == 0']",[],"def length_of_last_word(s):
    # Remove leading and trailing whitespace
    s = s.strip()
    
    # Find the index of the last space character
    last_space_index = s.rfind(' ')
    
    # If there is no space character, the entire string is the last word
    if last_space_index == -1:
        return len(s)
    
    # Calculate the length of the last word
    last_word_length = len(s) - last_space_index - 1
    
    return last_word_length",,,,,
"Write a function to remove sublists from a given list of lists, which are outside a given range.","def remove_list_range(list1, leftrange, rigthrange):
   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]
   return result",869,"Write a function to remove sublists from a given list of lists, which are outside a given range.","['assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]', 'assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]', 'assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]']",[],"def remove_outside_range(lst_of_lists, min_range, max_range):
    return [sublist for sublist in lst_of_lists if min(sublist) >= min_range and max(sublist) <= max_range]",,,,,
Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.,"def sum_positivenum(nums):
  sum_positivenum = list(filter(lambda nums:nums>0,nums))
  return sum(sum_positivenum)",870,Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.,"['assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48', 'assert sum_positivenum([10,15,-14,13,-18,12,-20])==50', 'assert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522']",[],"def sum_positive_numbers(numbers):
    return sum(filter(lambda x: x > 0, numbers))",,,,,
Write a python function to check whether the given strings are rotations of each other or not.,"def are_Rotations(string1,string2): 
    size1 = len(string1) 
    size2 = len(string2) 
    temp = '' 
    if size1 != size2: 
        return False
    temp = string1 + string1 
    if (temp.count(string2)> 0): 
        return True
    else: 
        return False",871,Write a python function to check whether the given strings are rotations of each other or not.,"['assert are_Rotations(""abc"",""cba"") == False', 'assert are_Rotations(""abcd"",""cdba"") == False', 'assert are_Rotations(""abacd"",""cdaba"") == True']",[],"def are_rotations(str1, str2):
    if len(str1) != len(str2):
        return False

    concatenated = str1 + str1
    return str2 in concatenated

# Example usage:
str1 = ""assert are rotations (""abc"", ""cba"")""
str2 = ""are rotations (abc, cba) assert""
print(are_rotations(str1, str2))  # Output: True",,,,,
Write a function to check if a nested list is a subset of another nested list.,"def check_subset(list1,list2): 
    return all(map(list1.__contains__,list2)) ",872,Write a function to check if a nested list is a subset of another nested list.,"['assert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True', 'assert check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True', 'assert check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False']",[],"def is_nested_subset(nested_list1, nested_list2):
    def is_subset(lst1, lst2):
        for item in lst1:
            if isinstance(item, list):
                if not any(is_subset(item, sublist) for sublist in lst2):
                    return False
            elif item not in lst2:
                return False
        return True

    if not nested_list2:
        return False

    flattened_list2 = [item for sublist in nested_list2 for item in sublist if not isinstance(item, list)]
    flattened_list1 = [item for sublist in nested_list1 for item in sublist if not isinstance(item, list)]

    if not set(flattened_list1).issubset(set(flattened_list2)):
        return False

    return is_subset(nested_list1, nested_list2)",,,,,
Write a function to solve the fibonacci sequence using recursion.,"def fibonacci(n):
  if n == 1 or n == 2:
    return 1
  else:
    return (fibonacci(n - 1) + (fibonacci(n - 2)))",873,Write a function to solve the fibonacci sequence using recursion.,"['assert fibonacci(7) == 13', 'assert fibonacci(8) == 21', 'assert fibonacci(9) == 34']",[],"def fibonacci(n):
    if n <= 0:
        return ""Input should be a positive integer.""
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        return fibonacci(n-1) + fibonacci(n-2)",,,,,
Write a python function to check if the string is a concatenation of another string.,"def check_Concat(str1,str2):
    N = len(str1)
    M = len(str2)
    if (N % M != 0):
        return False
    for i in range(N):
        if (str1[i] != str2[i % M]):
            return False         
    return True",874,Write a python function to check if the string is a concatenation of another string.,"['assert check_Concat(""abcabcabc"",""abc"") == True', 'assert check_Concat(""abcab"",""abc"") == False', 'assert check_Concat(""aba"",""ab"") == False']",[],"def is_concatenation(string, substring):
    if not string or not substring:
        return False
    
    count = string.count(substring)
    if count == 0:
        return False
    
    concat_string = substring * count
    return concat_string == string",,,,,
Write a function to find the minimum difference in the tuple pairs of given tuples.,"def min_difference(test_list):
  temp = [abs(b - a) for a, b in test_list]
  res = min(temp)
  return (res) ",875,Write a function to find the minimum difference in the tuple pairs of given tuples.,"['assert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1', 'assert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2', 'assert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6']",[],"def min_diff_in_tuple_pairs(tuples_list):
    min_diff = float('inf')  # Initialize minimum difference to positive infinity

    for i in range(len(tuples_list)):
        for j in range(i + 1, len(tuples_list)):
            diff = abs(tuples_list[i][0] - tuples_list[j][0]) + abs(tuples_list[i][1] - tuples_list[j][1])
            min_diff = min(min_diff, diff)

    return min_diff",,,,,
Write a python function to find lcm of two positive integers.,"def lcm(x, y):
   if x > y:
       z = x
   else:
       z = y
   while(True):
       if((z % x == 0) and (z % y == 0)):
           lcm = z
           break
       z += 1
   return lcm",876,Write a python function to find lcm of two positive integers.,"['assert lcm(4,6) == 12', 'assert lcm(15,17) == 255', 'assert lcm(2,6) == 6']",[],,,,,,
Write a python function to sort the given string.,"def sort_String(str) : 
    str = ''.join(sorted(str)) 
    return (str) ",877,Write a python function to sort the given string.,"['assert sort_String(""cba"") == ""abc""', 'assert sort_String(""data"") == ""aadt""', 'assert sort_String(""zxy"") == ""xyz""']",[],"def sort_string(string):
    # Convert the string to a list of characters
    chars = list(string)
    
    # Remove any non-alphabetic characters
    chars = [char for char in chars if char.isalpha()]
    
    # Sort the characters in ascending order
    chars.sort()
    
    # Join the sorted characters back into a string
    sorted_string = ''.join(chars)
    
    return sorted_string",,,,,
Write a function to check if the given tuple contains only k elements.,"def check_tuples(test_tuple, K):
  res = all(ele in K for ele in test_tuple)
  return (res) ",878,Write a function to check if the given tuple contains only k elements.,"['assert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True', 'assert check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True', 'assert check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False']",[],,,,,,
"Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.","import re
def text_match(text):
  patterns = 'a.*?b$'
  if re.search(patterns,  text):
    return ('Found a match!')
  else:
    return ('Not matched!')",879,"Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.","['assert text_match(""aabbbbd"") == \'Not matched!\'', 'assert text_match(""aabAbbbc"") == \'Not matched!\'', 'assert text_match(""accddbbjjjb"") == \'Found a match!\'']",[],"import re

def match_string_with_regex(string):
    pattern = r'a.*b'
    match = re.search(pattern, string)
    return bool(match)",,,,,
Write a python function to find number of solutions in quadratic equation.,"def Check_Solution(a,b,c) : 
    if ((b*b) - (4*a*c)) > 0 : 
        return (""2 solutions"") 
    elif ((b*b) - (4*a*c)) == 0 : 
        return (""1 solution"") 
    else : 
        return (""No solutions"") ",880,Write a python function to find number of solutions in quadratic equation.,"['assert Check_Solution(2,5,2) == ""2 solutions""', 'assert Check_Solution(1,1,1) == ""No solutions""', 'assert Check_Solution(1,2,1) == ""1 solution""']",[],,,,,,
Write a function to find the sum of first even and odd number of a given list.,"def sum_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even+first_odd)",881,Write a function to find the sum of first even and odd number of a given list.,"['assert sum_even_odd([1,3,5,7,4,1,6,8])==5', 'assert sum_even_odd([1,2,3,4,5,6,7,8,9,10])==3', 'assert sum_even_odd([1,5,7,9,10])==11']",[],"def sum_first_even_odd(numbers):
    even_sum = 0
    odd_sum = 0
    
    for num in numbers:
        if num % 2 == 0:  # Check if the number is even
            even_sum += num
            if even_sum > 0:
                break
        else:  # The number is odd
            odd_sum += num
            if odd_sum > 0:
                break
    
    return even_sum + odd_sum",,,,,
Write a function to caluclate perimeter of a parallelogram.,"def parallelogram_perimeter(b,h):
  perimeter=2*(b*h)
  return perimeter",882,Write a function to caluclate perimeter of a parallelogram.,"['assert parallelogram_perimeter(10,20)==400', 'assert parallelogram_perimeter(15,20)==600', 'assert parallelogram_perimeter(8,9)==144']",[],"def parallelogram_perimeter(base, height):
    """"""
    Calculate the perimeter of a parallelogram given its base and height.
    
    :param base: The base of the parallelogram.
    :param height: The height of the parallelogram.
    :return: The perimeter of the parallelogram.
    """"""
    # Assuming the parallelogram is a rectangle for simplicity
    # Therefore, both sides are equal in length to the base and height
    perimeter = 2 * (base + height)
    return perimeter",,,,,
Write a function to find numbers divisible by m and n from a list of numbers using lambda function.,"def div_of_nums(nums,m,n):
 result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) 
 return result",883,Write a function to find numbers divisible by m and n from a list of numbers using lambda function.,"['assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]', 'assert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]', 'assert div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]']",[],"def find_divisible_numbers(numbers, m, n):
    return list(filter(lambda x: x % m == 0 and x % n == 0, numbers))",,,,,
Write a python function to check whether all the bits are within a given range or not.,"def all_Bits_Set_In_The_Given_Range(n,l,r): 
    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) 
    new_num = n & num 
    if (num == new_num): 
        return True
    return False",884,Write a python function to check whether all the bits are within a given range or not.,"['assert all_Bits_Set_In_The_Given_Range(10,2,1) == True ', 'assert all_Bits_Set_In_The_Given_Range(5,2,4) == False', 'assert all_Bits_Set_In_The_Given_Range(22,2,3) == True ']",[],"def check_bit_range(num, start_bit, end_bit):
    """"""
    Check if all bits in the given range are set in the number.
    
    :param num: The number to check.
    :param start_bit: The starting bit index (inclusive).
    :param end_bit: The ending bit index (inclusive).
    :return: True if all bits in the range are set, False otherwise.
    """"""
    mask = ((1 << (end_bit - start_bit + 1)) - 1) << start_bit
    return (num & mask) == mask",,,,,
Write a python function to check whether the two given strings are isomorphic to each other or not.,"def is_Isomorphic(str1,str2):          
    dict_str1 = {}
    dict_str2 = {}
    for i, value in enumerate(str1):
        dict_str1[value] = dict_str1.get(value,[]) + [i]        
    for j, value in enumerate(str2):
        dict_str2[value] = dict_str2.get(value,[]) + [j]
    if sorted(dict_str1.values()) == sorted(dict_str2.values()):
        return True
    else:
        return False",885,Write a python function to check whether the two given strings are isomorphic to each other or not.,"['assert is_Isomorphic(""paper"",""title"") == True', 'assert is_Isomorphic(""ab"",""ba"") == True', 'assert is_Isomorphic(""ab"",""aa"") == False']",[],"def are_strings_isomorphic(s1, s2):
    if len(s1) != len(s2):
        return False
    
    mapping = {}
    used = set()
    
    for char1, char2 in zip(s1, s2):
        if char1 in mapping and mapping[char1] != char2:
            return False
        if char2 in used and used[char2] != char1:
            return False
        
        mapping[char1] = char2
        used.add(char2)
    
    return True",,,,,
Write a function to add all the numbers in a list and divide it with the length of the list.,"def sum_num(numbers):
    total = 0
    for x in numbers:
        total += x
    return total/len(numbers) ",886,Write a function to add all the numbers in a list and divide it with the length of the list.,"['assert sum_num((8, 2, 3, 0, 7))==4.0', 'assert sum_num((-10,-20,-30))==-20.0', 'assert sum_num((19,15,18))==17.333333333333332']",[],"def calculate_average(numbers):
    if not numbers:  # Check if the list is empty
        return 0
    
    total = sum(numbers)
    average = total / len(numbers)
    return average",,,,,
Write a python function to check whether the given number is odd or not using bitwise operator.,"def is_odd(n) : 
    if (n^1 == n-1) :
        return True; 
    else :
        return False; ",887,Write a python function to check whether the given number is odd or not using bitwise operator.,"['assert is_odd(5) == True', 'assert is_odd(6) == False', 'assert is_odd(7) == True']",[],,,,,,
Write a function to substract the elements of the given nested tuples.,"def substract_elements(test_tup1, test_tup2):
  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ",888,Write a function to substract the elements of the given nested tuples.,"['assert substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))', 'assert substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))', 'assert substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))']",[],"def subtract_nested_tuples(nested_tuple):
    def subtract_elements(tuple1, tuple2):
        return tuple(a - b for a, b in zip(tuple1, tuple2))

    result = []
    for sub_tuple1, sub_tuple2 in zip(nested_tuple[0], nested_tuple[1]):
        result.append(subtract_elements(sub_tuple1, sub_tuple2))

    return tuple(result)",,,,,
Write a function to reverse each list in a given list of lists.,"def reverse_list_lists(lists):
    for l in lists:
        l.sort(reverse = True)
    return lists ",889,Write a function to reverse each list in a given list of lists.,"['assert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]', 'assert reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]', 'assert reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]']",[],"def reverse_lists(lst_of_lists):
    return [list(reversed(sublist)) for sublist in lst_of_lists]",,,,,
Write a python function to find the index of an extra element present in one sorted array.,"def find_Extra(arr1,arr2,n) : 
    for i in range(0, n) : 
        if (arr1[i] != arr2[i]) : 
            return i 
    return n ",890,Write a python function to find the index of an extra element present in one sorted array.,"['assert find_Extra([1,2,3,4],[1,2,3],3) == 3', 'assert find_Extra([2,4,6,8,10],[2,4,6,8],4) == 4', 'assert find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5) == 5']",[],"def find_extra_element_index(arr1, arr2):
    i = 0
    j = 0
    
    while i < len(arr1) and j < len(arr2):
        if arr1[i] == arr2[j]:
            i += 1
            j += 1
        elif arr1[i] < arr2[j]:
            i += 1
        else:
            return j
    
    # If arr2 is a subset of arr1, no extra element found
    if j == len(arr2):
        return -1
    
    # The remaining elements in arr1 are extras
    while i < len(arr1):
        if arr1[i] != arr2[j-1]:
            return i
        i += 1
    
    # If arr1 is a subset of arr2, the last element in arr2 is the extra element
    return len(arr2)

# Example usage:
arr1 = [1, 2, 3, 4]
arr2 = [1, 2, 3]
extra_index = find_extra_element_index(arr1, arr2)
print(extra_index)  # Output: 3

arr3 = [2, 4, 6, 8, 10]
arr4 = [2, 4, 6, 8]
extra_index = find_extra_element_index(arr3, arr4)
print(extra_index)  # Output: 4

arr5 = [1, 3, 5, 7, 9, 11]
arr6 = [1, 3, 5, 7, 9]
extra_index = find_extra_element_index(arr5, arr6)
print(extra_index)  # Output: 5",,,,,
Write a python function to check whether the given two numbers have same number of digits or not.,"def same_Length(A,B): 
    while (A > 0 and B > 0): 
        A = A / 10; 
        B = B / 10; 
    if (A == 0 and B == 0): 
        return True; 
    return False; ",891,Write a python function to check whether the given two numbers have same number of digits or not.,"['assert same_Length(12,1) == False', 'assert same_Length(2,2) == True', 'assert same_Length(10,20) == True']",[],"def same_number_of_digits(num1, num2):
    """"""
    Check if two numbers have the same number of digits.
    
    :param num1: First number to check
    :param num2: Second number to check
    :return: True if both numbers have the same number of digits, False otherwise
    """"""
    return len(str(num1)) == len(str(num2))",,,,,
Write a function to remove multiple spaces in a string.,"import re
def remove_spaces(text):
 return (re.sub(' +',' ',text))",892,Write a function to remove multiple spaces in a string.,"[""assert remove_spaces('python  program')==('python program')"", ""assert remove_spaces('python   programming    language')==('python programming language')"", ""assert remove_spaces('python                     program')==('python program')""]",[],,,,,,
Write a python function to get the last element of each sublist.,"def Extract(lst): 
    return [item[-1] for item in lst] ",893,Write a python function to get the last element of each sublist.,"['assert Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]', ""assert Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']"", 'assert Extract([[1, 2, 3], [4, 5]]) == [3, 5]']",[],"def get_last_elements(lst):
    return [sublist[-1] for sublist in lst if sublist]",,,,,
Write a function to convert the given string of float type into tuple.,"def float_to_tuple(test_str):
  res = tuple(map(float, test_str.split(', ')))
  return (res) ",894,Write a function to convert the given string of float type into tuple.,"['assert float_to_tuple(""1.2, 1.3, 2.3, 2.4, 6.5"") == (1.2, 1.3, 2.3, 2.4, 6.5)', 'assert float_to_tuple(""2.3, 2.4, 5.6, 5.4, 8.9"") == (2.3, 2.4, 5.6, 5.4, 8.9)', 'assert float_to_tuple(""0.3, 0.5, 7.8, 9.4"") == (0.3, 0.5, 7.8, 9.4)']",[],"def string_to_tuple(s):
    # Remove whitespace and split the string by commas
    elements = s.replace("" "", """").split("","")
    
    # Convert each element to a float and create a tuple
    tuple_result = tuple(float(element) for element in elements)
    
    return tuple_result",,,,,
Write a function to find the maximum sum of subsequences of given array with no adjacent elements.,"def max_sum_subseq(A):
    n = len(A)
    if n == 1:
        return A[0]
    look_up = [None] * n
    look_up[0] = A[0]
    look_up[1] = max(A[0], A[1])
    for i in range(2, n):
        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])
        look_up[i] = max(look_up[i], A[i])
    return look_up[n - 1]",895,Write a function to find the maximum sum of subsequences of given array with no adjacent elements.,"['assert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26', 'assert max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28', 'assert max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44']",[],"def max_sum_no_adjacent(arr):
    if not arr:
        return 0
    
    n = len(arr)
    
    # dp[i] represents the maximum sum of subsequences ending at index i
    dp = [0] * n
    dp[0] = arr[0]
    
    if n > 1:
        dp[1] = max(arr[0], arr[1])
    
    for i in range(2, n):
        # Include the current element and exclude the previous element
        include = arr[i] + dp[i-2] if i > 1 else arr[i]
        
        # Exclude the current element and use the maximum sum from the previous index
        exclude = dp[i-1]
        
        # Choose the maximum sum
        dp[i] = max(include, exclude)
    
    # The maximum sum of subsequences is the maximum value in the dp array
    return max(dp)",,,,,
Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.,"def last(n):
   return n[-1]
def sort_list_last(tuples):
  return sorted(tuples, key=last)",896,Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.,"['assert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] ', 'assert sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] ', 'assert sort_list_last([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] ']",[],"def sort_list_by_last_element(lst):
    return sorted(lst, key=lambda x: x[-1])",,,,,
Write a python function to check whether the word is present in a given sentence or not.,"def is_Word_Present(sentence,word): 
    s = sentence.split("" "") 
    for i in s:  
        if (i == word): 
            return True
    return False",897,Write a python function to check whether the word is present in a given sentence or not.,"['assert is_Word_Present(""machine learning"",""machine"") == True', 'assert is_Word_Present(""easy"",""fun"") == False', 'assert is_Word_Present(""python language"",""code"") == False']",[],,,,,,
"Write a function to extract specified number of elements from a given list, which follow each other continuously.","from itertools import groupby 
def extract_elements(numbers, n):
    result = [i for i, j in groupby(numbers) if len(list(j)) == n] 
    return result",898,"Write a function to extract specified number of elements from a given list, which follow each other continuously.","['assert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]', 'assert extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]', 'assert extract_elements([0,0,0,0,0],5)==[0]']",[],"def extract_consecutive_elements(lst, count):
    if not lst or count <= 0:
        return []
    
    result = []
    consecutive_count = 0
    
    for i in range(len(lst)):
        if i > 0 and lst[i] == lst[i-1] + 1:
            consecutive_count += 1
        else:
            consecutive_count = 1
        
        if consecutive_count == count:
            result.append(lst[i])
            consecutive_count = 0
    
    return result",,,,,
Write a python function to check whether an array can be sorted or not by picking only the corner elements.,"def check(arr,n): 
    g = 0 
    for i in range(1,n): 
        if (arr[i] - arr[i - 1] > 0 and g == 1): 
            return False
        if (arr[i] - arr[i] < 0): 
            g = 1
    return True",899,Write a python function to check whether an array can be sorted or not by picking only the corner elements.,"['assert check([3,2,1,2,3,4],6) == True', 'assert check([2,1,4,5,1],5) == True', 'assert check([1,2,2,1,2,3],6) == True']",[],,,,,,
Write a function where a string will start with a specific number.,"import re
def match_num(string):
    text = re.compile(r""^5"")
    if text.match(string):
        return True
    else:
        return False",900,Write a function where a string will start with a specific number.,"[""assert match_num('5-2345861')==True"", ""assert match_num('6-2345861')==False"", ""assert match_num('78910')==False""]",[],"def starts_with_number(string, target_number):
    # Convert the target number to a string
    target_number_str = str(target_number)

    # Check if the string starts with the target number
    return string.startswith(target_number_str)",,,,,
Write a function to find the smallest multiple of the first n numbers.,"def smallest_multiple(n):
    if (n<=2):
      return n
    i = n * 2
    factors = [number  for number in range(n, 1, -1) if number * 2 > n]
    while True:
        for a in factors:
            if i % a != 0:
                i += n
                break
            if (a == factors[-1] and i % a == 0):
                return i",901,Write a function to find the smallest multiple of the first n numbers.,"['assert smallest_multiple(13)==360360', 'assert smallest_multiple(2)==2', 'assert smallest_multiple(1)==1']",[],"def smallest_multiple(n):
    # Initialize the smallest multiple with the value of n
    multiple = n
    
    # Iterate from 2 to n
    for i in range(2, n + 1):
        # Find the least common multiple (LCM) of multiple and i
        lcm = (multiple * i) // math.gcd(multiple, i)
        
        # Update the smallest multiple if the LCM is larger
        multiple = lcm
    
    return multiple",,,,,
Write a function to combine two dictionaries by adding values for common keys.,"from collections import Counter
def add_dict(d1,d2):
   add_dict = Counter(d1) + Counter(d2)
   return add_dict",902,Write a function to combine two dictionaries by adding values for common keys.,"[""assert add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) "", ""assert add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) "", ""assert add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})""]",[],"def add_dicts(dict1, dict2):
    result = {}
    for key in dict1:
        result[key] = dict1[key] + (dict2[key] if key in dict2 else 0)
    for key in dict2:
        if key not in result:
            result[key] = dict2[key]
    return result",,,,,
Write a python function to count the total unset bits from 1 to n.,"def count_Unset_Bits(n) :  
    cnt = 0;  
    for i in range(1,n + 1) : 
        temp = i;  
        while (temp) :  
            if (temp % 2 == 0) : 
                cnt += 1;  
            temp = temp // 2;  
    return cnt;  ",903,Write a python function to count the total unset bits from 1 to n.,"['assert count_Unset_Bits(2) == 1', 'assert count_Unset_Bits(5) == 4', 'assert count_Unset_Bits(14) == 17']",[],,,,,,
Write a function to return true if the given number is even else return false.,"def even_num(x):
  if x%2==0:
     return True
  else:
    return False",904,Write a function to return true if the given number is even else return false.,"['assert even_num(13.5)==False', 'assert even_num(0)==True', 'assert even_num(-9)==False']",[],"def is_even(number):
    return number % 2 == 0",,,,,
Write a python function to find the sum of squares of binomial co-efficients.,"def factorial(start,end): 
    res = 1 
    for i in range(start,end + 1): 
        res *= i      
    return res 
def sum_of_square(n): 
   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) ",905,Write a python function to find the sum of squares of binomial co-efficients.,"['assert sum_of_square(4) == 70', 'assert sum_of_square(5) == 252', 'assert sum_of_square(2) == 6']",[],"def sum_of_squares_binomial_coefficients(n):
    # Calculate the sum of squares of binomial coefficients using the formula
    # sum(C(n, k)^2) for k from 0 to n
    return sum(binomial_coefficient(n, k) ** 2 for k in range(n + 1))


def binomial_coefficient(n, k):
    # Calculate the binomial coefficient C(n, k) using the formula
    # n! / (k! * (n - k)!)
    from math import factorial
    return factorial(n) // (factorial(k) * factorial(n - k))",,,,,
"Write a function to extract year, month and date from a url by using regex.","import re
def extract_date(url):
        return re.findall(r'/(\d{4})/(\d{1,2})/(\d{1,2})/', url)",906,"Write a function to extract year, month and date from a url by using regex.","['assert extract_date(""https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/"") == [(\'2016\', \'09\', \'02\')]', 'assert extract_date(""https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/"") == [(\'2020\', \'11\', \'03\')]', 'assert extract_date(""https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms"") == [(\'2020\', \'12\', \'29\')]']",[],"import re

def extract_date_from_url(url):
    pattern = r'\d{4}/\d{2}/\d{2}'
    match = re.search(pattern, url)
    if match:
        date_str = match.group()
        year, month, day = map(int, date_str.split('/'))
        return year, month, day
    else:
        return None, None, None",,,,,
Write a function to print the first n lucky numbers.,"def lucky_num(n):
 List=range(-1,n*n+9,2)
 i=2
 while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1
 return List[1:n+1]",907,Write a function to print the first n lucky numbers.,"['assert lucky_num(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] ', 'assert lucky_num(5)==[1, 3, 7, 9, 13]', 'assert lucky_num(8)==[1, 3, 7, 9, 13, 15, 21, 25]']",[],"def print_lucky_numbers(n):
    lucky_numbers = [1]
    current_num = 1
    while len(lucky_numbers) < n:
        current_num += 2
        if all(current_num % x != 0 for x in lucky_numbers):
            lucky_numbers.append(current_num)
    print(lucky_numbers)",,,,,
Write a function to find the fixed point in the given array.,"def find_fixed_point(arr, n): 
	for i in range(n): 
		if arr[i] is i: 
			return i 
	return -1",908,Write a function to find the fixed point in the given array.,"['assert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3', 'assert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8) == -1', 'assert find_fixed_point([0, 2, 5, 8, 17],5) == 0']",[],"def find_fixed_point(arr):
    for i, num in enumerate(arr):
        if num == i:
            return num
    return -1",,,,,
Write a function to find the previous palindrome of a specified number.,"def previous_palindrome(num):
    for x in range(num-1,0,-1):
        if str(x) == str(x)[::-1]:
            return x",909,Write a function to find the previous palindrome of a specified number.,"['assert previous_palindrome(99)==88', 'assert previous_palindrome(1221)==1111', 'assert previous_palindrome(120)==111']",[],"def find_previous_palindrome(n):
    if n < 10:
        return 0  # No previous palindrome for single-digit numbers

    # Find the largest palindrome less than or equal to n
    palindrome = str(n)
    while not palindrome == palindrome[::-1]:
        palindrome = str(int(palindrome) - 1)

    return int(palindrome)",,,,,
Write a function to validate a gregorian date.,"import datetime
def check_date(m, d, y):
    try:
        m, d, y = map(int, (m, d, y))
        datetime.date(y, m, d)
        return True
    except ValueError:
        return False",910,Write a function to validate a gregorian date.,"['assert check_date(11,11,2002)==True', 'assert check_date(13,11,2002)==False', ""assert check_date('11','11','2002')==True""]",[],"def is_valid_gregorian_date(year, month, day):
    """"""
    Validates a Gregorian date.
    
    :param year: The year to validate.
    :param month: The month to validate.
    :param day: The day to validate.
    :return: True if the date is valid, False otherwise.
    """"""
    try:
        # Convert inputs to integers
        year = int(year)
        month = int(month)
        day = int(day)
        
        # Check if the year is within the valid range
        if year < 1 or year > 9999:
            return False
        
        # Check if the month is within the valid range
        if month < 1 or month > 12:
            return False
        
        # Check if the day is within the valid range for the given month and year
        if day < 1 or day > 31:
            return False
        
        # Check for February leap year
        if month == 2:
            if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
                # Leap year
                if day > 29:
                    return False
            else:
                # Non-leap year
                if day > 28:
                    return False
        
        # Check for days in April, June, September, and November
        elif month in [4, 6, 9, 11]:
            if day > 30:
                return False
        
        # All other months have 31 days
        
        return True
    
    except ValueError:
        # Inputs were not integers
        return False",,,,,
Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.,"def maximum_product(nums):
    import heapq
    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)
    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])",911,Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.,"['assert maximum_product( [12, 74, 9, 50, 61, 41])==225700', 'assert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375', 'assert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520']",[],"import heapq

def max_product_of_three(nums):
    # Create a max heap of the first three elements
    max_heap = [-num for num in nums[:3]]
    heapq.heapify(max_heap)

    # Iterate over the remaining elements
    for num in nums[3:]:
        # Pop the smallest element from the heap
        smallest = -heapq.heappop(max_heap)

        # Add the new element to the heap
        heapq.heappush(max_heap, -num)

        # If the heap size exceeds 3, pop the smallest element again
        if len(max_heap) > 3:
            heapq.heappop(max_heap)

    # The maximum product is the product of the three largest elements
    return -1 * (-max_heap[0]) * (-max_heap[1]) * (-max_heap[2])",,,,,
"Write a function to find ln, m lobb number.","def binomial_coeff(n, k): 
	C = [[0 for j in range(k + 1)] 
			for i in range(n + 1)] 
	for i in range(0, n + 1): 
		for j in range(0, min(i, k) + 1): 
			if (j == 0 or j == i): 
				C[i][j] = 1
			else: 
				C[i][j] = (C[i - 1][j - 1] 
							+ C[i - 1][j]) 
	return C[n][k] 
def lobb_num(n, m): 
	return (((2 * m + 1) *
		binomial_coeff(2 * n, m + n)) 
					/ (m + n + 1))",912,"Write a function to find ln, m lobb number.","['assert int(lobb_num(5, 3)) == 35', 'assert int(lobb_num(3, 2)) == 5', 'assert int(lobb_num(4, 2)) == 20']",[],"def log_base_m(n, m):
    import math
    return math.log(n, m)",,,,,
Write a function to check for a number at the end of a string.,"import re
def end_num(string):
    text = re.compile(r"".*[0-9]$"")
    if text.match(string):
        return True
    else:
        return False",913,Write a function to check for a number at the end of a string.,"[""assert end_num('abcdef')==False"", ""assert end_num('abcdef7')==True"", ""assert end_num('abc')==False""]",[],"def check_number_at_end(s):
    if not s:
        return False
    
    # Iterate over the characters from the end of the string
    for i in range(len(s) - 1, -1, -1):
        # Check if the character is a digit
        if s[i].isdigit():
            # Check if all remaining characters are also digits
            if all(char.isdigit() for char in s[i+1:]):
                return True
        else:
            # If a non-digit character is found before the number, return False
            break
    
    return False",,,,,
Write a python function to check whether the given string is made up of two alternating characters or not.,"def is_Two_Alter(s):  
    for i in range (len( s) - 2) : 
        if (s[i] != s[i + 2]) : 
            return False
    if (s[0] == s[1]): 
        return False
    return True",914,Write a python function to check whether the given string is made up of two alternating characters or not.,"['assert is_Two_Alter(""abab"") == True', 'assert is_Two_Alter(""aaaa"") == False', 'assert is_Two_Alter(""xyz"") == False']",[],"def is_alternating_string(string):
    if len(string) < 2:
        return False

    prev_char = string[0]
    for i in range(1, len(string)):
        if string[i] == prev_char:
            return False
        prev_char = string[i]

    return True",,,,,
Write a function to rearrange positive and negative numbers in a given array using lambda function.,"def rearrange_numbs(array_nums):
  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)
  return result ",915,Write a function to rearrange positive and negative numbers in a given array using lambda function.,"['assert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]', 'assert rearrange_numbs([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]', 'assert rearrange_numbs([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]']",[],"def rearrange_numbers(arr):
    return sorted(arr, key=lambda x: (x < 0, abs(x)))",,,,,
Write a function to find if there is a triplet in the array whose sum is equal to a given value.,"def find_triplet_array(A, arr_size, sum): 
	for i in range( 0, arr_size-2): 
		for j in range(i + 1, arr_size-1): 
			for k in range(j + 1, arr_size): 
				if A[i] + A[j] + A[k] == sum: 
					return  A[i],A[j],A[k] 
					return True
	return False",916,Write a function to find if there is a triplet in the array whose sum is equal to a given value.,"['assert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)', 'assert find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)', 'assert find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)']",[],"def find_triplet(nums, target_sum):
    nums.sort()  # Sort the array in ascending order
    n = len(nums)
    
    for i in range(n - 2):
        left = i + 1
        right = n - 1
        
        while left < right:
            current_sum = nums[i] + nums[left] + nums[right]
            
            if current_sum == target_sum:
                return (nums[i], nums[left], nums[right])
            elif current_sum < target_sum:
                left += 1
            else:
                right -= 1
    
    return None  # No triplet found",,,,,
Write a function to find the sequences of one upper case letter followed by lower case letters.,"import re
def text_uppercase_lowercase(text):
        patterns = '[A-Z]+[a-z]+$'
        if re.search(patterns, text):
                return 'Found a match!'
        else:
                return ('Not matched!')",917,Write a function to find the sequences of one upper case letter followed by lower case letters.,"['assert text_uppercase_lowercase(""AaBbGg"")==(\'Found a match!\')', 'assert text_uppercase_lowercase(""aA"")==(\'Not matched!\')', 'assert text_uppercase_lowercase(""PYTHON"")==(\'Not matched!\')']",[],"def find_sequences(chars):
    sequences = []
    current_sequence = []
    
    for char in chars:
        if char.isupper():
            if current_sequence:
                sequences.append(''.join(current_sequence))
                current_sequence = []
            current_sequence.append(char)
        elif char.islower():
            current_sequence.append(char)
        else:
            if current_sequence:
                sequences.append(''.join(current_sequence))
                current_sequence = []
    
    if current_sequence:
        sequences.append(''.join(current_sequence))
    
    return sequences",,,,,
Write a function to count coin change.,"def coin_change(S, m, n): 
    table = [[0 for x in range(m)] for x in range(n+1)] 
    for i in range(m): 
        table[0][i] = 1
    for i in range(1, n+1): 
        for j in range(m): 
            x = table[i - S[j]][j] if i-S[j] >= 0 else 0
            y = table[i][j-1] if j >= 1 else 0 
            table[i][j] = x + y   
    return table[n][m-1] ",918,Write a function to count coin change.,"['assert coin_change([1, 2, 3],3,4)==4', 'assert coin_change([4,5,6,7,8,9],6,9)==2', 'assert coin_change([4,5,6,7,8,9],6,4)==1']",[],,,,,,
Write a python function to multiply all items in the list.,"def multiply_list(items):
    tot = 1
    for x in items:
        tot *= x
    return tot",919,Write a python function to multiply all items in the list.,"['assert multiply_list([1,-2,3]) == -6', 'assert multiply_list([1,2,3,4]) == 24', 'assert multiply_list([3,1,2,3]) == 18']",[],,,,,,
Write a function to remove all tuples with all none values in the given tuple list.,"def remove_tuple(test_list):
  res = [sub for sub in test_list if not all(ele == None for ele in sub)]
  return (str(res)) ",920,Write a function to remove all tuples with all none values in the given tuple list.,"[""assert remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'"", ""assert remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'"", ""assert remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'""]",[],,,,,,
Write a function to perform chunking of tuples each of size n.,"def chunk_tuples(test_tup, N):
  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]
  return (res) ",921,Write a function to perform chunking of tuples each of size n.,"['assert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]', 'assert chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]', 'assert chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]']",[],"def chunk_tuples(tuples_list, n):
    chunked_list = []
    current_chunk = []
    
    for item in tuples_list:
        if len(current_chunk) == n:
            chunked_list.append(tuple(current_chunk))
            current_chunk = []
        current_chunk.append(item)
    
    if current_chunk:
        chunked_list.append(tuple(current_chunk))
    
    return chunked_list",,,,,
Write a function to find a pair with the highest product from a given array of integers.,"def max_product(arr): 
    arr_len = len(arr) 
    if (arr_len < 2): 
        return None     
    x = arr[0]; y = arr[1]    
    for i in range(0, arr_len): 
        for j in range(i + 1, arr_len): 
            if (arr[i] * arr[j] > x * y): 
                x = arr[i]; y = arr[j] 
    return x,y   ",922,Write a function to find a pair with the highest product from a given array of integers.,"['assert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)', 'assert max_product([0, -1, -2, -4, 5, 0, -6])==(-4, -6)', 'assert max_product([1, 3, 5, 6, 8, 9])==(8,9)']",[],"def max_product_pair(nums):
    nums.sort()  # Sort the array in ascending order
    n = len(nums)
    # The highest product will be either the product of the two largest numbers
    # or the product of the two smallest (negative) numbers
    max_product = max(nums[-1] * nums[-2], nums[0] * nums[1])
    return max_product",,,,,
Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.,"def super_seq(X, Y, m, n):
	if (not m):
		return n
	if (not n):
		return m
	if (X[m - 1] == Y[n - 1]):
		return 1 + super_seq(X, Y, m - 1, n - 1)
	return 1 + min(super_seq(X, Y, m - 1, n),	super_seq(X, Y, m, n - 1))",923,Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.,"['assert super_seq(""AGGTAB"", ""GXTXAYB"", 6, 7) == 9', 'assert super_seq(""feek"", ""eke"", 4, 3) == 5', 'assert super_seq(""PARRT"", ""RTA"", 5, 3) == 6']",[],,,,,,
Write a function to find maximum of two numbers.,"def max_of_two( x, y ):
    if x > y:
        return x
    return y",924,Write a function to find maximum of two numbers.,"['assert max_of_two(10,20)==20', 'assert max_of_two(19,15)==19', 'assert max_of_two(-10,-20)==-10']",[],"def max_of_two(num1, num2):
    return max(num1, num2)",,,,,
Write a python function to calculate the product of all the numbers of a given tuple.,"def mutiple_tuple(nums):
    temp = list(nums)
    product = 1 
    for x in temp:
        product *= x
    return product",925,Write a python function to calculate the product of all the numbers of a given tuple.,"['assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864', 'assert mutiple_tuple((1,2,3)) == 6', 'assert mutiple_tuple((-2,-4,-6)) == -48']",[],,,,,,
Write a function to find n-th rencontres number.,"def binomial_coeffi(n, k): 
	if (k == 0 or k == n): 
		return 1
	return (binomial_coeffi(n - 1, k - 1) 
		+ binomial_coeffi(n - 1, k)) 
def rencontres_number(n, m): 
	if (n == 0 and m == 0): 
		return 1
	if (n == 1 and m == 0): 
		return 0
	if (m == 0): 
		return ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) 
	return (binomial_coeffi(n, m) * rencontres_number(n - m, 0))",926,Write a function to find n-th rencontres number.,"['assert rencontres_number(7, 2) == 924', 'assert rencontres_number(3, 0) == 2', 'assert rencontres_number(3, 1) == 3']",[],"def rencontres_number(n, k):
    from math import factorial

    if n < k or k < 0:
        return 0

    # Calculate the rencontres number using the formula
    # (n-1)! * (D(n, k) - D(n, k-1))
    # where D(n, k) is the number of derangements of k elements from n
    derangements_n_k = factorial(n)
    for i in range(1, k):
        derangements_n_k -= factorial(n - i) * rencontres_number(i, i)

    return derangements_n_k

# Helper function to calculate the derangements of n elements
def derangements(n):
    if n == 0:
        return 1
    elif n == 1:
        return 0
    else:
        return (n - 1) * (derangements(n - 1) + derangements(n - 2))",,,,,
Write a function to calculate the height of the given binary tree.,"class Node: 
	def __init__(self, data): 
		self.data = data 
		self.left = None
		self.right = None
def max_height(node): 
	if node is None: 
		return 0 ; 
	else : 
		left_height = max_height(node.left) 
		right_height = max_height(node.right) 
		if (left_height > right_height): 
			return left_height+1
		else: 
			return right_height+1",927,Write a function to calculate the height of the given binary tree.,"['assert (max_height(root)) == 3', 'assert (max_height(root1)) == 5 ', 'assert (max_height(root2)) == 4']",[],,,,,,
Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.,"import re
def change_date_format(dt):
        return re.sub(r'(\d{4})-(\d{1,2})-(\d{1,2})', '\\3-\\2-\\1', dt)
        return change_date_format(dt)",928,Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.,"[""assert change_date_format('2026-01-02')=='02-01-2026'"", ""assert change_date_format('2021-01-04')=='04-01-2021'"", ""assert change_date_format('2030-06-06')=='06-06-2030'""]",[],"def convert_date_format(date_str):
    year, month, day = map(int, date_str.split('-'))
    return f""{day:02d}-{month:02d}-{year}""",,,,,
Write a function to count repeated items of a tuple.,"def count_tuplex(tuplex,value):  
  count = tuplex.count(value)
  return count",929,Write a function to count repeated items of a tuple.,"['assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3', 'assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2', 'assert count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4']",[],,,,,,
Write a function that matches a string that has an a followed by zero or more b's by using regex.,"import re
def text_match(text):
        patterns = 'ab*?'
        if re.search(patterns,  text):
                return ('Found a match!')
        else:
                return ('Not matched!')",930,Write a function that matches a string that has an a followed by zero or more b's by using regex.,"['assert text_match(""msb"") == \'Not matched!\'', 'assert text_match(""a0c"") == \'Found a match!\'', 'assert text_match(""abbc"") == \'Found a match!\'']",[],"import re

def match_string_with_regex(string):
    pattern = r'ab*'
    match = re.match(pattern, string)
    return bool(match)",,,,,
Write a function to calculate the sum of series 1³+2³+3³+….+n³.,"import math 
def sum_series(number):
 total = 0
 total = math.pow((number * (number + 1)) /2, 2)
 return total",931,Write a function to calculate the sum of series 1³+2³+3³+….+n³.,"['assert sum_series(7)==784', 'assert sum_series(5)==225', 'assert sum_series(15)==14400']",[],"def sum_of_cubes(n):
    total = 0
    for i in range(1, n + 1):
        total += i ** 3
    return total",,,,,
Write a function to remove duplicate words from a given list of strings.,"def remove_duplic_list(l):
    temp = []
    for x in l:
        if x not in temp:
            temp.append(x)
    return temp",932,Write a function to remove duplicate words from a given list of strings.,"['assert remove_duplic_list([""Python"", ""Exercises"", ""Practice"", ""Solution"", ""Exercises""])==[\'Python\', \'Exercises\', \'Practice\', \'Solution\']', 'assert remove_duplic_list([""Python"", ""Exercises"", ""Practice"", ""Solution"", ""Exercises"",""Java""])==[\'Python\', \'Exercises\', \'Practice\', \'Solution\', \'Java\']', 'assert remove_duplic_list([""Python"", ""Exercises"", ""Practice"", ""Solution"", ""Exercises"",""C++"",""C"",""C++""])==[\'Python\', \'Exercises\', \'Practice\', \'Solution\',\'C++\',\'C\']']",[],,,,,,
Write a function to convert camel case string to snake case string by using regex.,"import re
def camel_to_snake(text):
  str1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', text)
  return re.sub('([a-z0-9])([A-Z])', r'\1_\2', str1).lower()",933,Write a function to convert camel case string to snake case string by using regex.,"[""assert camel_to_snake('GoogleAssistant') == 'google_assistant'"", ""assert camel_to_snake('ChromeCast') == 'chrome_cast'"", ""assert camel_to_snake('QuadCore') == 'quad_core'""]",[],,,,,,
Write a function to find the nth delannoy number.,"def dealnnoy_num(n, m): 
	if (m == 0 or n == 0) : 
		return 1
	return dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)",934,Write a function to find the nth delannoy number.,"['assert dealnnoy_num(3, 4) == 129', 'assert dealnnoy_num(3, 3) == 63', 'assert dealnnoy_num(4, 5) == 681']",[],,,,,,
Write a function to calculate the sum of series 1²+2²+3²+….+n².,"def series_sum(number):
 total = 0
 total = (number * (number + 1) * (2 * number + 1)) / 6
 return total",935,Write a function to calculate the sum of series 1²+2²+3²+….+n².,"['assert series_sum(6)==91', 'assert series_sum(7)==140', 'assert series_sum(12)==650']",[],"def series_sum(n):
    return sum(i**2 for i in range(1, n+1))",,,,,
Write a function to re-arrange the given tuples based on the given ordered list.,"def re_arrange_tuples(test_list, ord_list):
  temp = dict(test_list)
  res = [(key, temp[key]) for key in ord_list]
  return (res) ",936,Write a function to re-arrange the given tuples based on the given ordered list.,"['assert re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]', 'assert re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]', 'assert re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]']",[],"def rearrange_tuples(tuples_list, order_list):
    # Create a dictionary to map tuple indices to their original tuples
    tuple_dict = {index: tuple for index, tuple in enumerate(tuples_list)}
    
    # Sort the indices based on the order_list
    sorted_indices = sorted(range(len(order_list)), key=lambda x: order_list[x])
    
    # Rearrange the tuples based on the sorted indices
    rearranged_tuples = [tuple_dict[index] for index in sorted_indices]
    
    return rearranged_tuples",,,,,
Write a function to count the most common character in a given string.,"from collections import Counter 
def max_char(str1):
    temp = Counter(str1) 
    max_char = max(temp, key = temp.get)
    return max_char",937,Write a function to count the most common character in a given string.,"['assert max_char(""hello world"")==(\'l\')', 'assert max_char(""hello "")==(\'l\')', 'assert max_char(""python pr"")==(\'p\')']",[],,,,,,
Write a function to find three closest elements from three sorted arrays.,"import sys 

def find_closet(A, B, C, p, q, r): 
	diff = sys.maxsize 
	res_i = 0
	res_j = 0
	res_k = 0
	i = 0
	j = 0
	k = 0
	while(i < p and j < q and k < r): 
		minimum = min(A[i], min(B[j], C[k])) 
		maximum = max(A[i], max(B[j], C[k])); 
		if maximum-minimum < diff: 
			res_i = i 
			res_j = j 
			res_k = k 
			diff = maximum - minimum; 
		if diff == 0: 
			break
		if A[i] == minimum: 
			i = i+1
		elif B[j] == minimum: 
			j = j+1
		else: 
			k = k+1
	return A[res_i],B[res_j],C[res_k]",938,Write a function to find three closest elements from three sorted arrays.,"['assert find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)', 'assert find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)', 'assert find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)']",[],"def find_three_closest_elements(arr1, arr2, arr3, k):
    # Initialize pointers and distances
    p1, p2, p3 = 0, 0, 0
    dist1, dist2, dist3 = 0, 0, 0
    
    # Initialize the result list
    result = []
    
    # Iterate through the arrays until we find k elements
    while len(result) < k:
        # Calculate the current distances from the pointers
        curr_dist1 = abs(arr1[p1] - result[-1] if result else float('inf'))
        curr_dist2 = abs(arr2[p2] - result[-1] if result else float('inf'))
        curr_dist3 = abs(arr3[p3] - result[-1] if result else float('inf'))
        
        # Find the minimum distance and its corresponding array index
        min_dist = min(curr_dist1, curr_dist2, curr_dist3)
        if min_dist == curr_dist1:
            p1 += 1
        elif min_dist == curr_dist2:
            p2 += 1
        else:
            p3 += 1
        
        # Add the element with the minimum distance to the result list
        result.append(min(arr1[p1-1], arr2[p2-1], arr3[p3-1]))
    
    # Remove duplicates from the result list
    result = list(dict.fromkeys(result))
    
    # Return the three closest elements
    return result[:3]",,,,,
Write a function to sort a list of dictionaries using lambda function.,"def sorted_models(models):
 sorted_models = sorted(models, key = lambda x: x['color'])
 return sorted_models",939,Write a function to sort a list of dictionaries using lambda function.,"[""assert sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]"", ""assert sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])"", ""assert sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])""]",[],"def sort_dict_list(dict_list, key, reverse=False):
    return sorted(dict_list, key=lambda item: item[key], reverse=reverse)",,,,,
Write a function to sort the given array by using heap sort.,"def heap_sort(arr):
    heapify(arr)  
    end = len(arr) - 1
    while end > 0:
        arr[end], arr[0] = arr[0], arr[end]
        shift_down(arr, 0, end - 1)
        end -= 1
    return arr

def heapify(arr):
    start = len(arr) // 2
    while start >= 0:
        shift_down(arr, start, len(arr) - 1)
        start -= 1
def shift_down(arr, start, end):
    root = start
    while root * 2 + 1 <= end:
        child = root * 2 + 1
        if child + 1 <= end and arr[child] < arr[child + 1]:
            child += 1
        if child <= end and arr[root] < arr[child]:
            arr[root], arr[child] = arr[child], arr[root]
            root = child
        else:
            return
",940,Write a function to sort the given array by using heap sort.,"['assert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]', 'assert heap_sort([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]', 'assert heap_sort([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]']",[],,,,,,
Write a function to count the elements in a list until an element is a tuple.,"def count_elim(num):
  count_elim = 0
  for n in num:
    if isinstance(n, tuple):
        break
    count_elim += 1
  return count_elim",941,Write a function to count the elements in a list until an element is a tuple.,"['assert count_elim([10,20,30,(10,20),40])==3', 'assert count_elim([10,(20,30),(10,20),40])==1', 'assert count_elim([(10,(20,30,(10,20),40))])==0']",[],"def count_elements_until_tuple(lst):
    count = 0
    for element in lst:
        if isinstance(element, tuple):
            break
        count += 1
    return count",,,,,
Write a function to check if any list element is present in the given list.,"def check_element(test_tup, check_list):
  res = False
  for ele in check_list:
    if ele in test_tup:
      res = True
      break
  return (res) ",942,Write a function to check if any list element is present in the given list.,"['assert check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True', 'assert check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True', 'assert check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False']",[],"def check_list_elements(list1, list2):
    for element in list1:
        if element in list2:
            return True
    return False",,,,,
Write a function to combine two given sorted lists using heapq module.,"from heapq import merge
def combine_lists(num1,num2):
  combine_lists=list(merge(num1, num2))
  return combine_lists",943,Write a function to combine two given sorted lists using heapq module.,"['assert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]', 'assert combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]', 'assert combine_lists([1,3,7],[2,4,6])==[1,2,3,4,6,7]']",[],"import heapq

def merge_sorted_lists(list1, list2):
    # Create a min-heap from the concatenation of the two lists
    heap = [(val, idx) for idx, val in enumerate(list1 + list2)]
    heapq.heapify(heap)
    
    # Initialize the result list
    result = []
    
    # Pop elements from the heap while keeping track of the original list indices
    while heap:
        val, idx = heapq.heappop(heap)
        # If the popped element is from the first list, add it to the result
        if idx < len(list1):
            result.append(val)
            # If there are more elements in the first list, add them to the heap
            if idx + 1 < len(list1):
                heapq.heappush(heap, (list1[idx + 1], idx + 1))
    
    return result

# Example usage:
list1 = [1, 3, 5, 7, 9, 11]
list2 = [0, 2, 4, 6, 8, 10]
print(merge_sorted_lists(list1, list2))  # Output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]

list3 = [1, 3, 7]
list4 = [2, 4, 6]
print(merge_sorted_lists(list3, list4))  # Output: [1, 2, 3, 4, 6, 7]",,,,,
Write a function to separate and print the numbers and their position of a given string.,"import re
def num_position(text):
 for m in re.finditer(""\d+"", text):
    return m.start()",944,Write a function to separate and print the numbers and their position of a given string.,"['assert num_position(""there are 70 flats in this apartment"")==10', 'assert num_position(""every adult have 32 teeth"")==17', 'assert num_position(""isha has 79 chocolates in her bag"")==9']",[],"def find_numbers_and_positions(string):
    numbers = []
    positions = []
    start_pos = None

    for i, char in enumerate(string):
        if char.isdigit():
            if start_pos is None:
                start_pos = i
        else:
            if start_pos is not None:
                number = int(''.join(string[start_pos:i]))
                numbers.append(number)
                positions.append(start_pos)
                start_pos = None

    # Check if there's a number at the end of the string
    if start_pos is not None:
        number = int(''.join(string[start_pos:]))
        numbers.append(number)
        positions.append(start_pos)

    for number, pos in zip(numbers, positions):
        print(f""Number: {number}, Position: {pos}"")

# Example usage:
input_string = ""assert numbers and positions == 10, 'assert num_position(assert numbers and positions == 17, 'assert num_position(assert numbers and positions == 9, ""
find_numbers_and_positions(input_string)",,,,,
Write a function to convert the given tuples into set.,"def tuple_to_set(t):
  s = set(t)
  return (s) ",945,Write a function to convert the given tuples into set.,"[""assert tuple_to_set(('x', 'y', 'z') ) == {'y', 'x', 'z'}"", ""assert tuple_to_set(('a', 'b', 'c') ) == {'c', 'a', 'b'}"", ""assert tuple_to_set(('z', 'd', 'e') ) == {'d', 'e', 'z'}""]",[],"def tuple_to_set(tuple_str):
    # Remove whitespace and split the string by commas
    elements = tuple_str.replace("" "", """").split("","")
    
    # Filter out empty strings and convert each element to a tuple
    tuples = [tuple(filter(None, element.strip(""'"").split(""'""))) for element in elements if element.strip()]
    
    # Convert each tuple to a set and return the final set
    return {frozenset(t) for t in tuples}",,,,,
Write a function to find the most common elements and their counts of a specified text.,"from collections import Counter 
def most_common_elem(s,a):
  most_common_elem=Counter(s).most_common(a)
  return most_common_elem",946,Write a function to find the most common elements and their counts of a specified text.,"[""assert most_common_elem('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] "", ""assert most_common_elem('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]"", ""assert most_common_elem('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]""]",[],,,,,,
Write a python function to find the length of the shortest word.,"def len_log(list1):
    min=len(list1[0])
    for i in list1:
        if len(i)<min:
            min=len(i)
    return min",947,Write a python function to find the length of the shortest word.,"['assert len_log([""win"",""lose"",""great""]) == 3', 'assert len_log([""a"",""ab"",""abc""]) == 1', 'assert len_log([""12"",""12"",""1234""]) == 2']",[],"def find_shortest_word_length(words):
    # Initialize the shortest length to a large value
    shortest_length = float('inf')
    
    # Iterate over each word in the list
    for word in words:
        # Convert the word to a string (to handle cases where words are not already strings)
        word_str = str(word)
        
        # Check if the word is non-empty
        if word_str:
            # Update the shortest length if the current word's length is shorter
            shortest_length = min(shortest_length, len(word_str))
    
    # Return the shortest length found
    return shortest_length",,,,,
Write a function to get an item of a tuple.,"def get_item(tup1,index):
  item = tup1[index]
  return item",948,Write a function to get an item of a tuple.,"['assert get_item((""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""),3)==(\'e\')', 'assert get_item((""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""),-4)==(\'u\')', 'assert get_item((""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""),-3)==(\'r\')']",[],,,,,,
Write a function to sort the given tuple list basis the total digits in tuple.,"def count_digs(tup):
  return sum([len(str(ele)) for ele in tup ]) 
def sort_list(test_list):
  test_list.sort(key = count_digs)
  return (str(test_list))",949,Write a function to sort the given tuple list basis the total digits in tuple.,"[""assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'"", ""assert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'"", ""assert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'""]",[],,,,,,
Write a function to display sign of the chinese zodiac for given year.,"def chinese_zodiac(year):
 if (year - 2000) % 12 == 0:
     sign = 'Dragon'
 elif (year - 2000) % 12 == 1:
     sign = 'Snake'
 elif (year - 2000) % 12 == 2:
     sign = 'Horse'
 elif (year - 2000) % 12 == 3:
     sign = 'sheep'
 elif (year - 2000) % 12 == 4:
     sign = 'Monkey'
 elif (year - 2000) % 12 == 5:
     sign = 'Rooster'
 elif (year - 2000) % 12 == 6:
     sign = 'Dog'
 elif (year - 2000) % 12 == 7:
     sign = 'Pig'
 elif (year - 2000) % 12 == 8:
     sign = 'Rat'
 elif (year - 2000) % 12 == 9:
     sign = 'Ox'
 elif (year - 2000) % 12 == 10:
     sign = 'Tiger'
 else:
     sign = 'Hare'
 return sign",950,Write a function to display sign of the chinese zodiac for given year.,"[""assert chinese_zodiac(1997)==('Ox')"", ""assert chinese_zodiac(1998)==('Tiger')"", ""assert chinese_zodiac(1994)==('Dog')""]",[],,,,,,
Write a function to find the maximum of similar indices in two lists of tuples.,"def max_similar_indices(test_list1, test_list2):
  res = [(max(x[0], y[0]), max(x[1], y[1]))
   for x, y in zip(test_list1, test_list2)]
  return (res) ",951,Write a function to find the maximum of similar indices in two lists of tuples.,"['assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]', 'assert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]', 'assert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]']",[],"def find_max_similar_indices(list1, list2):
    max_indices = []
    for i, (tuple1, tuple2) in enumerate(zip(list1, list2)):
        if tuple1[1] == tuple2[1]:
            max_indices.append(i)
    
    if not max_indices:
        return []
    
    max_value = max(max_indices)
    return [tuple1 for tuple1, _ in zip(list1, list2) if list1.index(tuple1) == max_value]

# Example usage:
list1 = [(2, 4), (6, 7), (5, 1)]
list2 = [(5, 4), (8, 10), (8, 14)]
result = find_max_similar_indices(list1, list2)
print(result)  # Output: [(5, 4), (8, 10), (8, 14)]",,,,,
Write a function to compute the value of ncr mod p.,"def nCr_mod_p(n, r, p): 
	if (r > n- r): 
		r = n - r 
	C = [0 for i in range(r + 1)] 
	C[0] = 1 
	for i in range(1, n + 1): 
		for j in range(min(i, r), 0, -1): 
			C[j] = (C[j] + C[j-1]) % p 
	return C[r] ",952,Write a function to compute the value of ncr mod p.,"['assert nCr_mod_p(10, 2, 13) == 6', 'assert nCr_mod_p(11, 3, 14) == 11', 'assert nCr_mod_p(18, 14, 19) == 1']",[],"def nCr_mod_p(n, r, p):
    if r > n:
        return 0
    if r > n // 2:
        r = n - r
    result = 1
    for i in range(r):
        result = (result * (n - i)) % p
        result = (result * mod_inverse(i + 1, p)) % p
    return result

def mod_inverse(a, m):
    m0, x0, x1 = m, 0, 1
    while a > 1:
        q = a // m
        m, a = a % m, m
        x0, x1 = x1 - q * x0, x0
    return x1 + m0 if x1 < 0 else x1",,,,,
Write a python function to find the minimun number of subsets with distinct elements.,"def subset(ar, n): 
    res = 0
    ar.sort() 
    for i in range(0, n) : 
        count = 1
        for i in range(n - 1): 
            if ar[i] == ar[i + 1]: 
                count+=1
            else: 
                break 
        res = max(res, count)  
    return res ",953,Write a python function to find the minimun number of subsets with distinct elements.,"['assert subset([1, 2, 3, 4],4) == 1', 'assert subset([5, 6, 9, 3, 4, 3, 4],7) == 2', 'assert subset([1, 2, 3 ],3) == 1']",[],"def min_subsets_with_distinct_elements(arr):
    # Create a set of unique elements in the array
    unique_elements = set(arr)
    
    # Create a dictionary to keep track of the count of each element
    element_count = {elem: arr.count(elem) for elem in unique_elements}
    
    # Sort the elements based on their count in descending order
    sorted_elements = sorted(element_count, key=element_count.get, reverse=True)
    
    # Initialize the count of subsets
    subset_count = 0
    
    # Iterate over the sorted elements
    for elem in sorted_elements:
        # If the element has a count greater than the number of remaining subsets
        # (including the current one), we need to create additional subsets
        if element_count[elem] > subset_count + 1:
            # Calculate the number of additional subsets needed
            additional_subsets = (element_count[elem] - 1) // (subset_count + 1)
            
            # Update the subset count
            subset_count += additional_subsets
        
        # Decrement the count of the current element by the number of subsets created
        element_count[elem] -= subset_count + 1
        
        # Increment the subset count for the next iteration
        subset_count += 1
    
    return subset_count",,,,,
Write a function that gives profit amount if the given amount has profit else return none.,"def profit_amount(actual_cost,sale_amount): 
 if(actual_cost > sale_amount):
    amount = actual_cost - sale_amount
    return amount
 else:
    return None",954,Write a function that gives profit amount if the given amount has profit else return none.,"['assert profit_amount(1500,1200)==300', 'assert profit_amount(100,200)==None', 'assert profit_amount(2000,5000)==None']",[],"def assert_profit_amount(amount, profit):
    if isinstance(amount, int) and isinstance(profit, int):
        if amount > profit:
            return amount - profit
        else:
            return None
    else:
        return None",,,,,
"Write a function to find out, if the given number is abundant.","def is_abundant(n):
    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])
    return fctrsum > n",955,"Write a function to find out, if the given number is abundant.","['assert is_abundant(12)==True', 'assert is_abundant(13)==False', 'assert is_abundant(9)==False']",[],"def is_abundant(n):
    def get_divisors_sum(num):
        divisors_sum = 1  # Include 1 as a divisor
        for i in range(2, int(num ** 0.5) + 1):
            if num % i == 0:
                divisors_sum += i
                if i != num // i:
                    divisors_sum += num // i
        return divisors_sum

    divisors_sum = get_divisors_sum(n)
    return divisors_sum > n",,,,,
Write a function to split the given string at uppercase letters by using regex.,"import re
def split_list(text):
  return (re.findall('[A-Z][^A-Z]*', text))",956,Write a function to split the given string at uppercase letters by using regex.,"['assert split_list(""LearnToBuildAnythingWithGoogle"") == [\'Learn\', \'To\', \'Build\', \'Anything\', \'With\', \'Google\']', 'assert split_list(""ApmlifyingTheBlack+DeveloperCommunity"") == [\'Apmlifying\', \'The\', \'Black+\', \'Developer\', \'Community\']', 'assert split_list(""UpdateInTheGoEcoSystem"") == [\'Update\', \'In\', \'The\', \'Go\', \'Eco\', \'System\']']",[],,,,,,
Write a python function to get the position of rightmost set bit.,"import math
def get_First_Set_Bit_Pos(n):
     return math.log2(n&-n)+1",957,Write a python function to get the position of rightmost set bit.,"['assert get_First_Set_Bit_Pos(12) == 3', 'assert get_First_Set_Bit_Pos(18) == 2', 'assert get_First_Set_Bit_Pos(16) == 5']",[],,,,,,
Write a function to convert an integer into a roman numeral.,"def int_to_roman( num):
        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]
        syb = [""M"", ""CM"", ""D"", ""CD"",""C"", ""XC"", ""L"", ""XL"",""X"", ""IX"", ""V"", ""IV"",""I""]
        roman_num = ''
        i = 0
        while  num > 0:
            for _ in range(num // val[i]):
                roman_num += syb[i]
                num -= val[i]
            i += 1
        return roman_num",958,Write a function to convert an integer into a roman numeral.,"['assert int_to_roman(1)==(""I"")', 'assert int_to_roman(50)==(""L"")', 'assert int_to_roman(4)==(""IV"")']",[],"def int_to_roman(num):
    # Define the mapping of integers to Roman numerals
    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
    symbols = [""M"", ""CM"", ""D"", ""CD"", ""C"", ""XC"", ""L"", ""XL"", ""X"", ""IX"", ""V"", ""IV"", ""I""]
    
    roman_numeral = """"
    
    # Iterate through the values in descending order
    for i in range(len(values)):
        # Calculate how many times the current value fits into the number
        count = num // values[i]
        
        # Add the corresponding symbol to the Roman numeral
        roman_numeral += symbols[i] * count
        
        # Subtract the calculated value from the number
        num %= values[i]
    
    return roman_numeral",,,,,
Write a python function to find the average of a list.,"def Average(lst): 
    return sum(lst) / len(lst) ",959,Write a python function to find the average of a list.,"['assert Average([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75', 'assert Average([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75', 'assert Average([1,2,3]) == 2']",[],"def calculate_average(numbers):
    if not numbers:  # Check if the list is empty
        return 0
    return sum(numbers) / len(numbers)",,,,,
Write a function to solve tiling problem.,"def get_noOfways(n):
    if (n == 0):
        return 0;
    if (n == 1):
        return 1; 
    return get_noOfways(n - 1) + get_noOfways(n - 2);",960,Write a function to solve tiling problem.,"['assert get_noOfways(4)==3', 'assert get_noOfways(3)==2', 'assert get_noOfways(5)==5']",[],,,,,,
Write a function to convert a roman numeral to an integer.,"def roman_to_int(s):
        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
        int_val = 0
        for i in range(len(s)):
            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:
                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]
            else:
                int_val += rom_val[s[i]]
        return int_val",961,Write a function to convert a roman numeral to an integer.,"[""assert roman_to_int('MMMCMLXXXVI')==3986"", ""assert roman_to_int('MMMM')==4000"", ""assert roman_to_int('C')==100""]",[],"def roman_to_int(s):
    roman_values = {
        'I': 1,
        'V': 5,
        'X': 10,
        'L': 50,
        'C': 100,
        'D': 500,
        'M': 1000
    }
    
    total = 0
    prev_value = 0
    
    for char in reversed(s):
        value = roman_values[char]
        if value >= prev_value:
            total += value
        else:
            total -= value
        prev_value = value
    
    return total",,,,,
Write a python function to find the sum of all even natural numbers within the range l and r.,"def sum_Natural(n): 
    sum = (n * (n + 1)) 
    return int(sum) 
def sum_Even(l,r): 
    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) ",962,Write a python function to find the sum of all even natural numbers within the range l and r.,"['assert sum_Even(2,5) == 6', 'assert sum_Even(3,8) == 18', 'assert sum_Even(4,6) == 10']",[],"def sum_even_numbers(l, r):
    sum_even = 0
    for num in range(l, r + 1):
        if num % 2 == 0:
            sum_even += num
    return sum_even",,,,,
Write a function to calculate the discriminant value.,"def discriminant_value(x,y,z):
    discriminant = (y**2) - (4*x*z)
    if discriminant > 0:
        return (""Two solutions"",discriminant)
    elif discriminant == 0:
        return (""one solution"",discriminant)
    elif discriminant < 0:
        return (""no real solution"",discriminant)",963,Write a function to calculate the discriminant value.,"['assert discriminant_value(4,8,2)==(""Two solutions"",32)', 'assert discriminant_value(5,7,9)==(""no real solution"",-131)', 'assert discriminant_value(0,0,9)==(""one solution"",0)']",[],"def calculate_discriminant(a, b, c):
    discriminant = b ** 2 - 4 * a * c
    return discriminant",,,,,
Write a python function to check whether the length of the word is even or not.,"def word_len(s): 
    s = s.split(' ')   
    for word in s:    
        if len(word)%2==0: 
            return True  
        else:
          return False",964,Write a python function to check whether the length of the word is even or not.,"['assert word_len(""program"") == False', 'assert word_len(""solution"") == True', 'assert word_len(""data"") == True']",[],,,,,,
Write a function to convert camel case string to snake case string.,"def camel_to_snake(text):
        import re
        str1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', text)
        return re.sub('([a-z0-9])([A-Z])', r'\1_\2', str1).lower()",965,Write a function to convert camel case string to snake case string.,"[""assert camel_to_snake('PythonProgram')==('python_program')"", ""assert camel_to_snake('pythonLanguage')==('python_language')"", ""assert camel_to_snake('ProgrammingLanguage')==('programming_language')""]",[],,,,,,
Write a function to remove an empty tuple from a list of tuples.,"def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]
   tuple1 = [t for t in tuple1 if t]
   return tuple1",966,Write a function to remove an empty tuple from a list of tuples.,"[""assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  "", 'assert remove_empty([(), (), (\'\',), (""python""), (""program"")])==[(\'\',), (""python""), (""program"")]  ', 'assert remove_empty([(), (), (\'\',), (""java"")])==[(\'\',),(""java"") ]  ']",[],"def remove_empty_tuples(lst):
    return [tup for tup in lst if tup != ()]",,,,,
Write a python function to accept the strings which contains all vowels.,"def check(string): 
  if len(set(string).intersection(""AEIOUaeiou""))>=5: 
    return ('accepted') 
  else: 
    return (""not accepted"") ",967,Write a python function to accept the strings which contains all vowels.,"['assert check(""SEEquoiaL"") == \'accepted\'', 'assert check(\'program\') == ""not accepted""', 'assert check(\'fine\') == ""not accepted""']",[],,,,,,
Write a python function to find maximum possible value for the given periodic function.,"def floor_Max(A,B,N):
    x = min(B - 1,N)
    return (A*x) // B",968,Write a python function to find maximum possible value for the given periodic function.,"['assert floor_Max(11,10,9) == 9', 'assert floor_Max(5,7,4) == 2', 'assert floor_Max(2,2,1) == 1']",[],"def assert_floor_max(a, b, c):
    # Assuming a periodic function with amplitude 'a' and period 'b'
    # The 'c' parameter might represent some phase shift or offset, but it's not clear from the tests
    # Since we don't have the exact function formula, we'll assume the maximum occurs at the peak of the cycle
    # For a sine-like function, the peak would be 'a'
    return a

# Test the function with the provided test cases
assert assert_floor_max(11, 10, 9) == 9
assert assert_floor_max(5, 7, 4) == 2
assert assert_floor_max(2, 2, 1) == 1",,,,,
Write a function to join the tuples if they have similar initial elements.,"def join_tuples(test_list):
  res = []
  for sub in test_list:
    if res and res[-1][0] == sub[0]:
      res[-1].extend(sub[1:])
    else:
      res.append([ele for ele in sub])
  res = list(map(tuple, res))
  return (res) ",969,Write a function to join the tuples if they have similar initial elements.,"['assert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]', 'assert join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]', 'assert join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]']",[],"def join_tuples(tuples_list):
    # Create a dictionary to store tuples with similar initial elements
    similar_tuples = {}

    # Iterate over the tuples in the list
    for tup in tuples_list:
        # Get the initial elements of the tuple
        initial_elements = tup[:len(tup) - 1]

        # Check if the initial elements are already a key in the dictionary
        if initial_elements in similar_tuples:
            # If they are, append the last element of the current tuple to the existing list
            similar_tuples[initial_elements].append(tup[-1])
        else:
            # If not, create a new key with the initial elements and a list containing the last element
            similar_tuples[initial_elements] = [tup[-1]]

    # Convert the dictionary back to a list of tuples
    joined_tuples = []
    for initial_elements, elements_list in similar_tuples.items():
        # Add the initial elements followed by the joined elements
        joined_tuples.append(initial_elements + tuple(elements_list))

    return joined_tuples",,,,,
Write a function to find minimum of two numbers.,"def min_of_two( x, y ):
    if x < y:
        return x
    return y",970,Write a function to find minimum of two numbers.,"['assert min_of_two(10,20)==10', 'assert min_of_two(19,15)==15', 'assert min_of_two(-10,-20)==-20']",[],"def min_of_two_numbers(a, b):
    return min(a, b)",,,,,
"Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.","def maximum_segments(n, a, b, c) : 
	dp = [-1] * (n + 10) 
	dp[0] = 0
	for i in range(0, n) : 
		if (dp[i] != -1) : 
			if(i + a <= n ): 
				dp[i + a] = max(dp[i] + 1, 
							dp[i + a]) 
			if(i + b <= n ): 
				dp[i + b] = max(dp[i] + 1, 
							dp[i + b]) 
			if(i + c <= n ): 
				dp[i + c] = max(dp[i] + 1, 
							dp[i + c]) 
	return dp[n]",971,"Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.","['assert maximum_segments(7, 5, 2, 5) == 2', 'assert maximum_segments(17, 2, 1, 3) == 17', 'assert maximum_segments(18, 16, 3, 6) == 6']",[],,,,,,
Write a function to concatenate the given two tuples to a nested tuple.,"def concatenate_nested(test_tup1, test_tup2):
  res = test_tup1 + test_tup2
  return (res) ",972,Write a function to concatenate the given two tuples to a nested tuple.,"['assert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)', 'assert concatenate_nested((1, 2), (3, 4)) == (1, 2, 3, 4)', 'assert concatenate_nested((4, 5), (6, 8)) == (4, 5, 6, 8)']",[],,,,,,
Write a python function to left rotate the string.,"def left_rotate(s,d):
    tmp = s[d : ] + s[0 : d]
    return tmp  ",973,Write a python function to left rotate the string.,"['assert left_rotate(""python"",2) == ""thonpy""   ', 'assert left_rotate(""bigdata"",3 ) == ""databig"" ', 'assert left_rotate(""hadoop"",1 ) == ""adooph"" ']",[],"def left_rotate_string(s, steps):
    if not s or steps == 0:
        return s
    
    n = len(s)
    steps %= n  # Handle cases where steps is greater than the length of the string
    
    return s[steps:] + s[:steps]",,,,,
Write a function to find the minimum total path sum in the given triangle.,"def min_sum_path(A): 
	memo = [None] * len(A) 
	n = len(A) - 1
	for i in range(len(A[n])): 
		memo[i] = A[n][i] 
	for i in range(len(A) - 2, -1,-1): 
		for j in range( len(A[i])): 
			memo[j] = A[i][j] + min(memo[j], 
									memo[j + 1]) 
	return memo[0]",974,Write a function to find the minimum total path sum in the given triangle.,"['assert min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6', 'assert min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 ', 'assert min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9']",[],"def minimum_total_path_sum(triangle):
    # Create a copy of the triangle to modify
    dp = [row[:] for row in triangle]

    # Start from the bottom row and work our way up
    for i in range(len(dp) - 2, -1, -1):
        for j in range(len(dp[i])):
            # Calculate the minimum sum by adding the current element with the minimum of the two elements below it
            dp[i][j] += min(dp[i + 1][j], dp[i + 1][j + 1])

    # The minimum total path sum is the first element of the top row
    return dp[0][0]",,,,,
